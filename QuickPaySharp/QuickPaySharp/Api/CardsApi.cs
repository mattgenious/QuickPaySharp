/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using QuickPaySharp.Client;
using QuickPaySharp.Model;

namespace QuickPaySharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICardsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        void DELETECardsIdLinkFormat (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Delete card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETECardsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Get saved cards
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Card</returns>
        Card GETCardsFormat (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null);

        /// <summary>
        /// Get saved cards
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> GETCardsFormatWithHttpInfo (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null);
        /// <summary>
        /// Get saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Card</returns>
        Card GETCardsIdFormat (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Get saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> GETCardsIdFormatWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>CardOperation</returns>
        CardOperation GETCardsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? operationId, string id);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of CardOperation</returns>
        ApiResponse<CardOperation> GETCardsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? operationId, string id);
        /// <summary>
        /// Update saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        Card PATCHCardsIdFormat (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> PATCHCardsIdFormatWithHttpInfo (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null);
        /// <summary>
        /// Create saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Card</returns>
        Card POSTCardsFormat (string acceptVersion, string authorization, Dictionary<string, string> variables = null);

        /// <summary>
        /// Create saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> POSTCardsFormatWithHttpInfo (string acceptVersion, string authorization, Dictionary<string, string> variables = null);
        /// <summary>
        /// Authorize saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        Card POSTCardsIdAuthorizeFormat (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Authorize saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> POSTCardsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Cancel saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        Card POSTCardsIdCancelFormat (string acceptVersion, string authorization, string id, bool? synchronized = null);

        /// <summary>
        /// Cancel saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        ApiResponse<Card> POSTCardsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, string id, bool? synchronized = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        FraudReport POSTCardsIdFraudReportFormat (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        ApiResponse<FraudReport> POSTCardsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Create card token
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>CardToken</returns>
        CardToken POSTCardsIdTokensFormat (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Create card token
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of CardToken</returns>
        ApiResponse<CardToken> POSTCardsIdTokensFormatWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Create or update a card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>CardLinkUrl</returns>
        CardLinkUrl PUTCardsIdLinkFormat (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);

        /// <summary>
        /// Create or update a card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of CardLinkUrl</returns>
        ApiResponse<CardLinkUrl> PUTCardsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETECardsIdLinkFormatAsync (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Delete card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETECardsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Get saved cards
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> GETCardsFormatAsync (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null);

        /// <summary>
        /// Get saved cards
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> GETCardsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null);
        /// <summary>
        /// Get saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> GETCardsIdFormatAsync (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Get saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> GETCardsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of CardOperation</returns>
        System.Threading.Tasks.Task<CardOperation> GETCardsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? operationId, string id);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (CardOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardOperation>> GETCardsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? operationId, string id);
        /// <summary>
        /// Update saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> PATCHCardsIdFormatAsync (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> PATCHCardsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null);
        /// <summary>
        /// Create saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> POSTCardsFormatAsync (string acceptVersion, string authorization, Dictionary<string, string> variables = null);

        /// <summary>
        /// Create saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, Dictionary<string, string> variables = null);
        /// <summary>
        /// Authorize saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> POSTCardsIdAuthorizeFormatAsync (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Authorize saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Cancel saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        System.Threading.Tasks.Task<Card> POSTCardsIdCancelFormatAsync (string acceptVersion, string authorization, string id, bool? synchronized = null);

        /// <summary>
        /// Cancel saved card
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, bool? synchronized = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        System.Threading.Tasks.Task<FraudReport> POSTCardsIdFraudReportFormatAsync (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTCardsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Create card token
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of CardToken</returns>
        System.Threading.Tasks.Task<CardToken> POSTCardsIdTokensFormatAsync (string acceptVersion, string authorization, string id);

        /// <summary>
        /// Create card token
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (CardToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardToken>> POSTCardsIdTokensFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id);
        /// <summary>
        /// Create or update a card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of CardLinkUrl</returns>
        System.Threading.Tasks.Task<CardLinkUrl> PUTCardsIdLinkFormatAsync (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);

        /// <summary>
        /// Create or update a card link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (CardLinkUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<CardLinkUrl>> PUTCardsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CardsApi : ICardsApi
    {
        private QuickPaySharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CardsApi(String basePath)
        {
            this.Configuration = new QuickPaySharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = QuickPaySharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CardsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CardsApi(QuickPaySharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = QuickPaySharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = QuickPaySharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public QuickPaySharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public QuickPaySharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        public void DELETECardsIdLinkFormat (string acceptVersion, string authorization, string id)
        {
             DELETECardsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETECardsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->DELETECardsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->DELETECardsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->DELETECardsIdLinkFormat");

            var localVarPath = "/cards/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECardsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETECardsIdLinkFormatAsync (string acceptVersion, string authorization, string id)
        {
             await DELETECardsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETECardsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->DELETECardsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->DELETECardsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->DELETECardsIdLinkFormat");

            var localVarPath = "/cards/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECardsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get saved cards  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Card</returns>
        public Card GETCardsFormat (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null)
        {
             ApiResponse<Card> localVarResponse = GETCardsFormatWithHttpInfo(acceptVersion, authorization, timestamp, minTime, maxTime, fraudSuspected, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get saved cards  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > GETCardsFormatWithHttpInfo (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsFormat");

            var localVarPath = "/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Get saved cards  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> GETCardsFormatAsync (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null)
        {
             ApiResponse<Card> localVarResponse = await GETCardsFormatAsyncWithHttpInfo(acceptVersion, authorization, timestamp, minTime, maxTime, fraudSuspected, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get saved cards  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> GETCardsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string timestamp = null, string minTime = null, string maxTime = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsFormat");

            var localVarPath = "/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Get saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Card</returns>
        public Card GETCardsIdFormat (string acceptVersion, string authorization, string id)
        {
             ApiResponse<Card> localVarResponse = GETCardsIdFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > GETCardsIdFormatWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->GETCardsIdFormat");

            var localVarPath = "/cards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Get saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> GETCardsIdFormatAsync (string acceptVersion, string authorization, string id)
        {
             ApiResponse<Card> localVarResponse = await GETCardsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> GETCardsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->GETCardsIdFormat");

            var localVarPath = "/cards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>CardOperation</returns>
        public CardOperation GETCardsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? operationId, string id)
        {
             ApiResponse<CardOperation> localVarResponse = GETCardsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, operationId, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of CardOperation</returns>
        public ApiResponse< CardOperation > GETCardsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? operationId, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");

            var localVarPath = "/cards/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardOperation)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of CardOperation</returns>
        public async System.Threading.Tasks.Task<CardOperation> GETCardsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? operationId, string id)
        {
             ApiResponse<CardOperation> localVarResponse = await GETCardsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, operationId, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (CardOperation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardOperation>> GETCardsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? operationId, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->GETCardsIdOperationsOperationIdFormat");

            var localVarPath = "/cards/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCardsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardOperation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardOperation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardOperation)));
        }

        /// <summary>
        /// Update saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        public Card PATCHCardsIdFormat (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null)
        {
             ApiResponse<Card> localVarResponse = PATCHCardsIdFormatWithHttpInfo(acceptVersion, authorization, id, variables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > PATCHCardsIdFormatWithHttpInfo (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->PATCHCardsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PATCHCardsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->PATCHCardsIdFormat");

            var localVarPath = "/cards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHCardsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Update saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> PATCHCardsIdFormatAsync (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null)
        {
             ApiResponse<Card> localVarResponse = await PATCHCardsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, variables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> PATCHCardsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->PATCHCardsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PATCHCardsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->PATCHCardsIdFormat");

            var localVarPath = "/cards/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHCardsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Create saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Card</returns>
        public Card POSTCardsFormat (string acceptVersion, string authorization, Dictionary<string, string> variables = null)
        {
             ApiResponse<Card> localVarResponse = POSTCardsFormatWithHttpInfo(acceptVersion, authorization, variables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > POSTCardsFormatWithHttpInfo (string acceptVersion, string authorization, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsFormat");

            var localVarPath = "/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Create saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> POSTCardsFormatAsync (string acceptVersion, string authorization, Dictionary<string, string> variables = null)
        {
             ApiResponse<Card> localVarResponse = await POSTCardsFormatAsyncWithHttpInfo(acceptVersion, authorization, variables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsFormat");

            var localVarPath = "/cards";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Authorize saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        public Card POSTCardsIdAuthorizeFormat (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Card> localVarResponse = POSTCardsIdAuthorizeFormatWithHttpInfo(acceptVersion, authorization, cardNumber, cardExpiration, id, synchronized, cardCvd, cardIssuedTo, cardBrand, acquirer, customerIp, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > POSTCardsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'cardNumber' is set
            if (cardNumber == null)
                throw new ApiException(400, "Missing required parameter 'cardNumber' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'cardExpiration' is set
            if (cardExpiration == null)
                throw new ApiException(400, "Missing required parameter 'cardExpiration' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdAuthorizeFormat");

            var localVarPath = "/cards/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Authorize saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> POSTCardsIdAuthorizeFormatAsync (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Card> localVarResponse = await POSTCardsIdAuthorizeFormatAsyncWithHttpInfo(acceptVersion, authorization, cardNumber, cardExpiration, id, synchronized, cardCvd, cardIssuedTo, cardBrand, acquirer, customerIp, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorize saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt; </param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string cardNumber, string cardExpiration, string id, bool? synchronized = null, string cardCvd = null, string cardIssuedTo = null, string cardBrand = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'cardNumber' is set
            if (cardNumber == null)
                throw new ApiException(400, "Missing required parameter 'cardNumber' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'cardExpiration' is set
            if (cardExpiration == null)
                throw new ApiException(400, "Missing required parameter 'cardExpiration' when calling CardsApi->POSTCardsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdAuthorizeFormat");

            var localVarPath = "/cards/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Cancel saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Card</returns>
        public Card POSTCardsIdCancelFormat (string acceptVersion, string authorization, string id, bool? synchronized = null)
        {
             ApiResponse<Card> localVarResponse = POSTCardsIdCancelFormatWithHttpInfo(acceptVersion, authorization, id, synchronized);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Card</returns>
        public ApiResponse< Card > POSTCardsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, string id, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdCancelFormat");

            var localVarPath = "/cards/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Cancel saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Card</returns>
        public async System.Threading.Tasks.Task<Card> POSTCardsIdCancelFormatAsync (string acceptVersion, string authorization, string id, bool? synchronized = null)
        {
             ApiResponse<Card> localVarResponse = await POSTCardsIdCancelFormatAsyncWithHttpInfo(acceptVersion, authorization, id, synchronized);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel saved card  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Card)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Card>> POSTCardsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdCancelFormat");

            var localVarPath = "/cards/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Card>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Card) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Card)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        public FraudReport POSTCardsIdFraudReportFormat (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = POSTCardsIdFraudReportFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        public ApiResponse< FraudReport > POSTCardsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdFraudReportFormat");

            var localVarPath = "/cards/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        public async System.Threading.Tasks.Task<FraudReport> POSTCardsIdFraudReportFormatAsync (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = await POSTCardsIdFraudReportFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTCardsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdFraudReportFormat");

            var localVarPath = "/cards/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Create card token  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>CardToken</returns>
        public CardToken POSTCardsIdTokensFormat (string acceptVersion, string authorization, string id)
        {
             ApiResponse<CardToken> localVarResponse = POSTCardsIdTokensFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create card token  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of CardToken</returns>
        public ApiResponse< CardToken > POSTCardsIdTokensFormatWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdTokensFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdTokensFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdTokensFormat");

            var localVarPath = "/cards/{id}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdTokensFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardToken)));
        }

        /// <summary>
        /// Create card token  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of CardToken</returns>
        public async System.Threading.Tasks.Task<CardToken> POSTCardsIdTokensFormatAsync (string acceptVersion, string authorization, string id)
        {
             ApiResponse<CardToken> localVarResponse = await POSTCardsIdTokensFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create card token  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (CardToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardToken>> POSTCardsIdTokensFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->POSTCardsIdTokensFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->POSTCardsIdTokensFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->POSTCardsIdTokensFormat");

            var localVarPath = "/cards/{id}/tokens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCardsIdTokensFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardToken)));
        }

        /// <summary>
        /// Create or update a card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>CardLinkUrl</returns>
        public CardLinkUrl PUTCardsIdLinkFormat (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
             ApiResponse<CardLinkUrl> localVarResponse = PUTCardsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id, agreementId, language, continueurl, cancelurl, callbackurl, paymentMethods, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, framed, brandingConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of CardLinkUrl</returns>
        public ApiResponse< CardLinkUrl > PUTCardsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->PUTCardsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PUTCardsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->PUTCardsIdLinkFormat");

            var localVarPath = "/cards/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueurl != null) localVarFormParams.Add("continueurl", this.Configuration.ApiClient.ParameterToString(continueurl)); // form parameter
            if (cancelurl != null) localVarFormParams.Add("cancelurl", this.Configuration.ApiClient.ParameterToString(cancelurl)); // form parameter
            if (callbackurl != null) localVarFormParams.Add("callbackurl", this.Configuration.ApiClient.ParameterToString(callbackurl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTCardsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLinkUrl)));
        }

        /// <summary>
        /// Create or update a card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of CardLinkUrl</returns>
        public async System.Threading.Tasks.Task<CardLinkUrl> PUTCardsIdLinkFormatAsync (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
             ApiResponse<CardLinkUrl> localVarResponse = await PUTCardsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id, agreementId, language, continueurl, cancelurl, callbackurl, paymentMethods, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, framed, brandingConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a card link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id"> </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueurl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelurl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackurl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional, default to creditcard)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (CardLinkUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CardLinkUrl>> PUTCardsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string id, int? agreementId = null, string language = null, string continueurl = null, string cancelurl = null, string callbackurl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CardsApi->PUTCardsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CardsApi->PUTCardsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CardsApi->PUTCardsIdLinkFormat");

            var localVarPath = "/cards/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueurl != null) localVarFormParams.Add("continueurl", this.Configuration.ApiClient.ParameterToString(continueurl)); // form parameter
            if (cancelurl != null) localVarFormParams.Add("cancelurl", this.Configuration.ApiClient.ParameterToString(cancelurl)); // form parameter
            if (callbackurl != null) localVarFormParams.Add("callbackurl", this.Configuration.ApiClient.ParameterToString(callbackurl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTCardsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CardLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CardLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CardLinkUrl)));
        }

    }
}
