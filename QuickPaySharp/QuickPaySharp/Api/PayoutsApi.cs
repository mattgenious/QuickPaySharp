/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using QuickPaySharp.Client;
using QuickPaySharp.Model;

namespace QuickPaySharp.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPayoutsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns></returns>
        void DELETEPayoutsIdLinkFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEPayoutsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get payouts
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Payout</returns>
        Payout GETPayoutsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get payouts
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>ApiResponse of Payout</returns>
        ApiResponse<Payout> GETPayoutsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        Payout GETPayoutsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        ApiResponse<Payout> GETPayoutsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        Operation GETPayoutsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> GETPayoutsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Update payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        Payout PATCHPayoutsIdFormat (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        ApiResponse<Payout> PATCHPayoutsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null);
        /// <summary>
        /// Create payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        Payout POSTPayoutsFormat (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null);

        /// <summary>
        /// Create payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        ApiResponse<Payout> POSTPayoutsFormatWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null);
        /// <summary>
        /// Authorize a payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        Payout POSTPayoutsIdCreditFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Authorize a payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        ApiResponse<Payout> POSTPayoutsIdCreditFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create or update a payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        PaymentLinkUrl PUTPayoutsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);

        /// <summary>
        /// Create or update a payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        ApiResponse<PaymentLinkUrl> PUTPayoutsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEPayoutsIdLinkFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEPayoutsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get payouts
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of Payout</returns>
        System.Threading.Tasks.Task<Payout> GETPayoutsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get payouts
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payout>> GETPayoutsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        System.Threading.Tasks.Task<Payout> GETPayoutsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payout>> GETPayoutsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> GETPayoutsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> GETPayoutsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Update payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        System.Threading.Tasks.Task<Payout> PATCHPayoutsIdFormatAsync (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payout>> PATCHPayoutsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null);
        /// <summary>
        /// Create payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        System.Threading.Tasks.Task<Payout> POSTPayoutsFormatAsync (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null);

        /// <summary>
        /// Create payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payout>> POSTPayoutsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null);
        /// <summary>
        /// Authorize a payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        System.Threading.Tasks.Task<Payout> POSTPayoutsIdCreditFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Authorize a payout
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payout>> POSTPayoutsIdCreditFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create or update a payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        System.Threading.Tasks.Task<PaymentLinkUrl> PUTPayoutsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);

        /// <summary>
        /// Create or update a payout link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTPayoutsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PayoutsApi : IPayoutsApi
    {
        private QuickPaySharp.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PayoutsApi(String basePath)
        {
            this.Configuration = new QuickPaySharp.Client.Configuration { BasePath = basePath };

            ExceptionFactory = QuickPaySharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PayoutsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PayoutsApi(QuickPaySharp.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = QuickPaySharp.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = QuickPaySharp.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public QuickPaySharp.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public QuickPaySharp.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns></returns>
        public void DELETEPayoutsIdLinkFormat (string acceptVersion, string authorization, int? id)
        {
             DELETEPayoutsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEPayoutsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");

            var localVarPath = "/payouts/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEPayoutsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEPayoutsIdLinkFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETEPayoutsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEPayoutsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->DELETEPayoutsIdLinkFormat");

            var localVarPath = "/payouts/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEPayoutsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get payouts  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Payout</returns>
        public Payout GETPayoutsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Payout> localVarResponse = GETPayoutsFormatWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payouts  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>ApiResponse of Payout</returns>
        public ApiResponse< Payout > GETPayoutsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsFormat");

            var localVarPath = "/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Get payouts  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of Payout</returns>
        public async System.Threading.Tasks.Task<Payout> GETPayoutsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Payout> localVarResponse = await GETPayoutsFormatAsyncWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payouts  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payouts&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by payout id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payout>> GETPayoutsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsFormat");

            var localVarPath = "/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Get payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        public Payout GETPayoutsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Payout> localVarResponse = GETPayoutsIdFormatWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        public ApiResponse< Payout > GETPayoutsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->GETPayoutsIdFormat");

            var localVarPath = "/payouts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Get payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        public async System.Threading.Tasks.Task<Payout> GETPayoutsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Payout> localVarResponse = await GETPayoutsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payout>> GETPayoutsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->GETPayoutsIdFormat");

            var localVarPath = "/payouts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        public Operation GETPayoutsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = GETPayoutsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        public ApiResponse< Operation > GETPayoutsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");

            var localVarPath = "/payouts/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> GETPayoutsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = await GETPayoutsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operation>> GETPayoutsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PayoutsApi->GETPayoutsIdOperationsOperationIdFormat");

            var localVarPath = "/payouts/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPayoutsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Update payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        public Payout PATCHPayoutsIdFormat (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null)
        {
             ApiResponse<Payout> localVarResponse = PATCHPayoutsIdFormatWithHttpInfo(acceptVersion, authorization, id, variables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        public ApiResponse< Payout > PATCHPayoutsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->PATCHPayoutsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->PATCHPayoutsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->PATCHPayoutsIdFormat");

            var localVarPath = "/payouts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPayoutsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Update payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        public async System.Threading.Tasks.Task<Payout> PATCHPayoutsIdFormatAsync (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null)
        {
             ApiResponse<Payout> localVarResponse = await PATCHPayoutsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, variables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payout>> PATCHPayoutsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->PATCHPayoutsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->PATCHPayoutsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->PATCHPayoutsIdFormat");

            var localVarPath = "/payouts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPayoutsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Create payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        public Payout POSTPayoutsFormat (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
             ApiResponse<Payout> localVarResponse = POSTPayoutsFormatWithHttpInfo(acceptVersion, authorization, currency, orderId, variables, textOnStatement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        public ApiResponse< Payout > POSTPayoutsFormatWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PayoutsApi->POSTPayoutsFormat");

            var localVarPath = "/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPayoutsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Create payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        public async System.Threading.Tasks.Task<Payout> POSTPayoutsFormatAsync (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
             ApiResponse<Payout> localVarResponse = await POSTPayoutsFormatAsyncWithHttpInfo(acceptVersion, authorization, currency, orderId, variables, textOnStatement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payout>> POSTPayoutsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PayoutsApi->POSTPayoutsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PayoutsApi->POSTPayoutsFormat");

            var localVarPath = "/payouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPayoutsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Authorize a payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payout</returns>
        public Payout POSTPayoutsIdCreditFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payout> localVarResponse = POSTPayoutsIdCreditFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, acquirer, customerIp, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize a payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payout</returns>
        public ApiResponse< Payout > POSTPayoutsIdCreditFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PayoutsApi->POSTPayoutsIdCreditFormat");

            var localVarPath = "/payouts/{id}/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPayoutsIdCreditFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Authorize a payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payout</returns>
        public async System.Threading.Tasks.Task<Payout> POSTPayoutsIdCreditFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payout> localVarResponse = await POSTPayoutsIdCreditFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, acquirer, customerIp, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorize a payout  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payout)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payout>> POSTPayoutsIdCreditFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->POSTPayoutsIdCreditFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PayoutsApi->POSTPayoutsIdCreditFormat");

            var localVarPath = "/payouts/{id}/credit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPayoutsIdCreditFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payout>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payout) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payout)));
        }

        /// <summary>
        /// Create or update a payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        public PaymentLinkUrl PUTPayoutsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = PUTPayoutsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, framed, brandingConfig);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        public ApiResponse< PaymentLinkUrl > PUTPayoutsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PayoutsApi->PUTPayoutsIdLinkFormat");

            var localVarPath = "/payouts/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTPayoutsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

        /// <summary>
        /// Create or update a payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        public async System.Threading.Tasks.Task<PaymentLinkUrl> PUTPayoutsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = await PUTPayoutsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, framed, brandingConfig);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a payout link  
        /// </summary>
        /// <exception cref="QuickPaySharp.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payout id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to credit&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after credit&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTPayoutsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, bool? framed = null, Dictionary<string, string> brandingConfig = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PayoutsApi->PUTPayoutsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PayoutsApi->PUTPayoutsIdLinkFormat");

            var localVarPath = "/payouts/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTPayoutsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

    }
}
