/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = QuickPaySharp.Client.SwaggerDateConverter;

namespace QuickPaySharp.Model
{
    /// <summary>
    /// AcquirerSettings
    /// </summary>
    [DataContract]
    public partial class AcquirerSettings :  IEquatable<AcquirerSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirerSettings" /> class.
        /// </summary>
        /// <param name="bambora">Bambora settings.</param>
        /// <param name="clearhaus">Clearhaus settings.</param>
        /// <param name="coinify">Coinify settings.</param>
        /// <param name="elavon">Elavon settings.</param>
        /// <param name="handelsbanken">Handelsbanken settings.</param>
        /// <param name="klarna">Klarna settings.</param>
        /// <param name="klarnapayments">KlarnaPayments settings.</param>
        /// <param name="mobilepay">MobilePay settings.</param>
        /// <param name="mobilepayonline">MobilePayOnline settings.</param>
        /// <param name="mobilepaysubscriptions">MobilePay Subscription settings.</param>
        /// <param name="nets">Nets settings.</param>
        /// <param name="paypal">PayPal settings.</param>
        /// <param name="paysafecard">Paysafecard settings.</param>
        /// <param name="resurs">Resurs settings.</param>
        /// <param name="sofort">Sofort settings.</param>
        /// <param name="swedbank">Swedbank settings.</param>
        /// <param name="swish">Swish settings.</param>
        /// <param name="teller">Teller settings.</param>
        /// <param name="trustly">Trustly settings.</param>
        /// <param name="valitor">Valitor settings.</param>
        /// <param name="viabill">ViaBill settings.</param>
        /// <param name="vipps">Vipps settings.</param>
        public AcquirerSettings(AcquirerSettingsBambora bambora = default(AcquirerSettingsBambora), AcquirerSettingsClearhaus clearhaus = default(AcquirerSettingsClearhaus), AcquirerSettingsCoinify coinify = default(AcquirerSettingsCoinify), AcquirerSettingsElavon elavon = default(AcquirerSettingsElavon), AcquirerSettingsHandelsbanken handelsbanken = default(AcquirerSettingsHandelsbanken), AcquirerSettingsKlarna klarna = default(AcquirerSettingsKlarna), AcquirerSettingsKlarnaPayments klarnapayments = default(AcquirerSettingsKlarnaPayments), AcquirerSettingsMobilePay mobilepay = default(AcquirerSettingsMobilePay), AcquirerSettingsMobilePayOnline mobilepayonline = default(AcquirerSettingsMobilePayOnline), AcquirerSettingsMobilePaySubscriptions mobilepaysubscriptions = default(AcquirerSettingsMobilePaySubscriptions), AcquirerSettingsNets nets = default(AcquirerSettingsNets), AcquirerSettingsPayPal paypal = default(AcquirerSettingsPayPal), AcquirerSettingsPaysafecard paysafecard = default(AcquirerSettingsPaysafecard), AcquirerSettingsResurs resurs = default(AcquirerSettingsResurs), AcquirerSettingsSofort sofort = default(AcquirerSettingsSofort), AcquirerSettingsSwedbank swedbank = default(AcquirerSettingsSwedbank), AcquirerSettingsSwish swish = default(AcquirerSettingsSwish), AcquirerSettingsTeller teller = default(AcquirerSettingsTeller), AcquirerSettingsTrustly trustly = default(AcquirerSettingsTrustly), AcquirerSettingsValitor valitor = default(AcquirerSettingsValitor), AcquirerSettingsViaBill viabill = default(AcquirerSettingsViaBill), AcquirerSettingsVipps vipps = default(AcquirerSettingsVipps))
        {
            this.Bambora = bambora;
            this.Clearhaus = clearhaus;
            this.Coinify = coinify;
            this.Elavon = elavon;
            this.Handelsbanken = handelsbanken;
            this.Klarna = klarna;
            this.Klarnapayments = klarnapayments;
            this.Mobilepay = mobilepay;
            this.Mobilepayonline = mobilepayonline;
            this.Mobilepaysubscriptions = mobilepaysubscriptions;
            this.Nets = nets;
            this.Paypal = paypal;
            this.Paysafecard = paysafecard;
            this.Resurs = resurs;
            this.Sofort = sofort;
            this.Swedbank = swedbank;
            this.Swish = swish;
            this.Teller = teller;
            this.Trustly = trustly;
            this.Valitor = valitor;
            this.Viabill = viabill;
            this.Vipps = vipps;
        }
        
        /// <summary>
        /// Bambora settings
        /// </summary>
        /// <value>Bambora settings</value>
        [DataMember(Name="bambora", EmitDefaultValue=false)]
        public AcquirerSettingsBambora Bambora { get; set; }

        /// <summary>
        /// Clearhaus settings
        /// </summary>
        /// <value>Clearhaus settings</value>
        [DataMember(Name="clearhaus", EmitDefaultValue=false)]
        public AcquirerSettingsClearhaus Clearhaus { get; set; }

        /// <summary>
        /// Coinify settings
        /// </summary>
        /// <value>Coinify settings</value>
        [DataMember(Name="coinify", EmitDefaultValue=false)]
        public AcquirerSettingsCoinify Coinify { get; set; }

        /// <summary>
        /// Elavon settings
        /// </summary>
        /// <value>Elavon settings</value>
        [DataMember(Name="elavon", EmitDefaultValue=false)]
        public AcquirerSettingsElavon Elavon { get; set; }

        /// <summary>
        /// Handelsbanken settings
        /// </summary>
        /// <value>Handelsbanken settings</value>
        [DataMember(Name="handelsbanken", EmitDefaultValue=false)]
        public AcquirerSettingsHandelsbanken Handelsbanken { get; set; }

        /// <summary>
        /// Klarna settings
        /// </summary>
        /// <value>Klarna settings</value>
        [DataMember(Name="klarna", EmitDefaultValue=false)]
        public AcquirerSettingsKlarna Klarna { get; set; }

        /// <summary>
        /// KlarnaPayments settings
        /// </summary>
        /// <value>KlarnaPayments settings</value>
        [DataMember(Name="klarnapayments", EmitDefaultValue=false)]
        public AcquirerSettingsKlarnaPayments Klarnapayments { get; set; }

        /// <summary>
        /// MobilePay settings
        /// </summary>
        /// <value>MobilePay settings</value>
        [DataMember(Name="mobilepay", EmitDefaultValue=false)]
        public AcquirerSettingsMobilePay Mobilepay { get; set; }

        /// <summary>
        /// MobilePayOnline settings
        /// </summary>
        /// <value>MobilePayOnline settings</value>
        [DataMember(Name="mobilepayonline", EmitDefaultValue=false)]
        public AcquirerSettingsMobilePayOnline Mobilepayonline { get; set; }

        /// <summary>
        /// MobilePay Subscription settings
        /// </summary>
        /// <value>MobilePay Subscription settings</value>
        [DataMember(Name="mobilepaysubscriptions", EmitDefaultValue=false)]
        public AcquirerSettingsMobilePaySubscriptions Mobilepaysubscriptions { get; set; }

        /// <summary>
        /// Nets settings
        /// </summary>
        /// <value>Nets settings</value>
        [DataMember(Name="nets", EmitDefaultValue=false)]
        public AcquirerSettingsNets Nets { get; set; }

        /// <summary>
        /// PayPal settings
        /// </summary>
        /// <value>PayPal settings</value>
        [DataMember(Name="paypal", EmitDefaultValue=false)]
        public AcquirerSettingsPayPal Paypal { get; set; }

        /// <summary>
        /// Paysafecard settings
        /// </summary>
        /// <value>Paysafecard settings</value>
        [DataMember(Name="paysafecard", EmitDefaultValue=false)]
        public AcquirerSettingsPaysafecard Paysafecard { get; set; }

        /// <summary>
        /// Resurs settings
        /// </summary>
        /// <value>Resurs settings</value>
        [DataMember(Name="resurs", EmitDefaultValue=false)]
        public AcquirerSettingsResurs Resurs { get; set; }

        /// <summary>
        /// Sofort settings
        /// </summary>
        /// <value>Sofort settings</value>
        [DataMember(Name="sofort", EmitDefaultValue=false)]
        public AcquirerSettingsSofort Sofort { get; set; }

        /// <summary>
        /// Swedbank settings
        /// </summary>
        /// <value>Swedbank settings</value>
        [DataMember(Name="swedbank", EmitDefaultValue=false)]
        public AcquirerSettingsSwedbank Swedbank { get; set; }

        /// <summary>
        /// Swish settings
        /// </summary>
        /// <value>Swish settings</value>
        [DataMember(Name="swish", EmitDefaultValue=false)]
        public AcquirerSettingsSwish Swish { get; set; }

        /// <summary>
        /// Teller settings
        /// </summary>
        /// <value>Teller settings</value>
        [DataMember(Name="teller", EmitDefaultValue=false)]
        public AcquirerSettingsTeller Teller { get; set; }

        /// <summary>
        /// Trustly settings
        /// </summary>
        /// <value>Trustly settings</value>
        [DataMember(Name="trustly", EmitDefaultValue=false)]
        public AcquirerSettingsTrustly Trustly { get; set; }

        /// <summary>
        /// Valitor settings
        /// </summary>
        /// <value>Valitor settings</value>
        [DataMember(Name="valitor", EmitDefaultValue=false)]
        public AcquirerSettingsValitor Valitor { get; set; }

        /// <summary>
        /// ViaBill settings
        /// </summary>
        /// <value>ViaBill settings</value>
        [DataMember(Name="viabill", EmitDefaultValue=false)]
        public AcquirerSettingsViaBill Viabill { get; set; }

        /// <summary>
        /// Vipps settings
        /// </summary>
        /// <value>Vipps settings</value>
        [DataMember(Name="vipps", EmitDefaultValue=false)]
        public AcquirerSettingsVipps Vipps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcquirerSettings {\n");
            sb.Append("  Bambora: ").Append(Bambora).Append("\n");
            sb.Append("  Clearhaus: ").Append(Clearhaus).Append("\n");
            sb.Append("  Coinify: ").Append(Coinify).Append("\n");
            sb.Append("  Elavon: ").Append(Elavon).Append("\n");
            sb.Append("  Handelsbanken: ").Append(Handelsbanken).Append("\n");
            sb.Append("  Klarna: ").Append(Klarna).Append("\n");
            sb.Append("  Klarnapayments: ").Append(Klarnapayments).Append("\n");
            sb.Append("  Mobilepay: ").Append(Mobilepay).Append("\n");
            sb.Append("  Mobilepayonline: ").Append(Mobilepayonline).Append("\n");
            sb.Append("  Mobilepaysubscriptions: ").Append(Mobilepaysubscriptions).Append("\n");
            sb.Append("  Nets: ").Append(Nets).Append("\n");
            sb.Append("  Paypal: ").Append(Paypal).Append("\n");
            sb.Append("  Paysafecard: ").Append(Paysafecard).Append("\n");
            sb.Append("  Resurs: ").Append(Resurs).Append("\n");
            sb.Append("  Sofort: ").Append(Sofort).Append("\n");
            sb.Append("  Swedbank: ").Append(Swedbank).Append("\n");
            sb.Append("  Swish: ").Append(Swish).Append("\n");
            sb.Append("  Teller: ").Append(Teller).Append("\n");
            sb.Append("  Trustly: ").Append(Trustly).Append("\n");
            sb.Append("  Valitor: ").Append(Valitor).Append("\n");
            sb.Append("  Viabill: ").Append(Viabill).Append("\n");
            sb.Append("  Vipps: ").Append(Vipps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcquirerSettings);
        }

        /// <summary>
        /// Returns true if AcquirerSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of AcquirerSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcquirerSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bambora == input.Bambora ||
                    (this.Bambora != null &&
                    this.Bambora.Equals(input.Bambora))
                ) && 
                (
                    this.Clearhaus == input.Clearhaus ||
                    (this.Clearhaus != null &&
                    this.Clearhaus.Equals(input.Clearhaus))
                ) && 
                (
                    this.Coinify == input.Coinify ||
                    (this.Coinify != null &&
                    this.Coinify.Equals(input.Coinify))
                ) && 
                (
                    this.Elavon == input.Elavon ||
                    (this.Elavon != null &&
                    this.Elavon.Equals(input.Elavon))
                ) && 
                (
                    this.Handelsbanken == input.Handelsbanken ||
                    (this.Handelsbanken != null &&
                    this.Handelsbanken.Equals(input.Handelsbanken))
                ) && 
                (
                    this.Klarna == input.Klarna ||
                    (this.Klarna != null &&
                    this.Klarna.Equals(input.Klarna))
                ) && 
                (
                    this.Klarnapayments == input.Klarnapayments ||
                    (this.Klarnapayments != null &&
                    this.Klarnapayments.Equals(input.Klarnapayments))
                ) && 
                (
                    this.Mobilepay == input.Mobilepay ||
                    (this.Mobilepay != null &&
                    this.Mobilepay.Equals(input.Mobilepay))
                ) && 
                (
                    this.Mobilepayonline == input.Mobilepayonline ||
                    (this.Mobilepayonline != null &&
                    this.Mobilepayonline.Equals(input.Mobilepayonline))
                ) && 
                (
                    this.Mobilepaysubscriptions == input.Mobilepaysubscriptions ||
                    (this.Mobilepaysubscriptions != null &&
                    this.Mobilepaysubscriptions.Equals(input.Mobilepaysubscriptions))
                ) && 
                (
                    this.Nets == input.Nets ||
                    (this.Nets != null &&
                    this.Nets.Equals(input.Nets))
                ) && 
                (
                    this.Paypal == input.Paypal ||
                    (this.Paypal != null &&
                    this.Paypal.Equals(input.Paypal))
                ) && 
                (
                    this.Paysafecard == input.Paysafecard ||
                    (this.Paysafecard != null &&
                    this.Paysafecard.Equals(input.Paysafecard))
                ) && 
                (
                    this.Resurs == input.Resurs ||
                    (this.Resurs != null &&
                    this.Resurs.Equals(input.Resurs))
                ) && 
                (
                    this.Sofort == input.Sofort ||
                    (this.Sofort != null &&
                    this.Sofort.Equals(input.Sofort))
                ) && 
                (
                    this.Swedbank == input.Swedbank ||
                    (this.Swedbank != null &&
                    this.Swedbank.Equals(input.Swedbank))
                ) && 
                (
                    this.Swish == input.Swish ||
                    (this.Swish != null &&
                    this.Swish.Equals(input.Swish))
                ) && 
                (
                    this.Teller == input.Teller ||
                    (this.Teller != null &&
                    this.Teller.Equals(input.Teller))
                ) && 
                (
                    this.Trustly == input.Trustly ||
                    (this.Trustly != null &&
                    this.Trustly.Equals(input.Trustly))
                ) && 
                (
                    this.Valitor == input.Valitor ||
                    (this.Valitor != null &&
                    this.Valitor.Equals(input.Valitor))
                ) && 
                (
                    this.Viabill == input.Viabill ||
                    (this.Viabill != null &&
                    this.Viabill.Equals(input.Viabill))
                ) && 
                (
                    this.Vipps == input.Vipps ||
                    (this.Vipps != null &&
                    this.Vipps.Equals(input.Vipps))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bambora != null)
                    hashCode = hashCode * 59 + this.Bambora.GetHashCode();
                if (this.Clearhaus != null)
                    hashCode = hashCode * 59 + this.Clearhaus.GetHashCode();
                if (this.Coinify != null)
                    hashCode = hashCode * 59 + this.Coinify.GetHashCode();
                if (this.Elavon != null)
                    hashCode = hashCode * 59 + this.Elavon.GetHashCode();
                if (this.Handelsbanken != null)
                    hashCode = hashCode * 59 + this.Handelsbanken.GetHashCode();
                if (this.Klarna != null)
                    hashCode = hashCode * 59 + this.Klarna.GetHashCode();
                if (this.Klarnapayments != null)
                    hashCode = hashCode * 59 + this.Klarnapayments.GetHashCode();
                if (this.Mobilepay != null)
                    hashCode = hashCode * 59 + this.Mobilepay.GetHashCode();
                if (this.Mobilepayonline != null)
                    hashCode = hashCode * 59 + this.Mobilepayonline.GetHashCode();
                if (this.Mobilepaysubscriptions != null)
                    hashCode = hashCode * 59 + this.Mobilepaysubscriptions.GetHashCode();
                if (this.Nets != null)
                    hashCode = hashCode * 59 + this.Nets.GetHashCode();
                if (this.Paypal != null)
                    hashCode = hashCode * 59 + this.Paypal.GetHashCode();
                if (this.Paysafecard != null)
                    hashCode = hashCode * 59 + this.Paysafecard.GetHashCode();
                if (this.Resurs != null)
                    hashCode = hashCode * 59 + this.Resurs.GetHashCode();
                if (this.Sofort != null)
                    hashCode = hashCode * 59 + this.Sofort.GetHashCode();
                if (this.Swedbank != null)
                    hashCode = hashCode * 59 + this.Swedbank.GetHashCode();
                if (this.Swish != null)
                    hashCode = hashCode * 59 + this.Swish.GetHashCode();
                if (this.Teller != null)
                    hashCode = hashCode * 59 + this.Teller.GetHashCode();
                if (this.Trustly != null)
                    hashCode = hashCode * 59 + this.Trustly.GetHashCode();
                if (this.Valitor != null)
                    hashCode = hashCode * 59 + this.Valitor.GetHashCode();
                if (this.Viabill != null)
                    hashCode = hashCode * 59 + this.Viabill.GetHashCode();
                if (this.Vipps != null)
                    hashCode = hashCode * 59 + this.Vipps.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
