/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = QuickPaySharp.Client.SwaggerDateConverter;

namespace QuickPaySharp.Model
{
    /// <summary>
    /// AcquirerSettingsClearhaus
    /// </summary>
    [DataContract]
    public partial class AcquirerSettingsClearhaus :  IEquatable<AcquirerSettingsClearhaus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirerSettingsClearhaus" /> class.
        /// </summary>
        /// <param name="active">True if the acquirer is active.</param>
        /// <param name="apiKey">Clearhaus api key.</param>
        /// <param name="applePay">True if Apple Pay is enabled.</param>
        /// <param name="businessCode">Clearhaus business code(mcc).</param>
        /// <param name="mpiMerchantId">MPI Merchant id used for 3D Secure. This field is maintained by QuickPay..</param>
        /// <param name="payout">True if payout is enabled.</param>
        /// <param name="recurring">True if recurring is enabled.</param>
        public AcquirerSettingsClearhaus(bool? active = default(bool?), string apiKey = default(string), bool? applePay = default(bool?), string businessCode = default(string), string mpiMerchantId = default(string), bool? payout = default(bool?), bool? recurring = default(bool?))
        {
            this.Active = active;
            this.ApiKey = apiKey;
            this.ApplePay = applePay;
            this.BusinessCode = businessCode;
            this.MpiMerchantId = mpiMerchantId;
            this.Payout = payout;
            this.Recurring = recurring;
        }
        
        /// <summary>
        /// True if the acquirer is active
        /// </summary>
        /// <value>True if the acquirer is active</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Clearhaus api key
        /// </summary>
        /// <value>Clearhaus api key</value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// True if Apple Pay is enabled
        /// </summary>
        /// <value>True if Apple Pay is enabled</value>
        [DataMember(Name="apple_pay", EmitDefaultValue=false)]
        public bool? ApplePay { get; set; }

        /// <summary>
        /// Clearhaus business code(mcc)
        /// </summary>
        /// <value>Clearhaus business code(mcc)</value>
        [DataMember(Name="business_code", EmitDefaultValue=false)]
        public string BusinessCode { get; set; }

        /// <summary>
        /// MPI Merchant id used for 3D Secure. This field is maintained by QuickPay.
        /// </summary>
        /// <value>MPI Merchant id used for 3D Secure. This field is maintained by QuickPay.</value>
        [DataMember(Name="mpi_merchant_id", EmitDefaultValue=false)]
        public string MpiMerchantId { get; set; }

        /// <summary>
        /// True if payout is enabled
        /// </summary>
        /// <value>True if payout is enabled</value>
        [DataMember(Name="payout", EmitDefaultValue=false)]
        public bool? Payout { get; set; }

        /// <summary>
        /// True if recurring is enabled
        /// </summary>
        /// <value>True if recurring is enabled</value>
        [DataMember(Name="recurring", EmitDefaultValue=false)]
        public bool? Recurring { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcquirerSettingsClearhaus {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  ApplePay: ").Append(ApplePay).Append("\n");
            sb.Append("  BusinessCode: ").Append(BusinessCode).Append("\n");
            sb.Append("  MpiMerchantId: ").Append(MpiMerchantId).Append("\n");
            sb.Append("  Payout: ").Append(Payout).Append("\n");
            sb.Append("  Recurring: ").Append(Recurring).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcquirerSettingsClearhaus);
        }

        /// <summary>
        /// Returns true if AcquirerSettingsClearhaus instances are equal
        /// </summary>
        /// <param name="input">Instance of AcquirerSettingsClearhaus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcquirerSettingsClearhaus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.ApplePay == input.ApplePay ||
                    (this.ApplePay != null &&
                    this.ApplePay.Equals(input.ApplePay))
                ) && 
                (
                    this.BusinessCode == input.BusinessCode ||
                    (this.BusinessCode != null &&
                    this.BusinessCode.Equals(input.BusinessCode))
                ) && 
                (
                    this.MpiMerchantId == input.MpiMerchantId ||
                    (this.MpiMerchantId != null &&
                    this.MpiMerchantId.Equals(input.MpiMerchantId))
                ) && 
                (
                    this.Payout == input.Payout ||
                    (this.Payout != null &&
                    this.Payout.Equals(input.Payout))
                ) && 
                (
                    this.Recurring == input.Recurring ||
                    (this.Recurring != null &&
                    this.Recurring.Equals(input.Recurring))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.ApplePay != null)
                    hashCode = hashCode * 59 + this.ApplePay.GetHashCode();
                if (this.BusinessCode != null)
                    hashCode = hashCode * 59 + this.BusinessCode.GetHashCode();
                if (this.MpiMerchantId != null)
                    hashCode = hashCode * 59 + this.MpiMerchantId.GetHashCode();
                if (this.Payout != null)
                    hashCode = hashCode * 59 + this.Payout.GetHashCode();
                if (this.Recurring != null)
                    hashCode = hashCode * 59 + this.Recurring.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
