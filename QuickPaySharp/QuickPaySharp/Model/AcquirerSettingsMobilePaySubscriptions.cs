/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = QuickPaySharp.Client.SwaggerDateConverter;

namespace QuickPaySharp.Model
{
    /// <summary>
    /// AcquirerSettingsMobilePaySubscriptions
    /// </summary>
    [DataContract]
    public partial class AcquirerSettingsMobilePaySubscriptions :  IEquatable<AcquirerSettingsMobilePaySubscriptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirerSettingsMobilePaySubscriptions" /> class.
        /// </summary>
        /// <param name="active">True if the acquirer is active.</param>
        /// <param name="authState">Identifier MobilePay Subscriptions uses to link requests to callbacks.</param>
        /// <param name="codeVerifier">Verifies received code challenge.</param>
        /// <param name="lastTokenRefresh">Unix-timestamp of last time token was refreshed.</param>
        /// <param name="nonce">Associate client sessions with ID Tokens to mitigate replay attacks.</param>
        /// <param name="pendingStatus">0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed.</param>
        /// <param name="provider">The MobilePay Subscriptions provider / sales-place chosen by the merchant.</param>
        /// <param name="refreshToken">Token to refresh access token for up to 1 year.</param>
        public AcquirerSettingsMobilePaySubscriptions(bool? active = default(bool?), string authState = default(string), string codeVerifier = default(string), int? lastTokenRefresh = default(int?), string nonce = default(string), int? pendingStatus = default(int?), Object provider = default(Object), string refreshToken = default(string))
        {
            this.Active = active;
            this.AuthState = authState;
            this.CodeVerifier = codeVerifier;
            this.LastTokenRefresh = lastTokenRefresh;
            this.Nonce = nonce;
            this.PendingStatus = pendingStatus;
            this.Provider = provider;
            this.RefreshToken = refreshToken;
        }
        
        /// <summary>
        /// True if the acquirer is active
        /// </summary>
        /// <value>True if the acquirer is active</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Identifier MobilePay Subscriptions uses to link requests to callbacks
        /// </summary>
        /// <value>Identifier MobilePay Subscriptions uses to link requests to callbacks</value>
        [DataMember(Name="auth_state", EmitDefaultValue=false)]
        public string AuthState { get; set; }

        /// <summary>
        /// Verifies received code challenge
        /// </summary>
        /// <value>Verifies received code challenge</value>
        [DataMember(Name="code_verifier", EmitDefaultValue=false)]
        public string CodeVerifier { get; set; }

        /// <summary>
        /// Unix-timestamp of last time token was refreshed
        /// </summary>
        /// <value>Unix-timestamp of last time token was refreshed</value>
        [DataMember(Name="last_token_refresh", EmitDefaultValue=false)]
        public int? LastTokenRefresh { get; set; }

        /// <summary>
        /// Associate client sessions with ID Tokens to mitigate replay attacks
        /// </summary>
        /// <value>Associate client sessions with ID Tokens to mitigate replay attacks</value>
        [DataMember(Name="nonce", EmitDefaultValue=false)]
        public string Nonce { get; set; }

        /// <summary>
        /// 0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed
        /// </summary>
        /// <value>0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed</value>
        [DataMember(Name="pending_status", EmitDefaultValue=false)]
        public int? PendingStatus { get; set; }

        /// <summary>
        /// The MobilePay Subscriptions provider / sales-place chosen by the merchant
        /// </summary>
        /// <value>The MobilePay Subscriptions provider / sales-place chosen by the merchant</value>
        [DataMember(Name="provider", EmitDefaultValue=false)]
        public Object Provider { get; set; }

        /// <summary>
        /// Token to refresh access token for up to 1 year
        /// </summary>
        /// <value>Token to refresh access token for up to 1 year</value>
        [DataMember(Name="refresh_token", EmitDefaultValue=false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcquirerSettingsMobilePaySubscriptions {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AuthState: ").Append(AuthState).Append("\n");
            sb.Append("  CodeVerifier: ").Append(CodeVerifier).Append("\n");
            sb.Append("  LastTokenRefresh: ").Append(LastTokenRefresh).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  PendingStatus: ").Append(PendingStatus).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcquirerSettingsMobilePaySubscriptions);
        }

        /// <summary>
        /// Returns true if AcquirerSettingsMobilePaySubscriptions instances are equal
        /// </summary>
        /// <param name="input">Instance of AcquirerSettingsMobilePaySubscriptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcquirerSettingsMobilePaySubscriptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AuthState == input.AuthState ||
                    (this.AuthState != null &&
                    this.AuthState.Equals(input.AuthState))
                ) && 
                (
                    this.CodeVerifier == input.CodeVerifier ||
                    (this.CodeVerifier != null &&
                    this.CodeVerifier.Equals(input.CodeVerifier))
                ) && 
                (
                    this.LastTokenRefresh == input.LastTokenRefresh ||
                    (this.LastTokenRefresh != null &&
                    this.LastTokenRefresh.Equals(input.LastTokenRefresh))
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                ) && 
                (
                    this.PendingStatus == input.PendingStatus ||
                    (this.PendingStatus != null &&
                    this.PendingStatus.Equals(input.PendingStatus))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AuthState != null)
                    hashCode = hashCode * 59 + this.AuthState.GetHashCode();
                if (this.CodeVerifier != null)
                    hashCode = hashCode * 59 + this.CodeVerifier.GetHashCode();
                if (this.LastTokenRefresh != null)
                    hashCode = hashCode * 59 + this.LastTokenRefresh.GetHashCode();
                if (this.Nonce != null)
                    hashCode = hashCode * 59 + this.Nonce.GetHashCode();
                if (this.PendingStatus != null)
                    hashCode = hashCode * 59 + this.PendingStatus.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
