/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = QuickPaySharp.Client.SwaggerDateConverter;

namespace QuickPaySharp.Model
{
    /// <summary>
    /// AgreementUser
    /// </summary>
    [DataContract]
    public partial class AgreementUser :  IEquatable<AgreementUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementUser" /> class.
        /// </summary>
        /// <param name="email">Email of user.</param>
        /// <param name="id">Id of user.</param>
        /// <param name="name">Name of user. Will be hidden until user has accepted agreement..</param>
        /// <param name="systemUser">If true, this user should only be used for api-access and services. Not to log into manager.</param>
        public AgreementUser(string email = default(string), int? id = default(int?), string name = default(string), bool? systemUser = default(bool?))
        {
            this.Email = email;
            this.Id = id;
            this.Name = name;
            this.SystemUser = systemUser;
        }
        
        /// <summary>
        /// Email of user
        /// </summary>
        /// <value>Email of user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Id of user
        /// </summary>
        /// <value>Id of user</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name of user. Will be hidden until user has accepted agreement.
        /// </summary>
        /// <value>Name of user. Will be hidden until user has accepted agreement.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If true, this user should only be used for api-access and services. Not to log into manager
        /// </summary>
        /// <value>If true, this user should only be used for api-access and services. Not to log into manager</value>
        [DataMember(Name="system_user", EmitDefaultValue=false)]
        public bool? SystemUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AgreementUser {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SystemUser: ").Append(SystemUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgreementUser);
        }

        /// <summary>
        /// Returns true if AgreementUser instances are equal
        /// </summary>
        /// <param name="input">Instance of AgreementUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgreementUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SystemUser == input.SystemUser ||
                    (this.SystemUser != null &&
                    this.SystemUser.Equals(input.SystemUser))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SystemUser != null)
                    hashCode = hashCode * 59 + this.SystemUser.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
