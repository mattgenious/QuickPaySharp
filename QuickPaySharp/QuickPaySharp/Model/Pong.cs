/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = QuickPaySharp.Client.SwaggerDateConverter;

namespace QuickPaySharp.Model
{
    /// <summary>
    /// Pong
    /// </summary>
    [DataContract]
    public partial class Pong :  IEquatable<Pong>, IValidatableObject
    {
        /// <summary>
        /// API scope
        /// </summary>
        /// <value>API scope</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum Anonymous for value: anonymous
            /// </summary>
            [EnumMember(Value = "anonymous")]
            Anonymous = 1,
            
            /// <summary>
            /// Enum User for value: user
            /// </summary>
            [EnumMember(Value = "user")]
            User = 2,
            
            /// <summary>
            /// Enum Merchant for value: merchant
            /// </summary>
            [EnumMember(Value = "merchant")]
            Merchant = 3,
            
            /// <summary>
            /// Enum Reseller for value: reseller
            /// </summary>
            [EnumMember(Value = "reseller")]
            Reseller = 4
        }

        /// <summary>
        /// API scope
        /// </summary>
        /// <value>API scope</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Pong" /> class.
        /// </summary>
        /// <param name="msg">Friendly message.</param>
        /// <param name="_params">Echo params send in the request.</param>
        /// <param name="scope">API scope.</param>
        /// <param name="version">The version (&#39;v10&#39;).</param>
        public Pong(string msg = default(string), Dictionary<string, string> _params = default(Dictionary<string, string>), ScopeEnum? scope = default(ScopeEnum?), string version = default(string))
        {
            this.Msg = msg;
            this.Params = _params;
            this.Scope = scope;
            this.Version = version;
        }
        
        /// <summary>
        /// Friendly message
        /// </summary>
        /// <value>Friendly message</value>
        [DataMember(Name="msg", EmitDefaultValue=false)]
        public string Msg { get; set; }

        /// <summary>
        /// Echo params send in the request
        /// </summary>
        /// <value>Echo params send in the request</value>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public Dictionary<string, string> Params { get; set; }


        /// <summary>
        /// The version (&#39;v10&#39;)
        /// </summary>
        /// <value>The version (&#39;v10&#39;)</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pong {\n");
            sb.Append("  Msg: ").Append(Msg).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pong);
        }

        /// <summary>
        /// Returns true if Pong instances are equal
        /// </summary>
        /// <param name="input">Instance of Pong to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pong input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Msg == input.Msg ||
                    (this.Msg != null &&
                    this.Msg.Equals(input.Msg))
                ) && 
                (
                    this.Params == input.Params ||
                    this.Params != null &&
                    this.Params.SequenceEqual(input.Params)
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Msg != null)
                    hashCode = hashCode * 59 + this.Msg.GetHashCode();
                if (this.Params != null)
                    hashCode = hashCode * 59 + this.Params.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
