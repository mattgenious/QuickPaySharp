/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AccountApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AccountApiTests
    {
        private AccountApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AccountApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AccountApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AccountApi
            //Assert.IsInstanceOfType(typeof(AccountApi), instance, "instance is a AccountApi");
        }

        
        /// <summary>
        /// Test DELETEAccount04PlatformFormat
        /// </summary>
        [Test]
        public void DELETEAccount04PlatformFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //var response = instance.DELETEAccount04PlatformFormat(acceptVersion, authorization);
            //Assert.IsInstanceOf<Zero4PlatformSettings> (response, "response is Zero4PlatformSettings");
        }
        
        /// <summary>
        /// Test DELETEAccountFormat
        /// </summary>
        [Test]
        public void DELETEAccountFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //instance.DELETEAccountFormat(acceptVersion, authorization);
            
        }
        
        /// <summary>
        /// Test DELETEAccountLogoFormat
        /// </summary>
        [Test]
        public void DELETEAccountLogoFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string logoType = null;
            //instance.DELETEAccountLogoFormat(acceptVersion, authorization, logoType);
            
        }
        
        /// <summary>
        /// Test GETAccount04PlatformFormat
        /// </summary>
        [Test]
        public void GETAccount04PlatformFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //var response = instance.GETAccount04PlatformFormat(acceptVersion, authorization);
            //Assert.IsInstanceOf<Zero4PlatformSettings> (response, "response is Zero4PlatformSettings");
        }
        
        /// <summary>
        /// Test GETAccountFormat
        /// </summary>
        [Test]
        public void GETAccountFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //var response = instance.GETAccountFormat(acceptVersion, authorization);
            //Assert.IsInstanceOf<Merchant> (response, "response is Merchant");
        }
        
        /// <summary>
        /// Test GETAccountLogoFormat
        /// </summary>
        [Test]
        public void GETAccountLogoFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string logoType = null;
            //instance.GETAccountLogoFormat(acceptVersion, authorization, logoType);
            
        }
        
        /// <summary>
        /// Test GETAccountPrivateKeyFormat
        /// </summary>
        [Test]
        public void GETAccountPrivateKeyFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //var response = instance.GETAccountPrivateKeyFormat(acceptVersion, authorization);
            //Assert.IsInstanceOf<PrivateKey> (response, "response is PrivateKey");
        }
        
        /// <summary>
        /// Test PATCHAccountFormat
        /// </summary>
        [Test]
        public void PATCHAccountFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string customerAddressName = null;
            //string customerAddressAtt = null;
            //string customerAddressStreet = null;
            //string customerAddressCity = null;
            //string customerAddressZipCode = null;
            //string customerAddressRegion = null;
            //string customerAddressCountryCode = null;
            //string customerAddressVatNo = null;
            //string billingAddressName = null;
            //string billingAddressAtt = null;
            //string billingAddressStreet = null;
            //string billingAddressCity = null;
            //string billingAddressZipCode = null;
            //string billingAddressRegion = null;
            //string billingAddressCountryCode = null;
            //string billingAddressVatNo = null;
            //string callbackUrl = null;
            //bool? acquirerSettingsBamboraActive = null;
            //string acquirerSettingsBamboraIdentificationCode = null;
            //string acquirerSettingsBamboraIdentificationCodeInt = null;
            //string acquirerSettingsBamboraBusinessCode = null;
            //bool? acquirerSettingsBamboraRecurring = null;
            //bool? acquirerSettingsBamboraAmericanexpress = null;
            //bool? acquirerSettingsBamboraDinersclub = null;
            //bool? acquirerSettingsBamboraSecurepay = null;
            //string acquirerSettingsBamboraVisaMpiMerchantId = null;
            //string acquirerSettingsBamboraMastercardMpiMerchantId = null;
            //string acquirerSettingsBamboraVisaBin = null;
            //string acquirerSettingsBamboraMastercardBin = null;
            //bool? acquirerSettingsClearhausActive = null;
            //string acquirerSettingsClearhausApiKey = null;
            //bool? acquirerSettingsClearhausRecurring = null;
            //bool? acquirerSettingsClearhausPayout = null;
            //bool? acquirerSettingsClearhausApplePay = null;
            //bool? acquirerSettingsElavonActive = null;
            //string acquirerSettingsElavonIdentificationCode = null;
            //string acquirerSettingsElavonIdentificationCodeInt = null;
            //string acquirerSettingsElavonBusinessCode = null;
            //bool? acquirerSettingsElavonRecurring = null;
            //bool? acquirerSettingsElavonAmericanexpress = null;
            //bool? acquirerSettingsElavonDinersclub = null;
            //bool? acquirerSettingsElavonSecurepay = null;
            //string acquirerSettingsElavonVisaMpiMerchantId = null;
            //string acquirerSettingsElavonMastercardMpiMerchantId = null;
            //string acquirerSettingsElavonVisaBin = null;
            //string acquirerSettingsElavonMastercardBin = null;
            //bool? acquirerSettingsHandelsbankenActive = null;
            //string acquirerSettingsHandelsbankenIdentificationCode = null;
            //string acquirerSettingsHandelsbankenIdentificationCodeInt = null;
            //string acquirerSettingsHandelsbankenBusinessCode = null;
            //bool? acquirerSettingsHandelsbankenRecurring = null;
            //bool? acquirerSettingsHandelsbankenAmericanexpress = null;
            //bool? acquirerSettingsHandelsbankenDinersclub = null;
            //bool? acquirerSettingsHandelsbankenSecurepay = null;
            //string acquirerSettingsHandelsbankenVisaMpiMerchantId = null;
            //string acquirerSettingsHandelsbankenMastercardMpiMerchantId = null;
            //string acquirerSettingsHandelsbankenVisaBin = null;
            //string acquirerSettingsHandelsbankenMastercardBin = null;
            //bool? acquirerSettingsKlarnaActive = null;
            //int? acquirerSettingsKlarnaEid = null;
            //string acquirerSettingsKlarnaSharedSecret = null;
            //bool? acquirerSettingsMobilepayActive = null;
            //string acquirerSettingsMobilepayDeliveryLimitedTo = null;
            //bool? acquirerSettingsMobilepaysubscriptionsActive = null;
            //string acquirerSettingsMobilepaysubscriptionsAuthState = null;
            //string acquirerSettingsMobilepaysubscriptionsCodeVerifier = null;
            //int? acquirerSettingsMobilepaysubscriptionsLastTokenRefresh = null;
            //string acquirerSettingsMobilepaysubscriptionsNonce = null;
            //int? acquirerSettingsMobilepaysubscriptionsPendingStatus = null;
            //string acquirerSettingsMobilepaysubscriptionsProvider = null;
            //string acquirerSettingsMobilepaysubscriptionsRefreshToken = null;
            //bool? acquirerSettingsNetsActive = null;
            //string acquirerSettingsNetsIdentificationCode = null;
            //string acquirerSettingsNetsBusinessCode = null;
            //bool? acquirerSettingsNetsRecurring = null;
            //bool? acquirerSettingsNetsFbg1886 = null;
            //bool? acquirerSettingsNetsSecuredByNets = null;
            //string acquirerSettingsNetsIdentificationCodeInt = null;
            //bool? acquirerSettingsNetsAmericanexpress = null;
            //bool? acquirerSettingsNetsDinersclub = null;
            //bool? acquirerSettingsNetsSecurepay = null;
            //string acquirerSettingsNetsVisaBin = null;
            //string acquirerSettingsNetsMastercardBin = null;
            //bool? acquirerSettingsPaypalActive = null;
            //bool? acquirerSettingsPaypalRecurring = null;
            //bool? acquirerSettingsPaypalCreditCard = null;
            //string acquirerSettingsPaypalToken = null;
            //string acquirerSettingsPaypalTokenSecret = null;
            //string acquirerSettingsPaypalScope = null;
            //bool? acquirerSettingsSofortActive = null;
            //int? acquirerSettingsSofortCustomerNumber = null;
            //int? acquirerSettingsSofortProjectId = null;
            //string acquirerSettingsSofortApiKey = null;
            //bool? acquirerSettingsSofortGateway = null;
            //bool? acquirerSettingsSofortIdeal = null;
            //int? acquirerSettingsSofortIdealProjectId = null;
            //string acquirerSettingsSofortIdealProjectPassword = null;
            //string acquirerSettingsSofortIdealNotificationPassword = null;
            //bool? acquirerSettingsSwedbankActive = null;
            //string acquirerSettingsSwedbankIdentificationCode = null;
            //string acquirerSettingsSwedbankIdentificationCodeInt = null;
            //string acquirerSettingsSwedbankBusinessCode = null;
            //bool? acquirerSettingsSwedbankRecurring = null;
            //bool? acquirerSettingsSwedbankAmericanexpress = null;
            //bool? acquirerSettingsSwedbankDinersclub = null;
            //bool? acquirerSettingsSwedbankSecurepay = null;
            //string acquirerSettingsSwedbankVisaMpiMerchantId = null;
            //string acquirerSettingsSwedbankMastercardMpiMerchantId = null;
            //string acquirerSettingsSwedbankVisaBin = null;
            //string acquirerSettingsSwedbankMastercardBin = null;
            //bool? acquirerSettingsTellerActive = null;
            //string acquirerSettingsTellerIdentificationCode = null;
            //string acquirerSettingsTellerIdentificationCodeInt = null;
            //string acquirerSettingsTellerBusinessCode = null;
            //bool? acquirerSettingsTellerRecurring = null;
            //bool? acquirerSettingsTellerAmericanexpress = null;
            //bool? acquirerSettingsTellerDinersclub = null;
            //bool? acquirerSettingsTellerSecurepay = null;
            //string acquirerSettingsTellerVisaMpiMerchantId = null;
            //string acquirerSettingsTellerMastercardMpiMerchantId = null;
            //string acquirerSettingsTellerVisaBin = null;
            //string acquirerSettingsTellerMastercardBin = null;
            //bool? acquirerSettingsValitorActive = null;
            //string acquirerSettingsValitorIdentificationCode = null;
            //string acquirerSettingsValitorIdentificationCodeInt = null;
            //string acquirerSettingsValitorBusinessCode = null;
            //bool? acquirerSettingsValitorRecurring = null;
            //bool? acquirerSettingsValitorAmericanexpress = null;
            //bool? acquirerSettingsValitorDinersclub = null;
            //bool? acquirerSettingsValitorSecurepay = null;
            //string acquirerSettingsValitorVisaMpiMerchantId = null;
            //string acquirerSettingsValitorMastercardMpiMerchantId = null;
            //string acquirerSettingsValitorVisaBin = null;
            //string acquirerSettingsValitorMastercardBin = null;
            //bool? acquirerSettingsViabillActive = null;
            //string acquirerSettingsViabillApiKey = null;
            //bool? integrationSettingsEconomicActive = null;
            //string integrationSettingsEconomicAgreement = null;
            //string integrationSettingsEconomicAgreementToken = null;
            //bool? pciSaqA = null;
            //bool? pciSaqAEp = null;
            //bool? pciSaqB = null;
            //bool? pciSaqBIp = null;
            //bool? pciSaqC = null;
            //bool? pciSaqCVt = null;
            //bool? pciSaqDMerchant = null;
            //bool? pciSaqDServiceProvider = null;
            //bool? pciSaqP2peHw = null;
            //bool? autofee = null;
            //string defaultPaymentMethods = null;
            //string shopUrl = null;
            //string shopUrls = null;
            //string contactEmail = null;
            //string shopName = null;
            //string shopsystem = null;
            //string timezone = null;
            //string locale = null;
            //int? defaultBrandingId = null;
            //string loggingStopsAt = null;
            //bool? allowTestTransactions = null;
            //string defaultPaymentLanguage = null;
            //string defaultTextOnStatement = null;
            //string defaultBrandingConfig = null;
            //var response = instance.PATCHAccountFormat(acceptVersion, authorization, customerAddressName, customerAddressAtt, customerAddressStreet, customerAddressCity, customerAddressZipCode, customerAddressRegion, customerAddressCountryCode, customerAddressVatNo, billingAddressName, billingAddressAtt, billingAddressStreet, billingAddressCity, billingAddressZipCode, billingAddressRegion, billingAddressCountryCode, billingAddressVatNo, callbackUrl, acquirerSettingsBamboraActive, acquirerSettingsBamboraIdentificationCode, acquirerSettingsBamboraIdentificationCodeInt, acquirerSettingsBamboraBusinessCode, acquirerSettingsBamboraRecurring, acquirerSettingsBamboraAmericanexpress, acquirerSettingsBamboraDinersclub, acquirerSettingsBamboraSecurepay, acquirerSettingsBamboraVisaMpiMerchantId, acquirerSettingsBamboraMastercardMpiMerchantId, acquirerSettingsBamboraVisaBin, acquirerSettingsBamboraMastercardBin, acquirerSettingsClearhausActive, acquirerSettingsClearhausApiKey, acquirerSettingsClearhausRecurring, acquirerSettingsClearhausPayout, acquirerSettingsClearhausApplePay, acquirerSettingsElavonActive, acquirerSettingsElavonIdentificationCode, acquirerSettingsElavonIdentificationCodeInt, acquirerSettingsElavonBusinessCode, acquirerSettingsElavonRecurring, acquirerSettingsElavonAmericanexpress, acquirerSettingsElavonDinersclub, acquirerSettingsElavonSecurepay, acquirerSettingsElavonVisaMpiMerchantId, acquirerSettingsElavonMastercardMpiMerchantId, acquirerSettingsElavonVisaBin, acquirerSettingsElavonMastercardBin, acquirerSettingsHandelsbankenActive, acquirerSettingsHandelsbankenIdentificationCode, acquirerSettingsHandelsbankenIdentificationCodeInt, acquirerSettingsHandelsbankenBusinessCode, acquirerSettingsHandelsbankenRecurring, acquirerSettingsHandelsbankenAmericanexpress, acquirerSettingsHandelsbankenDinersclub, acquirerSettingsHandelsbankenSecurepay, acquirerSettingsHandelsbankenVisaMpiMerchantId, acquirerSettingsHandelsbankenMastercardMpiMerchantId, acquirerSettingsHandelsbankenVisaBin, acquirerSettingsHandelsbankenMastercardBin, acquirerSettingsKlarnaActive, acquirerSettingsKlarnaEid, acquirerSettingsKlarnaSharedSecret, acquirerSettingsMobilepayActive, acquirerSettingsMobilepayDeliveryLimitedTo, acquirerSettingsMobilepaysubscriptionsActive, acquirerSettingsMobilepaysubscriptionsAuthState, acquirerSettingsMobilepaysubscriptionsCodeVerifier, acquirerSettingsMobilepaysubscriptionsLastTokenRefresh, acquirerSettingsMobilepaysubscriptionsNonce, acquirerSettingsMobilepaysubscriptionsPendingStatus, acquirerSettingsMobilepaysubscriptionsProvider, acquirerSettingsMobilepaysubscriptionsRefreshToken, acquirerSettingsNetsActive, acquirerSettingsNetsIdentificationCode, acquirerSettingsNetsBusinessCode, acquirerSettingsNetsRecurring, acquirerSettingsNetsFbg1886, acquirerSettingsNetsSecuredByNets, acquirerSettingsNetsIdentificationCodeInt, acquirerSettingsNetsAmericanexpress, acquirerSettingsNetsDinersclub, acquirerSettingsNetsSecurepay, acquirerSettingsNetsVisaBin, acquirerSettingsNetsMastercardBin, acquirerSettingsPaypalActive, acquirerSettingsPaypalRecurring, acquirerSettingsPaypalCreditCard, acquirerSettingsPaypalToken, acquirerSettingsPaypalTokenSecret, acquirerSettingsPaypalScope, acquirerSettingsSofortActive, acquirerSettingsSofortCustomerNumber, acquirerSettingsSofortProjectId, acquirerSettingsSofortApiKey, acquirerSettingsSofortGateway, acquirerSettingsSofortIdeal, acquirerSettingsSofortIdealProjectId, acquirerSettingsSofortIdealProjectPassword, acquirerSettingsSofortIdealNotificationPassword, acquirerSettingsSwedbankActive, acquirerSettingsSwedbankIdentificationCode, acquirerSettingsSwedbankIdentificationCodeInt, acquirerSettingsSwedbankBusinessCode, acquirerSettingsSwedbankRecurring, acquirerSettingsSwedbankAmericanexpress, acquirerSettingsSwedbankDinersclub, acquirerSettingsSwedbankSecurepay, acquirerSettingsSwedbankVisaMpiMerchantId, acquirerSettingsSwedbankMastercardMpiMerchantId, acquirerSettingsSwedbankVisaBin, acquirerSettingsSwedbankMastercardBin, acquirerSettingsTellerActive, acquirerSettingsTellerIdentificationCode, acquirerSettingsTellerIdentificationCodeInt, acquirerSettingsTellerBusinessCode, acquirerSettingsTellerRecurring, acquirerSettingsTellerAmericanexpress, acquirerSettingsTellerDinersclub, acquirerSettingsTellerSecurepay, acquirerSettingsTellerVisaMpiMerchantId, acquirerSettingsTellerMastercardMpiMerchantId, acquirerSettingsTellerVisaBin, acquirerSettingsTellerMastercardBin, acquirerSettingsValitorActive, acquirerSettingsValitorIdentificationCode, acquirerSettingsValitorIdentificationCodeInt, acquirerSettingsValitorBusinessCode, acquirerSettingsValitorRecurring, acquirerSettingsValitorAmericanexpress, acquirerSettingsValitorDinersclub, acquirerSettingsValitorSecurepay, acquirerSettingsValitorVisaMpiMerchantId, acquirerSettingsValitorMastercardMpiMerchantId, acquirerSettingsValitorVisaBin, acquirerSettingsValitorMastercardBin, acquirerSettingsViabillActive, acquirerSettingsViabillApiKey, integrationSettingsEconomicActive, integrationSettingsEconomicAgreement, integrationSettingsEconomicAgreementToken, pciSaqA, pciSaqAEp, pciSaqB, pciSaqBIp, pciSaqC, pciSaqCVt, pciSaqDMerchant, pciSaqDServiceProvider, pciSaqP2peHw, autofee, defaultPaymentMethods, shopUrl, shopUrls, contactEmail, shopName, shopsystem, timezone, locale, defaultBrandingId, loggingStopsAt, allowTestTransactions, defaultPaymentLanguage, defaultTextOnStatement, defaultBrandingConfig);
            //Assert.IsInstanceOf<Merchant> (response, "response is Merchant");
        }
        
        /// <summary>
        /// Test PATCHAccountPrivateKeyFormat
        /// </summary>
        [Test]
        public void PATCHAccountPrivateKeyFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //var response = instance.PATCHAccountPrivateKeyFormat(acceptVersion, authorization);
            //Assert.IsInstanceOf<PrivateKey> (response, "response is PrivateKey");
        }
        
        /// <summary>
        /// Test PUTAccountLogoFormat
        /// </summary>
        [Test]
        public void PUTAccountLogoFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string _file = null;
            //string logoType = null;
            //instance.PUTAccountLogoFormat(acceptVersion, authorization, _file, logoType);
            
        }
        
    }

}
