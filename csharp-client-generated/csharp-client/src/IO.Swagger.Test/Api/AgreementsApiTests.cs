/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AgreementsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AgreementsApiTests
    {
        private AgreementsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AgreementsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AgreementsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AgreementsApi
            //Assert.IsInstanceOfType(typeof(AgreementsApi), instance, "instance is a AgreementsApi");
        }

        
        /// <summary>
        /// Test DELETEAgreementsIdFormat
        /// </summary>
        [Test]
        public void DELETEAgreementsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //instance.DELETEAgreementsIdFormat(acceptVersion, authorization, id);
            
        }
        
        /// <summary>
        /// Test GETAgreementsFormat
        /// </summary>
        [Test]
        public void GETAgreementsFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? page = null;
            //int? pageSize = null;
            //string sortBy = null;
            //string sortDir = null;
            //int? pageKey = null;
            //bool? support = null;
            //string service = null;
            //bool? me = null;
            //int? accountId = null;
            //var response = instance.GETAgreementsFormat(acceptVersion, authorization, page, pageSize, sortBy, sortDir, pageKey, support, service, me, accountId);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
        /// <summary>
        /// Test GETAgreementsIdActivityFormat
        /// </summary>
        [Test]
        public void GETAgreementsIdActivityFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //int? page = null;
            //int? pageSize = null;
            //string sortBy = null;
            //string sortDir = null;
            //var response = instance.GETAgreementsIdActivityFormat(acceptVersion, authorization, id, page, pageSize, sortBy, sortDir);
            //Assert.IsInstanceOf<QuickPayProtocolV10Activity> (response, "response is QuickPayProtocolV10Activity");
        }
        
        /// <summary>
        /// Test GETAgreementsIdFormat
        /// </summary>
        [Test]
        public void GETAgreementsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //var response = instance.GETAgreementsIdFormat(acceptVersion, authorization, id);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
        /// <summary>
        /// Test PATCHAgreementsIdApiKeyFormat
        /// </summary>
        [Test]
        public void PATCHAgreementsIdApiKeyFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //var response = instance.PATCHAgreementsIdApiKeyFormat(acceptVersion, authorization, id);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
        /// <summary>
        /// Test PATCHAgreementsIdFormat
        /// </summary>
        [Test]
        public void PATCHAgreementsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //string ipRestrictionAddress = null;
            //bool? owner = null;
            //string description = null;
            //var response = instance.PATCHAgreementsIdFormat(acceptVersion, authorization, id, ipRestrictionAddress, owner, description);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
        /// <summary>
        /// Test POSTAgreementsFormat
        /// </summary>
        [Test]
        public void POSTAgreementsFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string aclPermissionsResource = null;
            //string ipRestrictionAddress = null;
            //string userEmail = null;
            //string systemUser = null;
            //bool? owner = null;
            //string description = null;
            //bool? aclPermissionsGet = null;
            //bool? aclPermissionsPost = null;
            //bool? aclPermissionsPut = null;
            //bool? aclPermissionsDelete = null;
            //bool? aclPermissionsPatch = null;
            //var response = instance.POSTAgreementsFormat(acceptVersion, authorization, aclPermissionsResource, ipRestrictionAddress, userEmail, systemUser, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
        /// <summary>
        /// Test PUTAgreementsIdFormat
        /// </summary>
        [Test]
        public void PUTAgreementsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? id = null;
            //string aclPermissionsResource = null;
            //string ipRestrictionAddress = null;
            //bool? owner = null;
            //string description = null;
            //bool? aclPermissionsGet = null;
            //bool? aclPermissionsPost = null;
            //bool? aclPermissionsPut = null;
            //bool? aclPermissionsDelete = null;
            //bool? aclPermissionsPatch = null;
            //var response = instance.PUTAgreementsIdFormat(acceptVersion, authorization, id, aclPermissionsResource, ipRestrictionAddress, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
            //Assert.IsInstanceOf<QuickPayProtocolV10Agreement> (response, "response is QuickPayProtocolV10Agreement");
        }
        
    }

}
