/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing CardsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class CardsApiTests
    {
        private CardsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new CardsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of CardsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CardsApi
            //Assert.IsInstanceOfType(typeof(CardsApi), instance, "instance is a CardsApi");
        }

        
        /// <summary>
        /// Test DELETECardsIdLinkFormat
        /// </summary>
        [Test]
        public void DELETECardsIdLinkFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //instance.DELETECardsIdLinkFormat(acceptVersion, authorization, id);
            
        }
        
        /// <summary>
        /// Test GETCardsFormat
        /// </summary>
        [Test]
        public void GETCardsFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string timestamp = null;
            //string minTime = null;
            //string maxTime = null;
            //bool? fraudSuspected = null;
            //int? page = null;
            //int? pageSize = null;
            //string sortBy = null;
            //string sortDir = null;
            //int? pageKey = null;
            //var response = instance.GETCardsFormat(acceptVersion, authorization, timestamp, minTime, maxTime, fraudSuspected, page, pageSize, sortBy, sortDir, pageKey);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test GETCardsIdFormat
        /// </summary>
        [Test]
        public void GETCardsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.GETCardsIdFormat(acceptVersion, authorization, id);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test GETCardsIdOperationsOperationIdFormat
        /// </summary>
        [Test]
        public void GETCardsIdOperationsOperationIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //int? operationId = null;
            //string id = null;
            //var response = instance.GETCardsIdOperationsOperationIdFormat(acceptVersion, authorization, operationId, id);
            //Assert.IsInstanceOf<QuickPayProtocolV10CardOperation> (response, "response is QuickPayProtocolV10CardOperation");
        }
        
        /// <summary>
        /// Test PATCHCardsIdFormat
        /// </summary>
        [Test]
        public void PATCHCardsIdFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //Dictionary<string, string> variables = null;
            //var response = instance.PATCHCardsIdFormat(acceptVersion, authorization, id, variables);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test POSTCardsFormat
        /// </summary>
        [Test]
        public void POSTCardsFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //Dictionary<string, string> variables = null;
            //var response = instance.POSTCardsFormat(acceptVersion, authorization, variables);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test POSTCardsIdAuthorizeFormat
        /// </summary>
        [Test]
        public void POSTCardsIdAuthorizeFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string cardNumber = null;
            //string cardExpiration = null;
            //string id = null;
            //bool? synchronized = null;
            //string cardCvd = null;
            //string cardIssuedTo = null;
            //string cardBrand = null;
            //string acquirer = null;
            //string customerIp = null;
            //Dictionary<string, string> extras = null;
            //var response = instance.POSTCardsIdAuthorizeFormat(acceptVersion, authorization, cardNumber, cardExpiration, id, synchronized, cardCvd, cardIssuedTo, cardBrand, acquirer, customerIp, extras);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test POSTCardsIdCancelFormat
        /// </summary>
        [Test]
        public void POSTCardsIdCancelFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //bool? synchronized = null;
            //var response = instance.POSTCardsIdCancelFormat(acceptVersion, authorization, id, synchronized);
            //Assert.IsInstanceOf<QuickPayProtocolV10Card> (response, "response is QuickPayProtocolV10Card");
        }
        
        /// <summary>
        /// Test POSTCardsIdFraudReportFormat
        /// </summary>
        [Test]
        public void POSTCardsIdFraudReportFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //string quickPayCallbackUrl = null;
            //string description = null;
            //var response = instance.POSTCardsIdFraudReportFormat(acceptVersion, authorization, id, quickPayCallbackUrl, description);
            //Assert.IsInstanceOf<QuickPayProtocolV10FraudReport> (response, "response is QuickPayProtocolV10FraudReport");
        }
        
        /// <summary>
        /// Test POSTCardsIdTokensFormat
        /// </summary>
        [Test]
        public void POSTCardsIdTokensFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //var response = instance.POSTCardsIdTokensFormat(acceptVersion, authorization, id);
            //Assert.IsInstanceOf<QuickPayProtocolV10CardToken> (response, "response is QuickPayProtocolV10CardToken");
        }
        
        /// <summary>
        /// Test PUTCardsIdLinkFormat
        /// </summary>
        [Test]
        public void PUTCardsIdLinkFormatTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string acceptVersion = null;
            //string authorization = null;
            //string id = null;
            //int? agreementId = null;
            //string language = null;
            //string continueurl = null;
            //string cancelurl = null;
            //string callbackurl = null;
            //string paymentMethods = null;
            //int? brandingId = null;
            //string googleAnalyticsTrackingId = null;
            //string googleAnalyticsClientId = null;
            //string acquirer = null;
            //bool? framed = null;
            //Dictionary<string, string> brandingConfig = null;
            //var response = instance.PUTCardsIdLinkFormat(acceptVersion, authorization, id, agreementId, language, continueurl, cancelurl, callbackurl, paymentMethods, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, framed, brandingConfig);
            //Assert.IsInstanceOf<QuickPayProtocolV10CardLinkUrl> (response, "response is QuickPayProtocolV10CardLinkUrl");
        }
        
    }

}
