/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using IO.Swagger.Api;
using IO.Swagger.Model;
using IO.Swagger.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing QuickPayProtocolV10Merchant
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the model.
    /// </remarks>
    [TestFixture]
    public class QuickPayProtocolV10MerchantTests
    {
        // TODO uncomment below to declare an instance variable for QuickPayProtocolV10Merchant
        //private QuickPayProtocolV10Merchant instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of QuickPayProtocolV10Merchant
            //instance = new QuickPayProtocolV10Merchant();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of QuickPayProtocolV10Merchant
        /// </summary>
        [Test]
        public void QuickPayProtocolV10MerchantInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" QuickPayProtocolV10Merchant
            //Assert.IsInstanceOfType<QuickPayProtocolV10Merchant> (instance, "variable 'instance' is a QuickPayProtocolV10Merchant");
        }


        /// <summary>
        /// Test the property 'AcquirerSettings'
        /// </summary>
        [Test]
        public void AcquirerSettingsTest()
        {
            // TODO unit test for the property 'AcquirerSettings'
        }
        /// <summary>
        /// Test the property 'AllowTestTransactions'
        /// </summary>
        [Test]
        public void AllowTestTransactionsTest()
        {
            // TODO unit test for the property 'AllowTestTransactions'
        }
        /// <summary>
        /// Test the property 'Autofee'
        /// </summary>
        [Test]
        public void AutofeeTest()
        {
            // TODO unit test for the property 'Autofee'
        }
        /// <summary>
        /// Test the property 'BillingAddress'
        /// </summary>
        [Test]
        public void BillingAddressTest()
        {
            // TODO unit test for the property 'BillingAddress'
        }
        /// <summary>
        /// Test the property 'CallbackUrl'
        /// </summary>
        [Test]
        public void CallbackUrlTest()
        {
            // TODO unit test for the property 'CallbackUrl'
        }
        /// <summary>
        /// Test the property 'ContactEmail'
        /// </summary>
        [Test]
        public void ContactEmailTest()
        {
            // TODO unit test for the property 'ContactEmail'
        }
        /// <summary>
        /// Test the property 'CreatedAt'
        /// </summary>
        [Test]
        public void CreatedAtTest()
        {
            // TODO unit test for the property 'CreatedAt'
        }
        /// <summary>
        /// Test the property 'CustomerAddress'
        /// </summary>
        [Test]
        public void CustomerAddressTest()
        {
            // TODO unit test for the property 'CustomerAddress'
        }
        /// <summary>
        /// Test the property 'DefaultBrandingConfig'
        /// </summary>
        [Test]
        public void DefaultBrandingConfigTest()
        {
            // TODO unit test for the property 'DefaultBrandingConfig'
        }
        /// <summary>
        /// Test the property 'DefaultBrandingId'
        /// </summary>
        [Test]
        public void DefaultBrandingIdTest()
        {
            // TODO unit test for the property 'DefaultBrandingId'
        }
        /// <summary>
        /// Test the property 'DefaultPaymentLanguage'
        /// </summary>
        [Test]
        public void DefaultPaymentLanguageTest()
        {
            // TODO unit test for the property 'DefaultPaymentLanguage'
        }
        /// <summary>
        /// Test the property 'DefaultPaymentMethods'
        /// </summary>
        [Test]
        public void DefaultPaymentMethodsTest()
        {
            // TODO unit test for the property 'DefaultPaymentMethods'
        }
        /// <summary>
        /// Test the property 'DefaultTextOnStatement'
        /// </summary>
        [Test]
        public void DefaultTextOnStatementTest()
        {
            // TODO unit test for the property 'DefaultTextOnStatement'
        }
        /// <summary>
        /// Test the property 'Id'
        /// </summary>
        [Test]
        public void IdTest()
        {
            // TODO unit test for the property 'Id'
        }
        /// <summary>
        /// Test the property 'IntegrationSettings'
        /// </summary>
        [Test]
        public void IntegrationSettingsTest()
        {
            // TODO unit test for the property 'IntegrationSettings'
        }
        /// <summary>
        /// Test the property 'Locale'
        /// </summary>
        [Test]
        public void LocaleTest()
        {
            // TODO unit test for the property 'Locale'
        }
        /// <summary>
        /// Test the property 'LoggingStopsAt'
        /// </summary>
        [Test]
        public void LoggingStopsAtTest()
        {
            // TODO unit test for the property 'LoggingStopsAt'
        }
        /// <summary>
        /// Test the property 'Pci'
        /// </summary>
        [Test]
        public void PciTest()
        {
            // TODO unit test for the property 'Pci'
        }
        /// <summary>
        /// Test the property 'Reseller'
        /// </summary>
        [Test]
        public void ResellerTest()
        {
            // TODO unit test for the property 'Reseller'
        }
        /// <summary>
        /// Test the property 'ShopName'
        /// </summary>
        [Test]
        public void ShopNameTest()
        {
            // TODO unit test for the property 'ShopName'
        }
        /// <summary>
        /// Test the property 'ShopUrl'
        /// </summary>
        [Test]
        public void ShopUrlTest()
        {
            // TODO unit test for the property 'ShopUrl'
        }
        /// <summary>
        /// Test the property 'ShopUrls'
        /// </summary>
        [Test]
        public void ShopUrlsTest()
        {
            // TODO unit test for the property 'ShopUrls'
        }
        /// <summary>
        /// Test the property 'Shopsystem'
        /// </summary>
        [Test]
        public void ShopsystemTest()
        {
            // TODO unit test for the property 'Shopsystem'
        }
        /// <summary>
        /// Test the property 'SuspendedAt'
        /// </summary>
        [Test]
        public void SuspendedAtTest()
        {
            // TODO unit test for the property 'SuspendedAt'
        }
        /// <summary>
        /// Test the property 'Timezone'
        /// </summary>
        [Test]
        public void TimezoneTest()
        {
            // TODO unit test for the property 'Timezone'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
