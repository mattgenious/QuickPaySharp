/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAcquirersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsBambora</returns>
        AcquirerSettingsBambora GETAcquirersBamboraFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsBambora</returns>
        ApiResponse<AcquirerSettingsBambora> GETAcquirersBamboraFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsClearhaus</returns>
        AcquirerSettingsClearhaus GETAcquirersClearhausFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsClearhaus</returns>
        ApiResponse<AcquirerSettingsClearhaus> GETAcquirersClearhausFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsCoinify</returns>
        AcquirerSettingsCoinify GETAcquirersCoinifyFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsCoinify</returns>
        ApiResponse<AcquirerSettingsCoinify> GETAcquirersCoinifyFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsElavon</returns>
        AcquirerSettingsElavon GETAcquirersElavonFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsElavon</returns>
        ApiResponse<AcquirerSettingsElavon> GETAcquirersElavonFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Fetch acquirers
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettings</returns>
        AcquirerSettings GETAcquirersFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Fetch acquirers
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettings</returns>
        ApiResponse<AcquirerSettings> GETAcquirersFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsHandelsbanken</returns>
        AcquirerSettingsHandelsbanken GETAcquirersHandelsbankenFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsHandelsbanken</returns>
        ApiResponse<AcquirerSettingsHandelsbanken> GETAcquirersHandelsbankenFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarna</returns>
        AcquirerSettingsKlarna GETAcquirersKlarnaFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarna</returns>
        ApiResponse<AcquirerSettingsKlarna> GETAcquirersKlarnaFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarnaPayments</returns>
        AcquirerSettingsKlarnaPayments GETAcquirersKlarnapaymentsFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarnaPayments</returns>
        ApiResponse<AcquirerSettingsKlarnaPayments> GETAcquirersKlarnapaymentsFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePay</returns>
        AcquirerSettingsMobilePay GETAcquirersMobilepayFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePay</returns>
        ApiResponse<AcquirerSettingsMobilePay> GETAcquirersMobilepayFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePayOnline</returns>
        AcquirerSettingsMobilePayOnline GETAcquirersMobilepayonlineFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePayOnline</returns>
        ApiResponse<AcquirerSettingsMobilePayOnline> GETAcquirersMobilepayonlineFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePaySubscriptions</returns>
        AcquirerSettingsMobilePaySubscriptions GETAcquirersMobilepaysubscriptionsFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePaySubscriptions</returns>
        ApiResponse<AcquirerSettingsMobilePaySubscriptions> GETAcquirersMobilepaysubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsNets</returns>
        AcquirerSettingsNets GETAcquirersNetsFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsNets</returns>
        ApiResponse<AcquirerSettingsNets> GETAcquirersNetsFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPayPal</returns>
        AcquirerSettingsPayPal GETAcquirersPaypalFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPayPal</returns>
        ApiResponse<AcquirerSettingsPayPal> GETAcquirersPaypalFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPaysafecard</returns>
        AcquirerSettingsPaysafecard GETAcquirersPaysafecardFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPaysafecard</returns>
        ApiResponse<AcquirerSettingsPaysafecard> GETAcquirersPaysafecardFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsResurs</returns>
        AcquirerSettingsResurs GETAcquirersResursFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsResurs</returns>
        ApiResponse<AcquirerSettingsResurs> GETAcquirersResursFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSofort</returns>
        AcquirerSettingsSofort GETAcquirersSofortFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSofort</returns>
        ApiResponse<AcquirerSettingsSofort> GETAcquirersSofortFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSwedbank</returns>
        AcquirerSettingsSwedbank GETAcquirersSwedbankFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSwedbank</returns>
        ApiResponse<AcquirerSettingsSwedbank> GETAcquirersSwedbankFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSwish</returns>
        AcquirerSettingsSwish GETAcquirersSwishFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSwish</returns>
        ApiResponse<AcquirerSettingsSwish> GETAcquirersSwishFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTeller</returns>
        AcquirerSettingsTeller GETAcquirersTellerFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTeller</returns>
        ApiResponse<AcquirerSettingsTeller> GETAcquirersTellerFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTrustly</returns>
        AcquirerSettingsTrustly GETAcquirersTrustlyFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTrustly</returns>
        ApiResponse<AcquirerSettingsTrustly> GETAcquirersTrustlyFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsValitor</returns>
        AcquirerSettingsValitor GETAcquirersValitorFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsValitor</returns>
        ApiResponse<AcquirerSettingsValitor> GETAcquirersValitorFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsViaBill</returns>
        AcquirerSettingsViaBill GETAcquirersViabillFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsViaBill</returns>
        ApiResponse<AcquirerSettingsViaBill> GETAcquirersViabillFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsVipps</returns>
        AcquirerSettingsVipps GETAcquirersVippsFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsVipps</returns>
        ApiResponse<AcquirerSettingsVipps> GETAcquirersVippsFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Update Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsBambora</returns>
        AcquirerSettingsBambora PATCHAcquirersBamboraFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsBambora</returns>
        ApiResponse<AcquirerSettingsBambora> PATCHAcquirersBamboraFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsClearhaus</returns>
        AcquirerSettingsClearhaus PATCHAcquirersClearhausFormat (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null);

        /// <summary>
        /// Update Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsClearhaus</returns>
        ApiResponse<AcquirerSettingsClearhaus> PATCHAcquirersClearhausFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null);
        /// <summary>
        /// Update Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsCoinify</returns>
        AcquirerSettingsCoinify PATCHAcquirersCoinifyFormat (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null);

        /// <summary>
        /// Update Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsCoinify</returns>
        ApiResponse<AcquirerSettingsCoinify> PATCHAcquirersCoinifyFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null);
        /// <summary>
        /// Update Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsElavon</returns>
        AcquirerSettingsElavon PATCHAcquirersElavonFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsElavon</returns>
        ApiResponse<AcquirerSettingsElavon> PATCHAcquirersElavonFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsHandelsbanken</returns>
        AcquirerSettingsHandelsbanken PATCHAcquirersHandelsbankenFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsHandelsbanken</returns>
        ApiResponse<AcquirerSettingsHandelsbanken> PATCHAcquirersHandelsbankenFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarna</returns>
        AcquirerSettingsKlarna PATCHAcquirersKlarnaFormat (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret);

        /// <summary>
        /// Update Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarna</returns>
        ApiResponse<AcquirerSettingsKlarna> PATCHAcquirersKlarnaFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret);
        /// <summary>
        /// Update KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarnaPayments</returns>
        AcquirerSettingsKlarnaPayments PATCHAcquirersKlarnapaymentsFormat (string acceptVersion, string authorization, bool? active, string uid, string password);

        /// <summary>
        /// Update KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarnaPayments</returns>
        ApiResponse<AcquirerSettingsKlarnaPayments> PATCHAcquirersKlarnapaymentsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string uid, string password);
        /// <summary>
        /// Update MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePay</returns>
        AcquirerSettingsMobilePay PATCHAcquirersMobilepayFormat (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null);

        /// <summary>
        /// Update MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePay</returns>
        ApiResponse<AcquirerSettingsMobilePay> PATCHAcquirersMobilepayFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null);
        /// <summary>
        /// Update MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePayOnline</returns>
        AcquirerSettingsMobilePayOnline PATCHAcquirersMobilepayonlineFormat (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null);

        /// <summary>
        /// Update MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePayOnline</returns>
        ApiResponse<AcquirerSettingsMobilePayOnline> PATCHAcquirersMobilepayonlineFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null);
        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePaySubscriptions</returns>
        AcquirerSettingsMobilePaySubscriptions PATCHAcquirersMobilepaysubscriptionsFormat (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null);

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePaySubscriptions</returns>
        ApiResponse<AcquirerSettingsMobilePaySubscriptions> PATCHAcquirersMobilepaysubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null);
        /// <summary>
        /// Update Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsNets</returns>
        AcquirerSettingsNets PATCHAcquirersNetsFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsNets</returns>
        ApiResponse<AcquirerSettingsNets> PATCHAcquirersNetsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsPayPal</returns>
        AcquirerSettingsPayPal PATCHAcquirersPaypalFormat (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null);

        /// <summary>
        /// Update PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsPayPal</returns>
        ApiResponse<AcquirerSettingsPayPal> PATCHAcquirersPaypalFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null);
        /// <summary>
        /// Update Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPaysafecard</returns>
        AcquirerSettingsPaysafecard PATCHAcquirersPaysafecardFormat (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies);

        /// <summary>
        /// Update Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPaysafecard</returns>
        ApiResponse<AcquirerSettingsPaysafecard> PATCHAcquirersPaysafecardFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies);
        /// <summary>
        /// Update Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsResurs</returns>
        AcquirerSettingsResurs PATCHAcquirersResursFormat (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword);

        /// <summary>
        /// Update Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsResurs</returns>
        ApiResponse<AcquirerSettingsResurs> PATCHAcquirersResursFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword);
        /// <summary>
        /// Update Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSofort</returns>
        AcquirerSettingsSofort PATCHAcquirersSofortFormat (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null);

        /// <summary>
        /// Update Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSofort</returns>
        ApiResponse<AcquirerSettingsSofort> PATCHAcquirersSofortFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null);
        /// <summary>
        /// Update Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSwedbank</returns>
        AcquirerSettingsSwedbank PATCHAcquirersSwedbankFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSwedbank</returns>
        ApiResponse<AcquirerSettingsSwedbank> PATCHAcquirersSwedbankFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSwish</returns>
        AcquirerSettingsSwish PATCHAcquirersSwishFormat (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null);

        /// <summary>
        /// Update Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSwish</returns>
        ApiResponse<AcquirerSettingsSwish> PATCHAcquirersSwishFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null);
        /// <summary>
        /// Update Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsTeller</returns>
        AcquirerSettingsTeller PATCHAcquirersTellerFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsTeller</returns>
        ApiResponse<AcquirerSettingsTeller> PATCHAcquirersTellerFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTrustly</returns>
        AcquirerSettingsTrustly PATCHAcquirersTrustlyFormat (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password);

        /// <summary>
        /// Update Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTrustly</returns>
        ApiResponse<AcquirerSettingsTrustly> PATCHAcquirersTrustlyFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password);
        /// <summary>
        /// Update Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsValitor</returns>
        AcquirerSettingsValitor PATCHAcquirersValitorFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsValitor</returns>
        ApiResponse<AcquirerSettingsValitor> PATCHAcquirersValitorFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsViaBill</returns>
        AcquirerSettingsViaBill PATCHAcquirersViabillFormat (string acceptVersion, string authorization, bool? active, string apiKey);

        /// <summary>
        /// Update ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsViaBill</returns>
        ApiResponse<AcquirerSettingsViaBill> PATCHAcquirersViabillFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey);
        /// <summary>
        /// Update Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsVipps</returns>
        AcquirerSettingsVipps PATCHAcquirersVippsFormat (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null);

        /// <summary>
        /// Update Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsVipps</returns>
        ApiResponse<AcquirerSettingsVipps> PATCHAcquirersVippsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null);
        /// <summary>
        /// Test payments via acquirer
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>AcquirerTest</returns>
        AcquirerTest POSTAcquirersAcquirerTestFormat (string acceptVersion, string authorization, string acquirer);

        /// <summary>
        /// Test payments via acquirer
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerTest</returns>
        ApiResponse<AcquirerTest> POSTAcquirersAcquirerTestFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsBambora</returns>
        System.Threading.Tasks.Task<AcquirerSettingsBambora> GETAcquirersBamboraFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsBambora)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsBambora>> GETAcquirersBamboraFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsClearhaus</returns>
        System.Threading.Tasks.Task<AcquirerSettingsClearhaus> GETAcquirersClearhausFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsClearhaus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsClearhaus>> GETAcquirersClearhausFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsCoinify</returns>
        System.Threading.Tasks.Task<AcquirerSettingsCoinify> GETAcquirersCoinifyFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsCoinify)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsCoinify>> GETAcquirersCoinifyFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsElavon</returns>
        System.Threading.Tasks.Task<AcquirerSettingsElavon> GETAcquirersElavonFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsElavon)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsElavon>> GETAcquirersElavonFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Fetch acquirers
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettings</returns>
        System.Threading.Tasks.Task<AcquirerSettings> GETAcquirersFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Fetch acquirers
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettings>> GETAcquirersFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsHandelsbanken</returns>
        System.Threading.Tasks.Task<AcquirerSettingsHandelsbanken> GETAcquirersHandelsbankenFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsHandelsbanken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsHandelsbanken>> GETAcquirersHandelsbankenFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarna</returns>
        System.Threading.Tasks.Task<AcquirerSettingsKlarna> GETAcquirersKlarnaFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarna)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarna>> GETAcquirersKlarnaFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarnaPayments</returns>
        System.Threading.Tasks.Task<AcquirerSettingsKlarnaPayments> GETAcquirersKlarnapaymentsFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarnaPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarnaPayments>> GETAcquirersKlarnapaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePay</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePay> GETAcquirersMobilepayFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePay)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePay>> GETAcquirersMobilepayFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePayOnline</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePayOnline> GETAcquirersMobilepayonlineFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePayOnline)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePayOnline>> GETAcquirersMobilepayonlineFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePaySubscriptions</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePaySubscriptions> GETAcquirersMobilepaysubscriptionsFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePaySubscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePaySubscriptions>> GETAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsNets</returns>
        System.Threading.Tasks.Task<AcquirerSettingsNets> GETAcquirersNetsFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsNets)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsNets>> GETAcquirersNetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPayPal</returns>
        System.Threading.Tasks.Task<AcquirerSettingsPayPal> GETAcquirersPaypalFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPayPal)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPayPal>> GETAcquirersPaypalFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPaysafecard</returns>
        System.Threading.Tasks.Task<AcquirerSettingsPaysafecard> GETAcquirersPaysafecardFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPaysafecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPaysafecard>> GETAcquirersPaysafecardFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsResurs</returns>
        System.Threading.Tasks.Task<AcquirerSettingsResurs> GETAcquirersResursFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsResurs)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsResurs>> GETAcquirersResursFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSofort</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSofort> GETAcquirersSofortFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSofort)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSofort>> GETAcquirersSofortFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSwedbank</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSwedbank> GETAcquirersSwedbankFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwedbank)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwedbank>> GETAcquirersSwedbankFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSwish</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSwish> GETAcquirersSwishFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwish)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwish>> GETAcquirersSwishFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTeller</returns>
        System.Threading.Tasks.Task<AcquirerSettingsTeller> GETAcquirersTellerFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTeller)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTeller>> GETAcquirersTellerFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTrustly</returns>
        System.Threading.Tasks.Task<AcquirerSettingsTrustly> GETAcquirersTrustlyFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTrustly)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTrustly>> GETAcquirersTrustlyFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsValitor</returns>
        System.Threading.Tasks.Task<AcquirerSettingsValitor> GETAcquirersValitorFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsValitor)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsValitor>> GETAcquirersValitorFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsViaBill</returns>
        System.Threading.Tasks.Task<AcquirerSettingsViaBill> GETAcquirersViabillFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsViaBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsViaBill>> GETAcquirersViabillFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsVipps</returns>
        System.Threading.Tasks.Task<AcquirerSettingsVipps> GETAcquirersVippsFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsVipps)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsVipps>> GETAcquirersVippsFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Update Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsBambora</returns>
        System.Threading.Tasks.Task<AcquirerSettingsBambora> PATCHAcquirersBamboraFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Bambora acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsBambora)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsBambora>> PATCHAcquirersBamboraFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsClearhaus</returns>
        System.Threading.Tasks.Task<AcquirerSettingsClearhaus> PATCHAcquirersClearhausFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null);

        /// <summary>
        /// Update Clearhaus acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsClearhaus)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsClearhaus>> PATCHAcquirersClearhausFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null);
        /// <summary>
        /// Update Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsCoinify</returns>
        System.Threading.Tasks.Task<AcquirerSettingsCoinify> PATCHAcquirersCoinifyFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null);

        /// <summary>
        /// Update Coinify acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsCoinify)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsCoinify>> PATCHAcquirersCoinifyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null);
        /// <summary>
        /// Update Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsElavon</returns>
        System.Threading.Tasks.Task<AcquirerSettingsElavon> PATCHAcquirersElavonFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Elavon acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsElavon)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsElavon>> PATCHAcquirersElavonFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsHandelsbanken</returns>
        System.Threading.Tasks.Task<AcquirerSettingsHandelsbanken> PATCHAcquirersHandelsbankenFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Handelsbanken acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsHandelsbanken)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsHandelsbanken>> PATCHAcquirersHandelsbankenFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarna</returns>
        System.Threading.Tasks.Task<AcquirerSettingsKlarna> PATCHAcquirersKlarnaFormatAsync (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret);

        /// <summary>
        /// Update Klarna acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarna)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarna>> PATCHAcquirersKlarnaFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret);
        /// <summary>
        /// Update KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarnaPayments</returns>
        System.Threading.Tasks.Task<AcquirerSettingsKlarnaPayments> PATCHAcquirersKlarnapaymentsFormatAsync (string acceptVersion, string authorization, bool? active, string uid, string password);

        /// <summary>
        /// Update KlarnaPayments acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarnaPayments)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarnaPayments>> PATCHAcquirersKlarnapaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string uid, string password);
        /// <summary>
        /// Update MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePay</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePay> PATCHAcquirersMobilepayFormatAsync (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null);

        /// <summary>
        /// Update MobilePay acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePay)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePay>> PATCHAcquirersMobilepayFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null);
        /// <summary>
        /// Update MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePayOnline</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePayOnline> PATCHAcquirersMobilepayonlineFormatAsync (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null);

        /// <summary>
        /// Update MobilePayOnline acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePayOnline)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePayOnline>> PATCHAcquirersMobilepayonlineFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null);
        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePaySubscriptions</returns>
        System.Threading.Tasks.Task<AcquirerSettingsMobilePaySubscriptions> PATCHAcquirersMobilepaysubscriptionsFormatAsync (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null);

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePaySubscriptions)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePaySubscriptions>> PATCHAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null);
        /// <summary>
        /// Update Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsNets</returns>
        System.Threading.Tasks.Task<AcquirerSettingsNets> PATCHAcquirersNetsFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Nets acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsNets)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsNets>> PATCHAcquirersNetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsPayPal</returns>
        System.Threading.Tasks.Task<AcquirerSettingsPayPal> PATCHAcquirersPaypalFormatAsync (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null);

        /// <summary>
        /// Update PayPal acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPayPal)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPayPal>> PATCHAcquirersPaypalFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null);
        /// <summary>
        /// Update Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPaysafecard</returns>
        System.Threading.Tasks.Task<AcquirerSettingsPaysafecard> PATCHAcquirersPaysafecardFormatAsync (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies);

        /// <summary>
        /// Update Paysafecard acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPaysafecard)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPaysafecard>> PATCHAcquirersPaysafecardFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies);
        /// <summary>
        /// Update Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsResurs</returns>
        System.Threading.Tasks.Task<AcquirerSettingsResurs> PATCHAcquirersResursFormatAsync (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword);

        /// <summary>
        /// Update Resurs acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsResurs)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsResurs>> PATCHAcquirersResursFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword);
        /// <summary>
        /// Update Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSofort</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSofort> PATCHAcquirersSofortFormatAsync (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null);

        /// <summary>
        /// Update Sofort acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSofort)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSofort>> PATCHAcquirersSofortFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null);
        /// <summary>
        /// Update Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSwedbank</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSwedbank> PATCHAcquirersSwedbankFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Swedbank acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwedbank)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwedbank>> PATCHAcquirersSwedbankFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSwish</returns>
        System.Threading.Tasks.Task<AcquirerSettingsSwish> PATCHAcquirersSwishFormatAsync (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null);

        /// <summary>
        /// Update Swish acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwish)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwish>> PATCHAcquirersSwishFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null);
        /// <summary>
        /// Update Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsTeller</returns>
        System.Threading.Tasks.Task<AcquirerSettingsTeller> PATCHAcquirersTellerFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Teller acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTeller)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTeller>> PATCHAcquirersTellerFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTrustly</returns>
        System.Threading.Tasks.Task<AcquirerSettingsTrustly> PATCHAcquirersTrustlyFormatAsync (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password);

        /// <summary>
        /// Update Trustly acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTrustly)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTrustly>> PATCHAcquirersTrustlyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password);
        /// <summary>
        /// Update Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsValitor</returns>
        System.Threading.Tasks.Task<AcquirerSettingsValitor> PATCHAcquirersValitorFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);

        /// <summary>
        /// Update Valitor acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsValitor)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsValitor>> PATCHAcquirersValitorFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null);
        /// <summary>
        /// Update ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsViaBill</returns>
        System.Threading.Tasks.Task<AcquirerSettingsViaBill> PATCHAcquirersViabillFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey);

        /// <summary>
        /// Update ViaBill acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsViaBill)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsViaBill>> PATCHAcquirersViabillFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey);
        /// <summary>
        /// Update Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsVipps</returns>
        System.Threading.Tasks.Task<AcquirerSettingsVipps> PATCHAcquirersVippsFormatAsync (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null);

        /// <summary>
        /// Update Vipps acquirer settings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsVipps)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsVipps>> PATCHAcquirersVippsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null);
        /// <summary>
        /// Test payments via acquirer
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>Task of AcquirerTest</returns>
        System.Threading.Tasks.Task<AcquirerTest> POSTAcquirersAcquirerTestFormatAsync (string acceptVersion, string authorization, string acquirer);

        /// <summary>
        /// Test payments via acquirer
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerTest)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcquirerTest>> POSTAcquirersAcquirerTestFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AcquirersApi : IAcquirersApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AcquirersApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AcquirersApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsBambora</returns>
        public AcquirerSettingsBambora GETAcquirersBamboraFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsBambora> localVarResponse = GETAcquirersBamboraFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsBambora</returns>
        public ApiResponse< AcquirerSettingsBambora > GETAcquirersBamboraFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersBamboraFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersBamboraFormat");

            var localVarPath = "/acquirers/bambora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersBamboraFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsBambora>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsBambora) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsBambora)));
        }

        /// <summary>
        /// Get Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsBambora</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsBambora> GETAcquirersBamboraFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsBambora> localVarResponse = await GETAcquirersBamboraFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsBambora)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsBambora>> GETAcquirersBamboraFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersBamboraFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersBamboraFormat");

            var localVarPath = "/acquirers/bambora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersBamboraFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsBambora>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsBambora) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsBambora)));
        }

        /// <summary>
        /// Get Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsClearhaus</returns>
        public AcquirerSettingsClearhaus GETAcquirersClearhausFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsClearhaus> localVarResponse = GETAcquirersClearhausFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsClearhaus</returns>
        public ApiResponse< AcquirerSettingsClearhaus > GETAcquirersClearhausFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersClearhausFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersClearhausFormat");

            var localVarPath = "/acquirers/clearhaus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersClearhausFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsClearhaus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsClearhaus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsClearhaus)));
        }

        /// <summary>
        /// Get Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsClearhaus</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsClearhaus> GETAcquirersClearhausFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsClearhaus> localVarResponse = await GETAcquirersClearhausFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsClearhaus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsClearhaus>> GETAcquirersClearhausFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersClearhausFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersClearhausFormat");

            var localVarPath = "/acquirers/clearhaus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersClearhausFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsClearhaus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsClearhaus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsClearhaus)));
        }

        /// <summary>
        /// Get Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsCoinify</returns>
        public AcquirerSettingsCoinify GETAcquirersCoinifyFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsCoinify> localVarResponse = GETAcquirersCoinifyFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsCoinify</returns>
        public ApiResponse< AcquirerSettingsCoinify > GETAcquirersCoinifyFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersCoinifyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersCoinifyFormat");

            var localVarPath = "/acquirers/coinify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersCoinifyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsCoinify>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsCoinify) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsCoinify)));
        }

        /// <summary>
        /// Get Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsCoinify</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsCoinify> GETAcquirersCoinifyFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsCoinify> localVarResponse = await GETAcquirersCoinifyFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsCoinify)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsCoinify>> GETAcquirersCoinifyFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersCoinifyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersCoinifyFormat");

            var localVarPath = "/acquirers/coinify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersCoinifyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsCoinify>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsCoinify) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsCoinify)));
        }

        /// <summary>
        /// Get Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsElavon</returns>
        public AcquirerSettingsElavon GETAcquirersElavonFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsElavon> localVarResponse = GETAcquirersElavonFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsElavon</returns>
        public ApiResponse< AcquirerSettingsElavon > GETAcquirersElavonFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersElavonFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersElavonFormat");

            var localVarPath = "/acquirers/elavon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersElavonFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsElavon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsElavon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsElavon)));
        }

        /// <summary>
        /// Get Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsElavon</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsElavon> GETAcquirersElavonFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsElavon> localVarResponse = await GETAcquirersElavonFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsElavon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsElavon>> GETAcquirersElavonFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersElavonFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersElavonFormat");

            var localVarPath = "/acquirers/elavon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersElavonFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsElavon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsElavon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsElavon)));
        }

        /// <summary>
        /// Fetch acquirers  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettings</returns>
        public AcquirerSettings GETAcquirersFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettings> localVarResponse = GETAcquirersFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetch acquirers  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettings</returns>
        public ApiResponse< AcquirerSettings > GETAcquirersFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersFormat");

            var localVarPath = "/acquirers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettings)));
        }

        /// <summary>
        /// Fetch acquirers  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettings</returns>
        public async System.Threading.Tasks.Task<AcquirerSettings> GETAcquirersFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettings> localVarResponse = await GETAcquirersFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetch acquirers  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettings>> GETAcquirersFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersFormat");

            var localVarPath = "/acquirers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettings)));
        }

        /// <summary>
        /// Get Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsHandelsbanken</returns>
        public AcquirerSettingsHandelsbanken GETAcquirersHandelsbankenFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsHandelsbanken> localVarResponse = GETAcquirersHandelsbankenFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsHandelsbanken</returns>
        public ApiResponse< AcquirerSettingsHandelsbanken > GETAcquirersHandelsbankenFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersHandelsbankenFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersHandelsbankenFormat");

            var localVarPath = "/acquirers/handelsbanken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersHandelsbankenFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsHandelsbanken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsHandelsbanken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsHandelsbanken)));
        }

        /// <summary>
        /// Get Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsHandelsbanken</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsHandelsbanken> GETAcquirersHandelsbankenFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsHandelsbanken> localVarResponse = await GETAcquirersHandelsbankenFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsHandelsbanken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsHandelsbanken>> GETAcquirersHandelsbankenFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersHandelsbankenFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersHandelsbankenFormat");

            var localVarPath = "/acquirers/handelsbanken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersHandelsbankenFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsHandelsbanken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsHandelsbanken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsHandelsbanken)));
        }

        /// <summary>
        /// Get Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarna</returns>
        public AcquirerSettingsKlarna GETAcquirersKlarnaFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsKlarna> localVarResponse = GETAcquirersKlarnaFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarna</returns>
        public ApiResponse< AcquirerSettingsKlarna > GETAcquirersKlarnaFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersKlarnaFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersKlarnaFormat");

            var localVarPath = "/acquirers/klarna";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersKlarnaFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarna>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarna) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarna)));
        }

        /// <summary>
        /// Get Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarna</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsKlarna> GETAcquirersKlarnaFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsKlarna> localVarResponse = await GETAcquirersKlarnaFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarna)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarna>> GETAcquirersKlarnaFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersKlarnaFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersKlarnaFormat");

            var localVarPath = "/acquirers/klarna";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersKlarnaFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarna>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarna) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarna)));
        }

        /// <summary>
        /// Get KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarnaPayments</returns>
        public AcquirerSettingsKlarnaPayments GETAcquirersKlarnapaymentsFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsKlarnaPayments> localVarResponse = GETAcquirersKlarnapaymentsFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarnaPayments</returns>
        public ApiResponse< AcquirerSettingsKlarnaPayments > GETAcquirersKlarnapaymentsFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersKlarnapaymentsFormat");

            var localVarPath = "/acquirers/klarnapayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersKlarnapaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarnaPayments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarnaPayments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarnaPayments)));
        }

        /// <summary>
        /// Get KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarnaPayments</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsKlarnaPayments> GETAcquirersKlarnapaymentsFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsKlarnaPayments> localVarResponse = await GETAcquirersKlarnapaymentsFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarnaPayments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarnaPayments>> GETAcquirersKlarnapaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersKlarnapaymentsFormat");

            var localVarPath = "/acquirers/klarnapayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersKlarnapaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarnaPayments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarnaPayments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarnaPayments)));
        }

        /// <summary>
        /// Get MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePay</returns>
        public AcquirerSettingsMobilePay GETAcquirersMobilepayFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePay> localVarResponse = GETAcquirersMobilepayFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePay</returns>
        public ApiResponse< AcquirerSettingsMobilePay > GETAcquirersMobilepayFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepayFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepayFormat");

            var localVarPath = "/acquirers/mobilepay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepayFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePay) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePay)));
        }

        /// <summary>
        /// Get MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePay</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePay> GETAcquirersMobilepayFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePay> localVarResponse = await GETAcquirersMobilepayFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePay>> GETAcquirersMobilepayFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepayFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepayFormat");

            var localVarPath = "/acquirers/mobilepay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepayFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePay) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePay)));
        }

        /// <summary>
        /// Get MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePayOnline</returns>
        public AcquirerSettingsMobilePayOnline GETAcquirersMobilepayonlineFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePayOnline> localVarResponse = GETAcquirersMobilepayonlineFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePayOnline</returns>
        public ApiResponse< AcquirerSettingsMobilePayOnline > GETAcquirersMobilepayonlineFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepayonlineFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepayonlineFormat");

            var localVarPath = "/acquirers/mobilepayonline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepayonlineFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePayOnline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePayOnline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePayOnline)));
        }

        /// <summary>
        /// Get MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePayOnline</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePayOnline> GETAcquirersMobilepayonlineFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePayOnline> localVarResponse = await GETAcquirersMobilepayonlineFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePayOnline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePayOnline>> GETAcquirersMobilepayonlineFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepayonlineFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepayonlineFormat");

            var localVarPath = "/acquirers/mobilepayonline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepayonlineFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePayOnline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePayOnline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePayOnline)));
        }

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsMobilePaySubscriptions</returns>
        public AcquirerSettingsMobilePaySubscriptions GETAcquirersMobilepaysubscriptionsFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePaySubscriptions> localVarResponse = GETAcquirersMobilepaysubscriptionsFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePaySubscriptions</returns>
        public ApiResponse< AcquirerSettingsMobilePaySubscriptions > GETAcquirersMobilepaysubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepaysubscriptionsFormat");

            var localVarPath = "/acquirers/mobilepaysubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepaysubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePaySubscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePaySubscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePaySubscriptions)));
        }

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsMobilePaySubscriptions</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePaySubscriptions> GETAcquirersMobilepaysubscriptionsFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsMobilePaySubscriptions> localVarResponse = await GETAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePaySubscriptions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePaySubscriptions>> GETAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersMobilepaysubscriptionsFormat");

            var localVarPath = "/acquirers/mobilepaysubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersMobilepaysubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePaySubscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePaySubscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePaySubscriptions)));
        }

        /// <summary>
        /// Get Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsNets</returns>
        public AcquirerSettingsNets GETAcquirersNetsFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsNets> localVarResponse = GETAcquirersNetsFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsNets</returns>
        public ApiResponse< AcquirerSettingsNets > GETAcquirersNetsFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersNetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersNetsFormat");

            var localVarPath = "/acquirers/nets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersNetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsNets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsNets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsNets)));
        }

        /// <summary>
        /// Get Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsNets</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsNets> GETAcquirersNetsFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsNets> localVarResponse = await GETAcquirersNetsFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsNets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsNets>> GETAcquirersNetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersNetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersNetsFormat");

            var localVarPath = "/acquirers/nets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersNetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsNets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsNets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsNets)));
        }

        /// <summary>
        /// Get PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPayPal</returns>
        public AcquirerSettingsPayPal GETAcquirersPaypalFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsPayPal> localVarResponse = GETAcquirersPaypalFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPayPal</returns>
        public ApiResponse< AcquirerSettingsPayPal > GETAcquirersPaypalFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersPaypalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersPaypalFormat");

            var localVarPath = "/acquirers/paypal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersPaypalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPayPal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPayPal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPayPal)));
        }

        /// <summary>
        /// Get PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPayPal</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsPayPal> GETAcquirersPaypalFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsPayPal> localVarResponse = await GETAcquirersPaypalFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPayPal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPayPal>> GETAcquirersPaypalFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersPaypalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersPaypalFormat");

            var localVarPath = "/acquirers/paypal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersPaypalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPayPal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPayPal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPayPal)));
        }

        /// <summary>
        /// Get Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPaysafecard</returns>
        public AcquirerSettingsPaysafecard GETAcquirersPaysafecardFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsPaysafecard> localVarResponse = GETAcquirersPaysafecardFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPaysafecard</returns>
        public ApiResponse< AcquirerSettingsPaysafecard > GETAcquirersPaysafecardFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersPaysafecardFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersPaysafecardFormat");

            var localVarPath = "/acquirers/paysafecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersPaysafecardFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPaysafecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPaysafecard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPaysafecard)));
        }

        /// <summary>
        /// Get Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPaysafecard</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsPaysafecard> GETAcquirersPaysafecardFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsPaysafecard> localVarResponse = await GETAcquirersPaysafecardFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPaysafecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPaysafecard>> GETAcquirersPaysafecardFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersPaysafecardFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersPaysafecardFormat");

            var localVarPath = "/acquirers/paysafecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersPaysafecardFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPaysafecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPaysafecard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPaysafecard)));
        }

        /// <summary>
        /// Get Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsResurs</returns>
        public AcquirerSettingsResurs GETAcquirersResursFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsResurs> localVarResponse = GETAcquirersResursFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsResurs</returns>
        public ApiResponse< AcquirerSettingsResurs > GETAcquirersResursFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersResursFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersResursFormat");

            var localVarPath = "/acquirers/resurs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersResursFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsResurs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsResurs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsResurs)));
        }

        /// <summary>
        /// Get Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsResurs</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsResurs> GETAcquirersResursFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsResurs> localVarResponse = await GETAcquirersResursFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsResurs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsResurs>> GETAcquirersResursFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersResursFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersResursFormat");

            var localVarPath = "/acquirers/resurs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersResursFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsResurs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsResurs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsResurs)));
        }

        /// <summary>
        /// Get Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSofort</returns>
        public AcquirerSettingsSofort GETAcquirersSofortFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSofort> localVarResponse = GETAcquirersSofortFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSofort</returns>
        public ApiResponse< AcquirerSettingsSofort > GETAcquirersSofortFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSofortFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSofortFormat");

            var localVarPath = "/acquirers/sofort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSofortFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSofort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSofort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSofort)));
        }

        /// <summary>
        /// Get Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSofort</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSofort> GETAcquirersSofortFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSofort> localVarResponse = await GETAcquirersSofortFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSofort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSofort>> GETAcquirersSofortFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSofortFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSofortFormat");

            var localVarPath = "/acquirers/sofort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSofortFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSofort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSofort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSofort)));
        }

        /// <summary>
        /// Get Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSwedbank</returns>
        public AcquirerSettingsSwedbank GETAcquirersSwedbankFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSwedbank> localVarResponse = GETAcquirersSwedbankFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSwedbank</returns>
        public ApiResponse< AcquirerSettingsSwedbank > GETAcquirersSwedbankFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSwedbankFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSwedbankFormat");

            var localVarPath = "/acquirers/swedbank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSwedbankFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwedbank>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwedbank) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwedbank)));
        }

        /// <summary>
        /// Get Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSwedbank</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSwedbank> GETAcquirersSwedbankFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSwedbank> localVarResponse = await GETAcquirersSwedbankFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwedbank)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwedbank>> GETAcquirersSwedbankFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSwedbankFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSwedbankFormat");

            var localVarPath = "/acquirers/swedbank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSwedbankFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwedbank>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwedbank) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwedbank)));
        }

        /// <summary>
        /// Get Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsSwish</returns>
        public AcquirerSettingsSwish GETAcquirersSwishFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSwish> localVarResponse = GETAcquirersSwishFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsSwish</returns>
        public ApiResponse< AcquirerSettingsSwish > GETAcquirersSwishFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSwishFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSwishFormat");

            var localVarPath = "/acquirers/swish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSwishFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwish>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwish) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwish)));
        }

        /// <summary>
        /// Get Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsSwish</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSwish> GETAcquirersSwishFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsSwish> localVarResponse = await GETAcquirersSwishFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwish)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwish>> GETAcquirersSwishFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersSwishFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersSwishFormat");

            var localVarPath = "/acquirers/swish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersSwishFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwish>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwish) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwish)));
        }

        /// <summary>
        /// Get Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTeller</returns>
        public AcquirerSettingsTeller GETAcquirersTellerFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsTeller> localVarResponse = GETAcquirersTellerFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTeller</returns>
        public ApiResponse< AcquirerSettingsTeller > GETAcquirersTellerFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersTellerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersTellerFormat");

            var localVarPath = "/acquirers/teller";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersTellerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTeller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTeller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTeller)));
        }

        /// <summary>
        /// Get Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTeller</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsTeller> GETAcquirersTellerFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsTeller> localVarResponse = await GETAcquirersTellerFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTeller)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTeller>> GETAcquirersTellerFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersTellerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersTellerFormat");

            var localVarPath = "/acquirers/teller";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersTellerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTeller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTeller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTeller)));
        }

        /// <summary>
        /// Get Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTrustly</returns>
        public AcquirerSettingsTrustly GETAcquirersTrustlyFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsTrustly> localVarResponse = GETAcquirersTrustlyFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTrustly</returns>
        public ApiResponse< AcquirerSettingsTrustly > GETAcquirersTrustlyFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersTrustlyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersTrustlyFormat");

            var localVarPath = "/acquirers/trustly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersTrustlyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTrustly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTrustly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTrustly)));
        }

        /// <summary>
        /// Get Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTrustly</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsTrustly> GETAcquirersTrustlyFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsTrustly> localVarResponse = await GETAcquirersTrustlyFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTrustly)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTrustly>> GETAcquirersTrustlyFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersTrustlyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersTrustlyFormat");

            var localVarPath = "/acquirers/trustly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersTrustlyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTrustly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTrustly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTrustly)));
        }

        /// <summary>
        /// Get Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsValitor</returns>
        public AcquirerSettingsValitor GETAcquirersValitorFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsValitor> localVarResponse = GETAcquirersValitorFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsValitor</returns>
        public ApiResponse< AcquirerSettingsValitor > GETAcquirersValitorFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersValitorFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersValitorFormat");

            var localVarPath = "/acquirers/valitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersValitorFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsValitor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsValitor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsValitor)));
        }

        /// <summary>
        /// Get Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsValitor</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsValitor> GETAcquirersValitorFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsValitor> localVarResponse = await GETAcquirersValitorFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsValitor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsValitor>> GETAcquirersValitorFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersValitorFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersValitorFormat");

            var localVarPath = "/acquirers/valitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersValitorFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsValitor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsValitor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsValitor)));
        }

        /// <summary>
        /// Get ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsViaBill</returns>
        public AcquirerSettingsViaBill GETAcquirersViabillFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsViaBill> localVarResponse = GETAcquirersViabillFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsViaBill</returns>
        public ApiResponse< AcquirerSettingsViaBill > GETAcquirersViabillFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersViabillFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersViabillFormat");

            var localVarPath = "/acquirers/viabill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersViabillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsViaBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsViaBill) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsViaBill)));
        }

        /// <summary>
        /// Get ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsViaBill</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsViaBill> GETAcquirersViabillFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsViaBill> localVarResponse = await GETAcquirersViabillFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsViaBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsViaBill>> GETAcquirersViabillFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersViabillFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersViabillFormat");

            var localVarPath = "/acquirers/viabill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersViabillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsViaBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsViaBill) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsViaBill)));
        }

        /// <summary>
        /// Get Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsVipps</returns>
        public AcquirerSettingsVipps GETAcquirersVippsFormat (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsVipps> localVarResponse = GETAcquirersVippsFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsVipps</returns>
        public ApiResponse< AcquirerSettingsVipps > GETAcquirersVippsFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersVippsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersVippsFormat");

            var localVarPath = "/acquirers/vipps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersVippsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsVipps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsVipps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsVipps)));
        }

        /// <summary>
        /// Get Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsVipps</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsVipps> GETAcquirersVippsFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<AcquirerSettingsVipps> localVarResponse = await GETAcquirersVippsFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsVipps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsVipps>> GETAcquirersVippsFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->GETAcquirersVippsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->GETAcquirersVippsFormat");

            var localVarPath = "/acquirers/vipps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAcquirersVippsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsVipps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsVipps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsVipps)));
        }

        /// <summary>
        /// Update Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsBambora</returns>
        public AcquirerSettingsBambora PATCHAcquirersBamboraFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsBambora> localVarResponse = PATCHAcquirersBamboraFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsBambora</returns>
        public ApiResponse< AcquirerSettingsBambora > PATCHAcquirersBamboraFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersBamboraFormat");

            var localVarPath = "/acquirers/bambora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersBamboraFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsBambora>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsBambora) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsBambora)));
        }

        /// <summary>
        /// Update Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsBambora</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsBambora> PATCHAcquirersBamboraFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsBambora> localVarResponse = await PATCHAcquirersBamboraFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Bambora acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Bambora payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Bambora identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Bambora)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Bambora international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Bambora)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsBambora)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsBambora>> PATCHAcquirersBamboraFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersBamboraFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersBamboraFormat");

            var localVarPath = "/acquirers/bambora";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersBamboraFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsBambora>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsBambora) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsBambora)));
        }

        /// <summary>
        /// Update Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsClearhaus</returns>
        public AcquirerSettingsClearhaus PATCHAcquirersClearhausFormat (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null)
        {
             ApiResponse<AcquirerSettingsClearhaus> localVarResponse = PATCHAcquirersClearhausFormatWithHttpInfo(acceptVersion, authorization, active, apiKey, recurring, payout, applePay);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsClearhaus</returns>
        public ApiResponse< AcquirerSettingsClearhaus > PATCHAcquirersClearhausFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersClearhausFormat");

            var localVarPath = "/acquirers/clearhaus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (payout != null) localVarFormParams.Add("payout", this.Configuration.ApiClient.ParameterToString(payout)); // form parameter
            if (applePay != null) localVarFormParams.Add("apple_pay", this.Configuration.ApiClient.ParameterToString(applePay)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersClearhausFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsClearhaus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsClearhaus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsClearhaus)));
        }

        /// <summary>
        /// Update Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsClearhaus</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsClearhaus> PATCHAcquirersClearhausFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null)
        {
             ApiResponse<AcquirerSettingsClearhaus> localVarResponse = await PATCHAcquirersClearhausFormatAsyncWithHttpInfo(acceptVersion, authorization, active, apiKey, recurring, payout, applePay);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Clearhaus acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ClearHaus payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Clearhaus API key (is required but may be left empty)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="payout">&lt;p&gt;Enable payouts (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <param name="applePay">&lt;p&gt;Enable Apple Pay (requires agreement with Clearhaus)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsClearhaus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsClearhaus>> PATCHAcquirersClearhausFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, bool? recurring = null, bool? payout = null, bool? applePay = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersClearhausFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersClearhausFormat");

            var localVarPath = "/acquirers/clearhaus";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (payout != null) localVarFormParams.Add("payout", this.Configuration.ApiClient.ParameterToString(payout)); // form parameter
            if (applePay != null) localVarFormParams.Add("apple_pay", this.Configuration.ApiClient.ParameterToString(applePay)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersClearhausFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsClearhaus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsClearhaus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsClearhaus)));
        }

        /// <summary>
        /// Update Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsCoinify</returns>
        public AcquirerSettingsCoinify PATCHAcquirersCoinifyFormat (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null)
        {
             ApiResponse<AcquirerSettingsCoinify> localVarResponse = PATCHAcquirersCoinifyFormatWithHttpInfo(acceptVersion, authorization, active, apiKey, apiSecret, ipnSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsCoinify</returns>
        public ApiResponse< AcquirerSettingsCoinify > PATCHAcquirersCoinifyFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'apiSecret' is set
            if (apiSecret == null)
                throw new ApiException(400, "Missing required parameter 'apiSecret' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");

            var localVarPath = "/acquirers/coinify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (apiSecret != null) localVarFormParams.Add("api_secret", this.Configuration.ApiClient.ParameterToString(apiSecret)); // form parameter
            if (ipnSecret != null) localVarFormParams.Add("ipn_secret", this.Configuration.ApiClient.ParameterToString(ipnSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersCoinifyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsCoinify>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsCoinify) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsCoinify)));
        }

        /// <summary>
        /// Update Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsCoinify</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsCoinify> PATCHAcquirersCoinifyFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null)
        {
             ApiResponse<AcquirerSettingsCoinify> localVarResponse = await PATCHAcquirersCoinifyFormatAsyncWithHttpInfo(acceptVersion, authorization, active, apiKey, apiSecret, ipnSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Coinify acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Coinify Bitcoin payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Coinify API key&lt;/p&gt; </param>
        /// <param name="apiSecret">&lt;p&gt;Coinify API secret&lt;/p&gt; </param>
        /// <param name="ipnSecret">&lt;p&gt;Coinify IPN secret (recommended)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsCoinify)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsCoinify>> PATCHAcquirersCoinifyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey, string apiSecret, string ipnSecret = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");
            // verify the required parameter 'apiSecret' is set
            if (apiSecret == null)
                throw new ApiException(400, "Missing required parameter 'apiSecret' when calling AcquirersApi->PATCHAcquirersCoinifyFormat");

            var localVarPath = "/acquirers/coinify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (apiSecret != null) localVarFormParams.Add("api_secret", this.Configuration.ApiClient.ParameterToString(apiSecret)); // form parameter
            if (ipnSecret != null) localVarFormParams.Add("ipn_secret", this.Configuration.ApiClient.ParameterToString(ipnSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersCoinifyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsCoinify>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsCoinify) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsCoinify)));
        }

        /// <summary>
        /// Update Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsElavon</returns>
        public AcquirerSettingsElavon PATCHAcquirersElavonFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsElavon> localVarResponse = PATCHAcquirersElavonFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsElavon</returns>
        public ApiResponse< AcquirerSettingsElavon > PATCHAcquirersElavonFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersElavonFormat");

            var localVarPath = "/acquirers/elavon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersElavonFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsElavon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsElavon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsElavon)));
        }

        /// <summary>
        /// Update Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsElavon</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsElavon> PATCHAcquirersElavonFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsElavon> localVarResponse = await PATCHAcquirersElavonFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Elavon acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Elavon payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Elavon identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Elavon)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Elavon international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Elavon)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsElavon)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsElavon>> PATCHAcquirersElavonFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersElavonFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersElavonFormat");

            var localVarPath = "/acquirers/elavon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersElavonFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsElavon>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsElavon) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsElavon)));
        }

        /// <summary>
        /// Update Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsHandelsbanken</returns>
        public AcquirerSettingsHandelsbanken PATCHAcquirersHandelsbankenFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsHandelsbanken> localVarResponse = PATCHAcquirersHandelsbankenFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsHandelsbanken</returns>
        public ApiResponse< AcquirerSettingsHandelsbanken > PATCHAcquirersHandelsbankenFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");

            var localVarPath = "/acquirers/handelsbanken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersHandelsbankenFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsHandelsbanken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsHandelsbanken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsHandelsbanken)));
        }

        /// <summary>
        /// Update Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsHandelsbanken</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsHandelsbanken> PATCHAcquirersHandelsbankenFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsHandelsbanken> localVarResponse = await PATCHAcquirersHandelsbankenFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Handelsbanken acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Handelsbanken payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Handelsbanken identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Handelsbanken)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Handelsbanken international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Handelsbanken)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsHandelsbanken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsHandelsbanken>> PATCHAcquirersHandelsbankenFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersHandelsbankenFormat");

            var localVarPath = "/acquirers/handelsbanken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersHandelsbankenFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsHandelsbanken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsHandelsbanken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsHandelsbanken)));
        }

        /// <summary>
        /// Update Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarna</returns>
        public AcquirerSettingsKlarna PATCHAcquirersKlarnaFormat (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret)
        {
             ApiResponse<AcquirerSettingsKlarna> localVarResponse = PATCHAcquirersKlarnaFormatWithHttpInfo(acceptVersion, authorization, active, eid, sharedSecret);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarna</returns>
        public ApiResponse< AcquirerSettingsKlarna > PATCHAcquirersKlarnaFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'sharedSecret' is set
            if (sharedSecret == null)
                throw new ApiException(400, "Missing required parameter 'sharedSecret' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");

            var localVarPath = "/acquirers/klarna";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (eid != null) localVarFormParams.Add("eid", this.Configuration.ApiClient.ParameterToString(eid)); // form parameter
            if (sharedSecret != null) localVarFormParams.Add("shared_secret", this.Configuration.ApiClient.ParameterToString(sharedSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersKlarnaFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarna>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarna) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarna)));
        }

        /// <summary>
        /// Update Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarna</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsKlarna> PATCHAcquirersKlarnaFormatAsync (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret)
        {
             ApiResponse<AcquirerSettingsKlarna> localVarResponse = await PATCHAcquirersKlarnaFormatAsyncWithHttpInfo(acceptVersion, authorization, active, eid, sharedSecret);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Klarna acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="eid">&lt;p&gt;Klarna merchant ID&lt;/p&gt; </param>
        /// <param name="sharedSecret">&lt;p&gt;Klarna shared secret&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarna)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarna>> PATCHAcquirersKlarnaFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? eid, string sharedSecret)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'eid' is set
            if (eid == null)
                throw new ApiException(400, "Missing required parameter 'eid' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");
            // verify the required parameter 'sharedSecret' is set
            if (sharedSecret == null)
                throw new ApiException(400, "Missing required parameter 'sharedSecret' when calling AcquirersApi->PATCHAcquirersKlarnaFormat");

            var localVarPath = "/acquirers/klarna";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (eid != null) localVarFormParams.Add("eid", this.Configuration.ApiClient.ParameterToString(eid)); // form parameter
            if (sharedSecret != null) localVarFormParams.Add("shared_secret", this.Configuration.ApiClient.ParameterToString(sharedSecret)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersKlarnaFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarna>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarna) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarna)));
        }

        /// <summary>
        /// Update KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsKlarnaPayments</returns>
        public AcquirerSettingsKlarnaPayments PATCHAcquirersKlarnapaymentsFormat (string acceptVersion, string authorization, bool? active, string uid, string password)
        {
             ApiResponse<AcquirerSettingsKlarnaPayments> localVarResponse = PATCHAcquirersKlarnapaymentsFormatWithHttpInfo(acceptVersion, authorization, active, uid, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsKlarnaPayments</returns>
        public ApiResponse< AcquirerSettingsKlarnaPayments > PATCHAcquirersKlarnapaymentsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string uid, string password)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");

            var localVarPath = "/acquirers/klarnapayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (uid != null) localVarFormParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersKlarnapaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarnaPayments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarnaPayments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarnaPayments)));
        }

        /// <summary>
        /// Update KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsKlarnaPayments</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsKlarnaPayments> PATCHAcquirersKlarnapaymentsFormatAsync (string acceptVersion, string authorization, bool? active, string uid, string password)
        {
             ApiResponse<AcquirerSettingsKlarnaPayments> localVarResponse = await PATCHAcquirersKlarnapaymentsFormatAsyncWithHttpInfo(acceptVersion, authorization, active, uid, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update KlarnaPayments acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Klarna payments&lt;/p&gt; </param>
        /// <param name="uid">&lt;p&gt;Klarna username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Klarna password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsKlarnaPayments)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsKlarnaPayments>> PATCHAcquirersKlarnapaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string uid, string password)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersKlarnapaymentsFormat");

            var localVarPath = "/acquirers/klarnapayments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (uid != null) localVarFormParams.Add("uid", this.Configuration.ApiClient.ParameterToString(uid)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersKlarnapaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsKlarnaPayments>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsKlarnaPayments) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsKlarnaPayments)));
        }

        /// <summary>
        /// Update MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePay</returns>
        public AcquirerSettingsMobilePay PATCHAcquirersMobilepayFormat (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null)
        {
             ApiResponse<AcquirerSettingsMobilePay> localVarResponse = PATCHAcquirersMobilepayFormatWithHttpInfo(acceptVersion, authorization, active, deliveryLimitedTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePay</returns>
        public ApiResponse< AcquirerSettingsMobilePay > PATCHAcquirersMobilepayFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");

            var localVarPath = "/acquirers/mobilepay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (deliveryLimitedTo != null) localVarFormParams.Add("delivery_limited_to", this.Configuration.ApiClient.ParameterToString(deliveryLimitedTo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepayFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePay) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePay)));
        }

        /// <summary>
        /// Update MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePay</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePay> PATCHAcquirersMobilepayFormatAsync (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null)
        {
             ApiResponse<AcquirerSettingsMobilePay> localVarResponse = await PATCHAcquirersMobilepayFormatAsyncWithHttpInfo(acceptVersion, authorization, active, deliveryLimitedTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update MobilePay acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay payments&lt;/p&gt; </param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePay)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePay>> PATCHAcquirersMobilepayFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string deliveryLimitedTo = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepayFormat");

            var localVarPath = "/acquirers/mobilepay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (deliveryLimitedTo != null) localVarFormParams.Add("delivery_limited_to", this.Configuration.ApiClient.ParameterToString(deliveryLimitedTo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepayFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePay>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePay) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePay)));
        }

        /// <summary>
        /// Update MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePayOnline</returns>
        public AcquirerSettingsMobilePayOnline PATCHAcquirersMobilepayonlineFormat (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null)
        {
             ApiResponse<AcquirerSettingsMobilePayOnline> localVarResponse = PATCHAcquirersMobilepayonlineFormatWithHttpInfo(acceptVersion, authorization, active, merchantId, deliveryLimitedTo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePayOnline</returns>
        public ApiResponse< AcquirerSettingsMobilePayOnline > PATCHAcquirersMobilepayonlineFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");

            var localVarPath = "/acquirers/mobilepayonline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (merchantId != null) localVarFormParams.Add("merchant_id", this.Configuration.ApiClient.ParameterToString(merchantId)); // form parameter
            if (deliveryLimitedTo != null) localVarFormParams.Add("delivery_limited_to", this.Configuration.ApiClient.ParameterToString(deliveryLimitedTo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepayonlineFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePayOnline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePayOnline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePayOnline)));
        }

        /// <summary>
        /// Update MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePayOnline</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePayOnline> PATCHAcquirersMobilepayonlineFormatAsync (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null)
        {
             ApiResponse<AcquirerSettingsMobilePayOnline> localVarResponse = await PATCHAcquirersMobilepayonlineFormatAsyncWithHttpInfo(acceptVersion, authorization, active, merchantId, deliveryLimitedTo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update MobilePayOnline acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Online payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Id for the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="deliveryLimitedTo">&lt;p&gt;Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePayOnline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePayOnline>> PATCHAcquirersMobilepayonlineFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? merchantId = null, string deliveryLimitedTo = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepayonlineFormat");

            var localVarPath = "/acquirers/mobilepayonline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (merchantId != null) localVarFormParams.Add("merchant_id", this.Configuration.ApiClient.ParameterToString(merchantId)); // form parameter
            if (deliveryLimitedTo != null) localVarFormParams.Add("delivery_limited_to", this.Configuration.ApiClient.ParameterToString(deliveryLimitedTo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepayonlineFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePayOnline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePayOnline) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePayOnline)));
        }

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsMobilePaySubscriptions</returns>
        public AcquirerSettingsMobilePaySubscriptions PATCHAcquirersMobilepaysubscriptionsFormat (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null)
        {
             ApiResponse<AcquirerSettingsMobilePaySubscriptions> localVarResponse = PATCHAcquirersMobilepaysubscriptionsFormatWithHttpInfo(acceptVersion, authorization, active, authState, codeVerifier, lastTokenRefresh, nonce, pendingStatus, provider, refreshToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsMobilePaySubscriptions</returns>
        public ApiResponse< AcquirerSettingsMobilePaySubscriptions > PATCHAcquirersMobilepaysubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");

            var localVarPath = "/acquirers/mobilepaysubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (authState != null) localVarFormParams.Add("auth_state", this.Configuration.ApiClient.ParameterToString(authState)); // form parameter
            if (codeVerifier != null) localVarFormParams.Add("code_verifier", this.Configuration.ApiClient.ParameterToString(codeVerifier)); // form parameter
            if (lastTokenRefresh != null) localVarFormParams.Add("last_token_refresh", this.Configuration.ApiClient.ParameterToString(lastTokenRefresh)); // form parameter
            if (nonce != null) localVarFormParams.Add("nonce", this.Configuration.ApiClient.ParameterToString(nonce)); // form parameter
            if (pendingStatus != null) localVarFormParams.Add("pending_status", this.Configuration.ApiClient.ParameterToString(pendingStatus)); // form parameter
            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepaysubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePaySubscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePaySubscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePaySubscriptions)));
        }

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsMobilePaySubscriptions</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsMobilePaySubscriptions> PATCHAcquirersMobilepaysubscriptionsFormatAsync (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null)
        {
             ApiResponse<AcquirerSettingsMobilePaySubscriptions> localVarResponse = await PATCHAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo(acceptVersion, authorization, active, authState, codeVerifier, lastTokenRefresh, nonce, pendingStatus, provider, refreshToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update MobilePaySubscriptions acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable MobilePay Subscriptions payments&lt;/p&gt; </param>
        /// <param name="authState">&lt;p&gt;Identifier MobilePay Subscriptions uses to link requests to callbacks&lt;/p&gt;  (optional)</param>
        /// <param name="codeVerifier">&lt;p&gt;Verifies received code challenge&lt;/p&gt;  (optional)</param>
        /// <param name="lastTokenRefresh">&lt;p&gt;Unix Timestamp of last time the tokens were refreshed&lt;/p&gt;  (optional)</param>
        /// <param name="nonce">&lt;p&gt;Associate client sessions with ID Tokens to mitigate replay attacks&lt;/p&gt;  (optional)</param>
        /// <param name="pendingStatus">&lt;p&gt;0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed&lt;/p&gt;  (optional, default to 0)</param>
        /// <param name="provider">&lt;p&gt;The provider / sales-place chosen by the merchant&lt;/p&gt;  (optional)</param>
        /// <param name="refreshToken">&lt;p&gt;Token to refresh access token for up to 1 year&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsMobilePaySubscriptions)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsMobilePaySubscriptions>> PATCHAcquirersMobilepaysubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string authState = null, string codeVerifier = null, int? lastTokenRefresh = null, string nonce = null, int? pendingStatus = null, Dictionary<string, string> provider = null, string refreshToken = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersMobilepaysubscriptionsFormat");

            var localVarPath = "/acquirers/mobilepaysubscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (authState != null) localVarFormParams.Add("auth_state", this.Configuration.ApiClient.ParameterToString(authState)); // form parameter
            if (codeVerifier != null) localVarFormParams.Add("code_verifier", this.Configuration.ApiClient.ParameterToString(codeVerifier)); // form parameter
            if (lastTokenRefresh != null) localVarFormParams.Add("last_token_refresh", this.Configuration.ApiClient.ParameterToString(lastTokenRefresh)); // form parameter
            if (nonce != null) localVarFormParams.Add("nonce", this.Configuration.ApiClient.ParameterToString(nonce)); // form parameter
            if (pendingStatus != null) localVarFormParams.Add("pending_status", this.Configuration.ApiClient.ParameterToString(pendingStatus)); // form parameter
            if (provider != null) localVarFormParams.Add("provider", this.Configuration.ApiClient.ParameterToString(provider)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", this.Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersMobilepaysubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsMobilePaySubscriptions>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsMobilePaySubscriptions) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsMobilePaySubscriptions)));
        }

        /// <summary>
        /// Update Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsNets</returns>
        public AcquirerSettingsNets PATCHAcquirersNetsFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsNets> localVarResponse = PATCHAcquirersNetsFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, recurring, fbg1886, securedByNets, identificationCodeInt, americanexpress, dinersclub, securepay, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsNets</returns>
        public ApiResponse< AcquirerSettingsNets > PATCHAcquirersNetsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersNetsFormat");

            var localVarPath = "/acquirers/nets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (fbg1886 != null) localVarFormParams.Add("fbg1886", this.Configuration.ApiClient.ParameterToString(fbg1886)); // form parameter
            if (securedByNets != null) localVarFormParams.Add("secured_by_nets", this.Configuration.ApiClient.ParameterToString(securedByNets)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersNetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsNets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsNets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsNets)));
        }

        /// <summary>
        /// Update Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsNets</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsNets> PATCHAcquirersNetsFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsNets> localVarResponse = await PATCHAcquirersNetsFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, recurring, fbg1886, securedByNets, identificationCodeInt, americanexpress, dinersclub, securepay, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Nets acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Nets/Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Nets TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Nets)&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Nets)&lt;/p&gt;  (optional)</param>
        /// <param name="fbg1886">&lt;p&gt;Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)&lt;/p&gt;  (optional)</param>
        /// <param name="securedByNets">&lt;p&gt;Enable SecuredByNets fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="identificationCodeInt">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;(Depricated; use Teller acquirer)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsNets)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsNets>> PATCHAcquirersNetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, bool? recurring = null, bool? fbg1886 = null, bool? securedByNets = null, string identificationCodeInt = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersNetsFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersNetsFormat");

            var localVarPath = "/acquirers/nets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (fbg1886 != null) localVarFormParams.Add("fbg1886", this.Configuration.ApiClient.ParameterToString(fbg1886)); // form parameter
            if (securedByNets != null) localVarFormParams.Add("secured_by_nets", this.Configuration.ApiClient.ParameterToString(securedByNets)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersNetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsNets>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsNets) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsNets)));
        }

        /// <summary>
        /// Update PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsPayPal</returns>
        public AcquirerSettingsPayPal PATCHAcquirersPaypalFormat (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null)
        {
             ApiResponse<AcquirerSettingsPayPal> localVarResponse = PATCHAcquirersPaypalFormatWithHttpInfo(acceptVersion, authorization, active, recurring, creditCard, token, tokenSecret, scope);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsPayPal</returns>
        public ApiResponse< AcquirerSettingsPayPal > PATCHAcquirersPaypalFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersPaypalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersPaypalFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersPaypalFormat");

            var localVarPath = "/acquirers/paypal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (creditCard != null) localVarFormParams.Add("credit_card", this.Configuration.ApiClient.ParameterToString(creditCard)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (tokenSecret != null) localVarFormParams.Add("token_secret", this.Configuration.ApiClient.ParameterToString(tokenSecret)); // form parameter
            if (scope != null && scope.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scope); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scope; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersPaypalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPayPal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPayPal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPayPal)));
        }

        /// <summary>
        /// Update PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsPayPal</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsPayPal> PATCHAcquirersPaypalFormatAsync (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null)
        {
             ApiResponse<AcquirerSettingsPayPal> localVarResponse = await PATCHAcquirersPaypalFormatAsyncWithHttpInfo(acceptVersion, authorization, active, recurring, creditCard, token, tokenSecret, scope);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update PayPal acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable PayPal payments&lt;/p&gt; </param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments&lt;/p&gt;  (optional)</param>
        /// <param name="creditCard">&lt;p&gt;Allow credit-card payments. (Only for US/CA/UK merchants)&lt;/p&gt;  (optional)</param>
        /// <param name="token">&lt;p&gt;Authentication token&lt;/p&gt;  (optional)</param>
        /// <param name="tokenSecret">&lt;p&gt;Authentication token secret&lt;/p&gt;  (optional)</param>
        /// <param name="scope">&lt;p&gt;Authentication scope&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPayPal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPayPal>> PATCHAcquirersPaypalFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? recurring = null, bool? creditCard = null, string token = null, string tokenSecret = null, List<string> scope = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersPaypalFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersPaypalFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersPaypalFormat");

            var localVarPath = "/acquirers/paypal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (creditCard != null) localVarFormParams.Add("credit_card", this.Configuration.ApiClient.ParameterToString(creditCard)); // form parameter
            if (token != null) localVarFormParams.Add("token", this.Configuration.ApiClient.ParameterToString(token)); // form parameter
            if (tokenSecret != null) localVarFormParams.Add("token_secret", this.Configuration.ApiClient.ParameterToString(tokenSecret)); // form parameter
            if (scope != null && scope.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(scope); // http body (model) parameter
            }
            else
            {
                localVarPostBody = scope; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersPaypalFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPayPal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPayPal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPayPal)));
        }

        /// <summary>
        /// Update Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsPaysafecard</returns>
        public AcquirerSettingsPaysafecard PATCHAcquirersPaysafecardFormat (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies)
        {
             ApiResponse<AcquirerSettingsPaysafecard> localVarResponse = PATCHAcquirersPaysafecardFormatWithHttpInfo(acceptVersion, authorization, active, username, password, currencies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsPaysafecard</returns>
        public ApiResponse< AcquirerSettingsPaysafecard > PATCHAcquirersPaysafecardFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");

            var localVarPath = "/acquirers/paysafecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (currencies != null && currencies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersPaysafecardFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPaysafecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPaysafecard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPaysafecard)));
        }

        /// <summary>
        /// Update Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsPaysafecard</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsPaysafecard> PATCHAcquirersPaysafecardFormatAsync (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies)
        {
             ApiResponse<AcquirerSettingsPaysafecard> localVarResponse = await PATCHAcquirersPaysafecardFormatAsyncWithHttpInfo(acceptVersion, authorization, active, username, password, currencies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Paysafecard acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Paysafecard payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Paysafecard username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Paysafecard password&lt;/p&gt; </param>
        /// <param name="currencies">&lt;p&gt;Paysafecard currencies (Paysafecard requires agreement per currency)&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsPaysafecard)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsPaysafecard>> PATCHAcquirersPaysafecardFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string username, string password, List<Object> currencies)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");
            // verify the required parameter 'currencies' is set
            if (currencies == null)
                throw new ApiException(400, "Missing required parameter 'currencies' when calling AcquirersApi->PATCHAcquirersPaysafecardFormat");

            var localVarPath = "/acquirers/paysafecard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (currencies != null && currencies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(currencies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = currencies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersPaysafecardFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsPaysafecard>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsPaysafecard) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsPaysafecard)));
        }

        /// <summary>
        /// Update Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsResurs</returns>
        public AcquirerSettingsResurs PATCHAcquirersResursFormat (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword)
        {
             ApiResponse<AcquirerSettingsResurs> localVarResponse = PATCHAcquirersResursFormatWithHttpInfo(acceptVersion, authorization, active, customerId, customerPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsResurs</returns>
        public ApiResponse< AcquirerSettingsResurs > PATCHAcquirersResursFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'customerPassword' is set
            if (customerPassword == null)
                throw new ApiException(400, "Missing required parameter 'customerPassword' when calling AcquirersApi->PATCHAcquirersResursFormat");

            var localVarPath = "/acquirers/resurs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (customerId != null) localVarFormParams.Add("customer_id", this.Configuration.ApiClient.ParameterToString(customerId)); // form parameter
            if (customerPassword != null) localVarFormParams.Add("customer_password", this.Configuration.ApiClient.ParameterToString(customerPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersResursFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsResurs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsResurs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsResurs)));
        }

        /// <summary>
        /// Update Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsResurs</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsResurs> PATCHAcquirersResursFormatAsync (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword)
        {
             ApiResponse<AcquirerSettingsResurs> localVarResponse = await PATCHAcquirersResursFormatAsyncWithHttpInfo(acceptVersion, authorization, active, customerId, customerPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Resurs acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Resurs payments&lt;/p&gt; </param>
        /// <param name="customerId">&lt;p&gt;Resurs customer ID&lt;/p&gt; </param>
        /// <param name="customerPassword">&lt;p&gt;Resurs password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsResurs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsResurs>> PATCHAcquirersResursFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string customerId, string customerPassword)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'customerId' is set
            if (customerId == null)
                throw new ApiException(400, "Missing required parameter 'customerId' when calling AcquirersApi->PATCHAcquirersResursFormat");
            // verify the required parameter 'customerPassword' is set
            if (customerPassword == null)
                throw new ApiException(400, "Missing required parameter 'customerPassword' when calling AcquirersApi->PATCHAcquirersResursFormat");

            var localVarPath = "/acquirers/resurs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (customerId != null) localVarFormParams.Add("customer_id", this.Configuration.ApiClient.ParameterToString(customerId)); // form parameter
            if (customerPassword != null) localVarFormParams.Add("customer_password", this.Configuration.ApiClient.ParameterToString(customerPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersResursFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsResurs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsResurs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsResurs)));
        }

        /// <summary>
        /// Update Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSofort</returns>
        public AcquirerSettingsSofort PATCHAcquirersSofortFormat (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null)
        {
             ApiResponse<AcquirerSettingsSofort> localVarResponse = PATCHAcquirersSofortFormatWithHttpInfo(acceptVersion, authorization, active, customerNumber, projectId, apiKey, gateway, ideal, idealProjectId, idealProjectPassword, idealNotificationPassword);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSofort</returns>
        public ApiResponse< AcquirerSettingsSofort > PATCHAcquirersSofortFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new ApiException(400, "Missing required parameter 'customerNumber' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersSofortFormat");

            var localVarPath = "/acquirers/sofort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (customerNumber != null) localVarFormParams.Add("customer_number", this.Configuration.ApiClient.ParameterToString(customerNumber)); // form parameter
            if (projectId != null) localVarFormParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (gateway != null) localVarFormParams.Add("gateway", this.Configuration.ApiClient.ParameterToString(gateway)); // form parameter
            if (ideal != null) localVarFormParams.Add("ideal", this.Configuration.ApiClient.ParameterToString(ideal)); // form parameter
            if (idealProjectId != null) localVarFormParams.Add("ideal_project_id", this.Configuration.ApiClient.ParameterToString(idealProjectId)); // form parameter
            if (idealProjectPassword != null) localVarFormParams.Add("ideal_project_password", this.Configuration.ApiClient.ParameterToString(idealProjectPassword)); // form parameter
            if (idealNotificationPassword != null) localVarFormParams.Add("ideal_notification_password", this.Configuration.ApiClient.ParameterToString(idealNotificationPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSofortFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSofort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSofort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSofort)));
        }

        /// <summary>
        /// Update Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSofort</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSofort> PATCHAcquirersSofortFormatAsync (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null)
        {
             ApiResponse<AcquirerSettingsSofort> localVarResponse = await PATCHAcquirersSofortFormatAsyncWithHttpInfo(acceptVersion, authorization, active, customerNumber, projectId, apiKey, gateway, ideal, idealProjectId, idealProjectPassword, idealNotificationPassword);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Sofort acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Sofort payments&lt;/p&gt; </param>
        /// <param name="customerNumber">&lt;p&gt;Sofort customer number&lt;/p&gt; </param>
        /// <param name="projectId">&lt;p&gt;Sofort Gateway project id&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;Sofort API key&lt;/p&gt; </param>
        /// <param name="gateway">&lt;p&gt;Enable Sofort Gateway feature&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="ideal">&lt;p&gt;Enable Sofort iDeal feature&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectId">&lt;p&gt;Sofort iDeal project id&lt;/p&gt;  (optional)</param>
        /// <param name="idealProjectPassword">&lt;p&gt;Sofort iDeal project password&lt;/p&gt;  (optional)</param>
        /// <param name="idealNotificationPassword">&lt;p&gt;Sofort iDeal notification password&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSofort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSofort>> PATCHAcquirersSofortFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, int? customerNumber, int? projectId, string apiKey, bool? gateway = null, bool? ideal = null, int? idealProjectId = null, string idealProjectPassword = null, string idealNotificationPassword = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'customerNumber' is set
            if (customerNumber == null)
                throw new ApiException(400, "Missing required parameter 'customerNumber' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'projectId' is set
            if (projectId == null)
                throw new ApiException(400, "Missing required parameter 'projectId' when calling AcquirersApi->PATCHAcquirersSofortFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersSofortFormat");

            var localVarPath = "/acquirers/sofort";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (customerNumber != null) localVarFormParams.Add("customer_number", this.Configuration.ApiClient.ParameterToString(customerNumber)); // form parameter
            if (projectId != null) localVarFormParams.Add("project_id", this.Configuration.ApiClient.ParameterToString(projectId)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter
            if (gateway != null) localVarFormParams.Add("gateway", this.Configuration.ApiClient.ParameterToString(gateway)); // form parameter
            if (ideal != null) localVarFormParams.Add("ideal", this.Configuration.ApiClient.ParameterToString(ideal)); // form parameter
            if (idealProjectId != null) localVarFormParams.Add("ideal_project_id", this.Configuration.ApiClient.ParameterToString(idealProjectId)); // form parameter
            if (idealProjectPassword != null) localVarFormParams.Add("ideal_project_password", this.Configuration.ApiClient.ParameterToString(idealProjectPassword)); // form parameter
            if (idealNotificationPassword != null) localVarFormParams.Add("ideal_notification_password", this.Configuration.ApiClient.ParameterToString(idealNotificationPassword)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSofortFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSofort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSofort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSofort)));
        }

        /// <summary>
        /// Update Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSwedbank</returns>
        public AcquirerSettingsSwedbank PATCHAcquirersSwedbankFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsSwedbank> localVarResponse = PATCHAcquirersSwedbankFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSwedbank</returns>
        public ApiResponse< AcquirerSettingsSwedbank > PATCHAcquirersSwedbankFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");

            var localVarPath = "/acquirers/swedbank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSwedbankFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwedbank>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwedbank) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwedbank)));
        }

        /// <summary>
        /// Update Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSwedbank</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSwedbank> PATCHAcquirersSwedbankFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsSwedbank> localVarResponse = await PATCHAcquirersSwedbankFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Swedbank acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swedbank payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Swedbank identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Swedbank)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Swedbank international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Swedbank)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwedbank)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwedbank>> PATCHAcquirersSwedbankFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersSwedbankFormat");

            var localVarPath = "/acquirers/swedbank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSwedbankFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwedbank>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwedbank) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwedbank)));
        }

        /// <summary>
        /// Update Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsSwish</returns>
        public AcquirerSettingsSwish PATCHAcquirersSwishFormat (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null)
        {
             ApiResponse<AcquirerSettingsSwish> localVarResponse = PATCHAcquirersSwishFormatWithHttpInfo(acceptVersion, authorization, active, merchantId, cryptographyKeyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsSwish</returns>
        public ApiResponse< AcquirerSettingsSwish > PATCHAcquirersSwishFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling AcquirersApi->PATCHAcquirersSwishFormat");

            var localVarPath = "/acquirers/swish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (merchantId != null) localVarFormParams.Add("merchant_id", this.Configuration.ApiClient.ParameterToString(merchantId)); // form parameter
            if (cryptographyKeyId != null) localVarFormParams.Add("cryptography_key_id", this.Configuration.ApiClient.ParameterToString(cryptographyKeyId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSwishFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwish>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwish) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwish)));
        }

        /// <summary>
        /// Update Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsSwish</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsSwish> PATCHAcquirersSwishFormatAsync (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null)
        {
             ApiResponse<AcquirerSettingsSwish> localVarResponse = await PATCHAcquirersSwishFormatAsyncWithHttpInfo(acceptVersion, authorization, active, merchantId, cryptographyKeyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Swish acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Swish payments&lt;/p&gt; </param>
        /// <param name="merchantId">&lt;p&gt;Swish merchant id&lt;/p&gt; </param>
        /// <param name="cryptographyKeyId">&lt;p&gt;Swish certificate and private-key from Cryptography store&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsSwish)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsSwish>> PATCHAcquirersSwishFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string merchantId, int? cryptographyKeyId = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersSwishFormat");
            // verify the required parameter 'merchantId' is set
            if (merchantId == null)
                throw new ApiException(400, "Missing required parameter 'merchantId' when calling AcquirersApi->PATCHAcquirersSwishFormat");

            var localVarPath = "/acquirers/swish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (merchantId != null) localVarFormParams.Add("merchant_id", this.Configuration.ApiClient.ParameterToString(merchantId)); // form parameter
            if (cryptographyKeyId != null) localVarFormParams.Add("cryptography_key_id", this.Configuration.ApiClient.ParameterToString(cryptographyKeyId)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersSwishFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsSwish>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsSwish) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsSwish)));
        }

        /// <summary>
        /// Update Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsTeller</returns>
        public AcquirerSettingsTeller PATCHAcquirersTellerFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsTeller> localVarResponse = PATCHAcquirersTellerFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsTeller</returns>
        public ApiResponse< AcquirerSettingsTeller > PATCHAcquirersTellerFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersTellerFormat");

            var localVarPath = "/acquirers/teller";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersTellerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTeller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTeller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTeller)));
        }

        /// <summary>
        /// Update Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsTeller</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsTeller> PATCHAcquirersTellerFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsTeller> localVarResponse = await PATCHAcquirersTellerFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Teller acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Teller payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Teller TOF number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Teller)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Teller international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Teller)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection. (disabling requires agreement with Teller)&lt;/p&gt;  (optional, default to true)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;Teller VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Teller Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTeller)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTeller>> PATCHAcquirersTellerFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersTellerFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersTellerFormat");

            var localVarPath = "/acquirers/teller";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersTellerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTeller>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTeller) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTeller)));
        }

        /// <summary>
        /// Update Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsTrustly</returns>
        public AcquirerSettingsTrustly PATCHAcquirersTrustlyFormat (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password)
        {
             ApiResponse<AcquirerSettingsTrustly> localVarResponse = PATCHAcquirersTrustlyFormatWithHttpInfo(acceptVersion, authorization, active, ideal, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsTrustly</returns>
        public ApiResponse< AcquirerSettingsTrustly > PATCHAcquirersTrustlyFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'ideal' is set
            if (ideal == null)
                throw new ApiException(400, "Missing required parameter 'ideal' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");

            var localVarPath = "/acquirers/trustly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (ideal != null) localVarFormParams.Add("ideal", this.Configuration.ApiClient.ParameterToString(ideal)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersTrustlyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTrustly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTrustly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTrustly)));
        }

        /// <summary>
        /// Update Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsTrustly</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsTrustly> PATCHAcquirersTrustlyFormatAsync (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password)
        {
             ApiResponse<AcquirerSettingsTrustly> localVarResponse = await PATCHAcquirersTrustlyFormatAsyncWithHttpInfo(acceptVersion, authorization, active, ideal, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Trustly acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Trustly payments&lt;/p&gt; </param>
        /// <param name="ideal">&lt;p&gt;Enable iDeal payments&lt;/p&gt; </param>
        /// <param name="username">&lt;p&gt;Trustly API username&lt;/p&gt; </param>
        /// <param name="password">&lt;p&gt;Trustly API password&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsTrustly)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsTrustly>> PATCHAcquirersTrustlyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, bool? ideal, string username, string password)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'ideal' is set
            if (ideal == null)
                throw new ApiException(400, "Missing required parameter 'ideal' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AcquirersApi->PATCHAcquirersTrustlyFormat");

            var localVarPath = "/acquirers/trustly";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (ideal != null) localVarFormParams.Add("ideal", this.Configuration.ApiClient.ParameterToString(ideal)); // form parameter
            if (username != null) localVarFormParams.Add("username", this.Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", this.Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersTrustlyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsTrustly>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsTrustly) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsTrustly)));
        }

        /// <summary>
        /// Update Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsValitor</returns>
        public AcquirerSettingsValitor PATCHAcquirersValitorFormat (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsValitor> localVarResponse = PATCHAcquirersValitorFormatWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsValitor</returns>
        public ApiResponse< AcquirerSettingsValitor > PATCHAcquirersValitorFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersValitorFormat");

            var localVarPath = "/acquirers/valitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersValitorFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsValitor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsValitor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsValitor)));
        }

        /// <summary>
        /// Update Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsValitor</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsValitor> PATCHAcquirersValitorFormatAsync (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
             ApiResponse<AcquirerSettingsValitor> localVarResponse = await PATCHAcquirersValitorFormatAsyncWithHttpInfo(acceptVersion, authorization, active, identificationCode, businessCode, identificationCodeInt, recurring, americanexpress, dinersclub, securepay, visaMpiMerchantId, mastercardMpiMerchantId, visaBin, mastercardBin);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Valitor acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Valitor payments&lt;/p&gt; </param>
        /// <param name="identificationCode">&lt;p&gt;Valitor identification number&lt;/p&gt; </param>
        /// <param name="businessCode">&lt;p&gt;Business code (assigned by Valitor)&lt;/p&gt; </param>
        /// <param name="identificationCodeInt">&lt;p&gt;Valitor international identification number&lt;/p&gt;  (optional)</param>
        /// <param name="recurring">&lt;p&gt;Enable recurring payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="americanexpress">&lt;p&gt;Enable AMEX payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="dinersclub">&lt;p&gt;Enable Diners Club payments (requires agreement with Valitor)&lt;/p&gt;  (optional)</param>
        /// <param name="securepay">&lt;p&gt;Enable SecurePay fraud protection.&lt;/p&gt;  (optional)</param>
        /// <param name="visaMpiMerchantId">&lt;p&gt;VISA MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardMpiMerchantId">&lt;p&gt;Mastercard MPI merchant id. Used for 3D secure transactions&lt;/p&gt;  (optional)</param>
        /// <param name="visaBin">&lt;p&gt;VISA acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <param name="mastercardBin">&lt;p&gt;Mastercard acquirer bin used for 3D Secure&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsValitor)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsValitor>> PATCHAcquirersValitorFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string identificationCode, string businessCode, string identificationCodeInt = null, bool? recurring = null, bool? americanexpress = null, bool? dinersclub = null, bool? securepay = null, string visaMpiMerchantId = null, string mastercardMpiMerchantId = null, string visaBin = null, string mastercardBin = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'identificationCode' is set
            if (identificationCode == null)
                throw new ApiException(400, "Missing required parameter 'identificationCode' when calling AcquirersApi->PATCHAcquirersValitorFormat");
            // verify the required parameter 'businessCode' is set
            if (businessCode == null)
                throw new ApiException(400, "Missing required parameter 'businessCode' when calling AcquirersApi->PATCHAcquirersValitorFormat");

            var localVarPath = "/acquirers/valitor";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (identificationCode != null) localVarFormParams.Add("identification_code", this.Configuration.ApiClient.ParameterToString(identificationCode)); // form parameter
            if (identificationCodeInt != null) localVarFormParams.Add("identification_code_int", this.Configuration.ApiClient.ParameterToString(identificationCodeInt)); // form parameter
            if (businessCode != null) localVarFormParams.Add("business_code", this.Configuration.ApiClient.ParameterToString(businessCode)); // form parameter
            if (recurring != null) localVarFormParams.Add("recurring", this.Configuration.ApiClient.ParameterToString(recurring)); // form parameter
            if (americanexpress != null) localVarFormParams.Add("americanexpress", this.Configuration.ApiClient.ParameterToString(americanexpress)); // form parameter
            if (dinersclub != null) localVarFormParams.Add("dinersclub", this.Configuration.ApiClient.ParameterToString(dinersclub)); // form parameter
            if (securepay != null) localVarFormParams.Add("securepay", this.Configuration.ApiClient.ParameterToString(securepay)); // form parameter
            if (visaMpiMerchantId != null) localVarFormParams.Add("visa_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(visaMpiMerchantId)); // form parameter
            if (mastercardMpiMerchantId != null) localVarFormParams.Add("mastercard_mpi_merchant_id", this.Configuration.ApiClient.ParameterToString(mastercardMpiMerchantId)); // form parameter
            if (visaBin != null) localVarFormParams.Add("visa_bin", this.Configuration.ApiClient.ParameterToString(visaBin)); // form parameter
            if (mastercardBin != null) localVarFormParams.Add("mastercard_bin", this.Configuration.ApiClient.ParameterToString(mastercardBin)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersValitorFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsValitor>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsValitor) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsValitor)));
        }

        /// <summary>
        /// Update ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>AcquirerSettingsViaBill</returns>
        public AcquirerSettingsViaBill PATCHAcquirersViabillFormat (string acceptVersion, string authorization, bool? active, string apiKey)
        {
             ApiResponse<AcquirerSettingsViaBill> localVarResponse = PATCHAcquirersViabillFormatWithHttpInfo(acceptVersion, authorization, active, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerSettingsViaBill</returns>
        public ApiResponse< AcquirerSettingsViaBill > PATCHAcquirersViabillFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersViabillFormat");

            var localVarPath = "/acquirers/viabill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersViabillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsViaBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsViaBill) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsViaBill)));
        }

        /// <summary>
        /// Update ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>Task of AcquirerSettingsViaBill</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsViaBill> PATCHAcquirersViabillFormatAsync (string acceptVersion, string authorization, bool? active, string apiKey)
        {
             ApiResponse<AcquirerSettingsViaBill> localVarResponse = await PATCHAcquirersViabillFormatAsyncWithHttpInfo(acceptVersion, authorization, active, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update ViaBill acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable ViaBill payments&lt;/p&gt; </param>
        /// <param name="apiKey">&lt;p&gt;ViaBill API key&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerSettingsViaBill)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsViaBill>> PATCHAcquirersViabillFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string apiKey)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersViabillFormat");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling AcquirersApi->PATCHAcquirersViabillFormat");

            var localVarPath = "/acquirers/viabill";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (apiKey != null) localVarFormParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersViabillFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsViaBill>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsViaBill) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsViaBill)));
        }

        /// <summary>
        /// Update Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>AcquirerSettingsVipps</returns>
        public AcquirerSettingsVipps PATCHAcquirersVippsFormat (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null)
        {
             ApiResponse<AcquirerSettingsVipps> localVarResponse = PATCHAcquirersVippsFormatWithHttpInfo(acceptVersion, authorization, active, clientId, clientSecret, serialNumber, accessTokenSubscriptionKey, ecommerceSubscriptionKey, orgno);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of AcquirerSettingsVipps</returns>
        public ApiResponse< AcquirerSettingsVipps > PATCHAcquirersVippsFormatWithHttpInfo (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'accessTokenSubscriptionKey' is set
            if (accessTokenSubscriptionKey == null)
                throw new ApiException(400, "Missing required parameter 'accessTokenSubscriptionKey' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'ecommerceSubscriptionKey' is set
            if (ecommerceSubscriptionKey == null)
                throw new ApiException(400, "Missing required parameter 'ecommerceSubscriptionKey' when calling AcquirersApi->PATCHAcquirersVippsFormat");

            var localVarPath = "/acquirers/vipps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (serialNumber != null) localVarFormParams.Add("serial_number", this.Configuration.ApiClient.ParameterToString(serialNumber)); // form parameter
            if (accessTokenSubscriptionKey != null) localVarFormParams.Add("access_token_subscription_key", this.Configuration.ApiClient.ParameterToString(accessTokenSubscriptionKey)); // form parameter
            if (ecommerceSubscriptionKey != null) localVarFormParams.Add("ecommerce_subscription_key", this.Configuration.ApiClient.ParameterToString(ecommerceSubscriptionKey)); // form parameter
            if (orgno != null) localVarFormParams.Add("orgno", this.Configuration.ApiClient.ParameterToString(orgno)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersVippsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsVipps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsVipps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsVipps)));
        }

        /// <summary>
        /// Update Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>Task of AcquirerSettingsVipps</returns>
        public async System.Threading.Tasks.Task<AcquirerSettingsVipps> PATCHAcquirersVippsFormatAsync (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null)
        {
             ApiResponse<AcquirerSettingsVipps> localVarResponse = await PATCHAcquirersVippsFormatAsyncWithHttpInfo(acceptVersion, authorization, active, clientId, clientSecret, serialNumber, accessTokenSubscriptionKey, ecommerceSubscriptionKey, orgno);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Vipps acquirer settings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="active">&lt;p&gt;Enable Vipps payments&lt;/p&gt; </param>
        /// <param name="clientId">&lt;p&gt;Vipps OAuth Client ID&lt;/p&gt; </param>
        /// <param name="clientSecret">&lt;p&gt;Vipps OAuth Client Secret&lt;/p&gt; </param>
        /// <param name="serialNumber">&lt;p&gt;Vipps agreement serial&lt;/p&gt; </param>
        /// <param name="accessTokenSubscriptionKey">&lt;p&gt;Vipps Access-Token Subscription Key&lt;/p&gt; </param>
        /// <param name="ecommerceSubscriptionKey">&lt;p&gt;Vipps eCommerce Subscription Key&lt;/p&gt; </param>
        /// <param name="orgno">&lt;p&gt;Vipps companys organization number&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (AcquirerSettingsVipps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerSettingsVipps>> PATCHAcquirersVippsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, bool? active, string clientId, string clientSecret, string serialNumber, string accessTokenSubscriptionKey, string ecommerceSubscriptionKey, string orgno = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'active' is set
            if (active == null)
                throw new ApiException(400, "Missing required parameter 'active' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
                throw new ApiException(400, "Missing required parameter 'clientSecret' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'serialNumber' is set
            if (serialNumber == null)
                throw new ApiException(400, "Missing required parameter 'serialNumber' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'accessTokenSubscriptionKey' is set
            if (accessTokenSubscriptionKey == null)
                throw new ApiException(400, "Missing required parameter 'accessTokenSubscriptionKey' when calling AcquirersApi->PATCHAcquirersVippsFormat");
            // verify the required parameter 'ecommerceSubscriptionKey' is set
            if (ecommerceSubscriptionKey == null)
                throw new ApiException(400, "Missing required parameter 'ecommerceSubscriptionKey' when calling AcquirersApi->PATCHAcquirersVippsFormat");

            var localVarPath = "/acquirers/vipps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (active != null) localVarFormParams.Add("active", this.Configuration.ApiClient.ParameterToString(active)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", this.Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (clientSecret != null) localVarFormParams.Add("client_secret", this.Configuration.ApiClient.ParameterToString(clientSecret)); // form parameter
            if (serialNumber != null) localVarFormParams.Add("serial_number", this.Configuration.ApiClient.ParameterToString(serialNumber)); // form parameter
            if (accessTokenSubscriptionKey != null) localVarFormParams.Add("access_token_subscription_key", this.Configuration.ApiClient.ParameterToString(accessTokenSubscriptionKey)); // form parameter
            if (ecommerceSubscriptionKey != null) localVarFormParams.Add("ecommerce_subscription_key", this.Configuration.ApiClient.ParameterToString(ecommerceSubscriptionKey)); // form parameter
            if (orgno != null) localVarFormParams.Add("orgno", this.Configuration.ApiClient.ParameterToString(orgno)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAcquirersVippsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerSettingsVipps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerSettingsVipps) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerSettingsVipps)));
        }

        /// <summary>
        /// Test payments via acquirer  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>AcquirerTest</returns>
        public AcquirerTest POSTAcquirersAcquirerTestFormat (string acceptVersion, string authorization, string acquirer)
        {
             ApiResponse<AcquirerTest> localVarResponse = POSTAcquirersAcquirerTestFormatWithHttpInfo(acceptVersion, authorization, acquirer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test payments via acquirer  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>ApiResponse of AcquirerTest</returns>
        public ApiResponse< AcquirerTest > POSTAcquirersAcquirerTestFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");

            var localVarPath = "/acquirers/{acquirer}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTAcquirersAcquirerTestFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerTest)));
        }

        /// <summary>
        /// Test payments via acquirer  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>Task of AcquirerTest</returns>
        public async System.Threading.Tasks.Task<AcquirerTest> POSTAcquirersAcquirerTestFormatAsync (string acceptVersion, string authorization, string acquirer)
        {
             ApiResponse<AcquirerTest> localVarResponse = await POSTAcquirersAcquirerTestFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test payments via acquirer  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Acquirer name&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (AcquirerTest)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AcquirerTest>> POSTAcquirersAcquirerTestFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling AcquirersApi->POSTAcquirersAcquirerTestFormat");

            var localVarPath = "/acquirers/{acquirer}/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTAcquirersAcquirerTestFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AcquirerTest>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AcquirerTest) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AcquirerTest)));
        }

    }
}
