/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAgreementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns></returns>
        void DELETEAgreementsIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get agreements
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        Agreement GETAgreementsFormat (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null);

        /// <summary>
        /// Get agreements
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> GETAgreementsFormatWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null);
        /// <summary>
        /// Get agreement activity
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Activity</returns>
        Activity GETAgreementsIdActivityFormat (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get agreement activity
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse<Activity> GETAgreementsIdActivityFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Agreement</returns>
        Agreement GETAgreementsIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> GETAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Regenerate the API key for this agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Agreement</returns>
        Agreement PATCHAgreementsIdApiKeyFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Regenerate the API key for this agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> PATCHAgreementsIdApiKeyFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Update agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        Agreement PATCHAgreementsIdFormat (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null);

        /// <summary>
        /// Update agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> PATCHAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null);
        /// <summary>
        /// Create agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        Agreement POSTAgreementsFormat (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);

        /// <summary>
        /// Create agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> POSTAgreementsFormatWithHttpInfo (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);
        /// <summary>
        /// Replace agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        Agreement PUTAgreementsIdFormat (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);

        /// <summary>
        /// Replace agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        ApiResponse<Agreement> PUTAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get agreements
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> GETAgreementsFormatAsync (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null);

        /// <summary>
        /// Get agreements
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> GETAgreementsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null);
        /// <summary>
        /// Get agreement activity
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task<Activity> GETAgreementsIdActivityFormatAsync (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get agreement activity
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse<Activity>> GETAgreementsIdActivityFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> GETAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> GETAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Regenerate the API key for this agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> PATCHAgreementsIdApiKeyFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Regenerate the API key for this agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> PATCHAgreementsIdApiKeyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Update agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> PATCHAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null);

        /// <summary>
        /// Update agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> PATCHAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null);
        /// <summary>
        /// Create agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> POSTAgreementsFormatAsync (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);

        /// <summary>
        /// Create agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> POSTAgreementsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);
        /// <summary>
        /// Replace agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        System.Threading.Tasks.Task<Agreement> PUTAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);

        /// <summary>
        /// Replace agreement
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        System.Threading.Tasks.Task<ApiResponse<Agreement>> PUTAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AgreementsApi : IAgreementsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgreementsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgreementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgreementsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns></returns>
        public void DELETEAgreementsIdFormat (string acceptVersion, string authorization, int? id)
        {
             DELETEAgreementsIdFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->DELETEAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->DELETEAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->DELETEAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETEAgreementsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->DELETEAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->DELETEAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->DELETEAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get agreements  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        public Agreement GETAgreementsFormat (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null)
        {
             ApiResponse<Agreement> localVarResponse = GETAgreementsFormatWithHttpInfo(acceptVersion, authorization, page, pageSize, sortBy, sortDir, pageKey, support, service, me, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get agreements  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > GETAgreementsFormatWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsFormat");

            var localVarPath = "/agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (support != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "support", support)); // query parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (me != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "me", me)); // query parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_id", accountId)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Get agreements  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> GETAgreementsFormatAsync (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null)
        {
             ApiResponse<Agreement> localVarResponse = await GETAgreementsFormatAsyncWithHttpInfo(acceptVersion, authorization, page, pageSize, sortBy, sortDir, pageKey, support, service, me, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get agreements  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <param name="support">&lt;p&gt;Return only or filter out support agreements&lt;/p&gt;  (optional)</param>
        /// <param name="service">&lt;p&gt;Filter by system agreement service name&lt;/p&gt;  (optional)</param>
        /// <param name="me">&lt;p&gt;If set, only show the agreement of the caller&lt;/p&gt;  (optional)</param>
        /// <param name="accountId">&lt;p&gt;If set, shows agreements for another account if current account has access.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> GETAgreementsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, int? pageKey = null, bool? support = null, string service = null, bool? me = null, int? accountId = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsFormat");

            var localVarPath = "/agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (support != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "support", support)); // query parameter
            if (service != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "service", service)); // query parameter
            if (me != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "me", me)); // query parameter
            if (accountId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "account_id", accountId)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Get agreement activity  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Activity</returns>
        public Activity GETAgreementsIdActivityFormat (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Activity> localVarResponse = GETAgreementsIdActivityFormatWithHttpInfo(acceptVersion, authorization, id, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get agreement activity  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< Activity > GETAgreementsIdActivityFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsIdActivityFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsIdActivityFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->GETAgreementsIdActivityFormat");

            var localVarPath = "/agreements/{id}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsIdActivityFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Activity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Activity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
        }

        /// <summary>
        /// Get agreement activity  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task<Activity> GETAgreementsIdActivityFormatAsync (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Activity> localVarResponse = await GETAgreementsIdActivityFormatAsyncWithHttpInfo(acceptVersion, authorization, id, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get agreement activity  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Activity>> GETAgreementsIdActivityFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsIdActivityFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsIdActivityFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->GETAgreementsIdActivityFormat");

            var localVarPath = "/agreements/{id}/activity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsIdActivityFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Activity>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Activity) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity)));
        }

        /// <summary>
        /// Get agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Agreement</returns>
        public Agreement GETAgreementsIdFormat (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<Agreement> localVarResponse = GETAgreementsIdFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > GETAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->GETAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Get agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> GETAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<Agreement> localVarResponse = await GETAgreementsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> GETAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->GETAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->GETAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->GETAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Regenerate the API key for this agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Agreement</returns>
        public Agreement PATCHAgreementsIdApiKeyFormat (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<Agreement> localVarResponse = PATCHAgreementsIdApiKeyFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the API key for this agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > PATCHAgreementsIdApiKeyFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");

            var localVarPath = "/agreements/{id}/api-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAgreementsIdApiKeyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Regenerate the API key for this agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> PATCHAgreementsIdApiKeyFormatAsync (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<Agreement> localVarResponse = await PATCHAgreementsIdApiKeyFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate the API key for this agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> PATCHAgreementsIdApiKeyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PATCHAgreementsIdApiKeyFormat");

            var localVarPath = "/agreements/{id}/api-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAgreementsIdApiKeyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Update agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        public Agreement PATCHAgreementsIdFormat (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null)
        {
             ApiResponse<Agreement> localVarResponse = PATCHAgreementsIdFormatWithHttpInfo(acceptVersion, authorization, id, ipRestrictionAddress, owner, description);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > PATCHAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->PATCHAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Update agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> PATCHAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null)
        {
             ApiResponse<Agreement> localVarResponse = await PATCHAgreementsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, ipRestrictionAddress, owner, description);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> PATCHAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string ipRestrictionAddress, bool? owner = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PATCHAgreementsIdFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->PATCHAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Create agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        public Agreement POSTAgreementsFormat (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
             ApiResponse<Agreement> localVarResponse = POSTAgreementsFormatWithHttpInfo(acceptVersion, authorization, aclPermissionsResource, ipRestrictionAddress, userEmail, systemUser, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > POSTAgreementsFormatWithHttpInfo (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'aclPermissionsResource' is set
            if (aclPermissionsResource == null)
                throw new ApiException(400, "Missing required parameter 'aclPermissionsResource' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->POSTAgreementsFormat");

            var localVarPath = "/agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (userEmail != null) localVarFormParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (systemUser != null) localVarFormParams.Add("system_user", this.Configuration.ApiClient.ParameterToString(systemUser)); // form parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (aclPermissionsResource != null) localVarFormParams.Add("acl_permissions[][resource]", this.Configuration.ApiClient.ParameterToString(aclPermissionsResource)); // form parameter
            if (aclPermissionsGet != null) localVarFormParams.Add("acl_permissions[][get]", this.Configuration.ApiClient.ParameterToString(aclPermissionsGet)); // form parameter
            if (aclPermissionsPost != null) localVarFormParams.Add("acl_permissions[][post]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPost)); // form parameter
            if (aclPermissionsPut != null) localVarFormParams.Add("acl_permissions[][put]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPut)); // form parameter
            if (aclPermissionsDelete != null) localVarFormParams.Add("acl_permissions[][delete]", this.Configuration.ApiClient.ParameterToString(aclPermissionsDelete)); // form parameter
            if (aclPermissionsPatch != null) localVarFormParams.Add("acl_permissions[][patch]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPatch)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTAgreementsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Create agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> POSTAgreementsFormatAsync (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
             ApiResponse<Agreement> localVarResponse = await POSTAgreementsFormatAsyncWithHttpInfo(acceptVersion, authorization, aclPermissionsResource, ipRestrictionAddress, userEmail, systemUser, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="userEmail">&lt;p&gt;Email of the user to invite to this account. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="systemUser">&lt;p&gt;Create a new system user with this name. Only one of user_email and system_user can be specified.&lt;/p&gt;  (optional)</param>
        /// <param name="owner">&lt;p&gt;Is account owner. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> POSTAgreementsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string aclPermissionsResource, string ipRestrictionAddress, string userEmail = null, string systemUser = null, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'aclPermissionsResource' is set
            if (aclPermissionsResource == null)
                throw new ApiException(400, "Missing required parameter 'aclPermissionsResource' when calling AgreementsApi->POSTAgreementsFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->POSTAgreementsFormat");

            var localVarPath = "/agreements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (userEmail != null) localVarFormParams.Add("user_email", this.Configuration.ApiClient.ParameterToString(userEmail)); // form parameter
            if (systemUser != null) localVarFormParams.Add("system_user", this.Configuration.ApiClient.ParameterToString(systemUser)); // form parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (aclPermissionsResource != null) localVarFormParams.Add("acl_permissions[][resource]", this.Configuration.ApiClient.ParameterToString(aclPermissionsResource)); // form parameter
            if (aclPermissionsGet != null) localVarFormParams.Add("acl_permissions[][get]", this.Configuration.ApiClient.ParameterToString(aclPermissionsGet)); // form parameter
            if (aclPermissionsPost != null) localVarFormParams.Add("acl_permissions[][post]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPost)); // form parameter
            if (aclPermissionsPut != null) localVarFormParams.Add("acl_permissions[][put]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPut)); // form parameter
            if (aclPermissionsDelete != null) localVarFormParams.Add("acl_permissions[][delete]", this.Configuration.ApiClient.ParameterToString(aclPermissionsDelete)); // form parameter
            if (aclPermissionsPatch != null) localVarFormParams.Add("acl_permissions[][patch]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPatch)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTAgreementsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Replace agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Agreement</returns>
        public Agreement PUTAgreementsIdFormat (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
             ApiResponse<Agreement> localVarResponse = PUTAgreementsIdFormatWithHttpInfo(acceptVersion, authorization, id, aclPermissionsResource, ipRestrictionAddress, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Agreement</returns>
        public ApiResponse< Agreement > PUTAgreementsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'aclPermissionsResource' is set
            if (aclPermissionsResource == null)
                throw new ApiException(400, "Missing required parameter 'aclPermissionsResource' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->PUTAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (aclPermissionsResource != null) localVarFormParams.Add("acl_permissions[][resource]", this.Configuration.ApiClient.ParameterToString(aclPermissionsResource)); // form parameter
            if (aclPermissionsGet != null) localVarFormParams.Add("acl_permissions[][get]", this.Configuration.ApiClient.ParameterToString(aclPermissionsGet)); // form parameter
            if (aclPermissionsPost != null) localVarFormParams.Add("acl_permissions[][post]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPost)); // form parameter
            if (aclPermissionsPut != null) localVarFormParams.Add("acl_permissions[][put]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPut)); // form parameter
            if (aclPermissionsDelete != null) localVarFormParams.Add("acl_permissions[][delete]", this.Configuration.ApiClient.ParameterToString(aclPermissionsDelete)); // form parameter
            if (aclPermissionsPatch != null) localVarFormParams.Add("acl_permissions[][patch]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPatch)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

        /// <summary>
        /// Replace agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Agreement</returns>
        public async System.Threading.Tasks.Task<Agreement> PUTAgreementsIdFormatAsync (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
             ApiResponse<Agreement> localVarResponse = await PUTAgreementsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, aclPermissionsResource, ipRestrictionAddress, owner, description, aclPermissionsGet, aclPermissionsPost, aclPermissionsPut, aclPermissionsDelete, aclPermissionsPatch);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace agreement  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Agreement id&lt;/p&gt; </param>
        /// <param name="aclPermissionsResource">&lt;p&gt;Resource uri&lt;/p&gt; </param>
        /// <param name="ipRestrictionAddress">&lt;p&gt;IP address&lt;/p&gt; </param>
        /// <param name="owner">&lt;p&gt;Is account owner&lt;/p&gt;  (optional)</param>
        /// <param name="description">&lt;p&gt;Description of the account&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsGet">&lt;p&gt;Allow GET&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPost">&lt;p&gt;Allow POST&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPut">&lt;p&gt;Allow PUT&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsDelete">&lt;p&gt;Allow DELETE&lt;/p&gt;  (optional)</param>
        /// <param name="aclPermissionsPatch">&lt;p&gt;Allow PATCH&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Agreement)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Agreement>> PUTAgreementsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string aclPermissionsResource, string ipRestrictionAddress, bool? owner = null, string description = null, bool? aclPermissionsGet = null, bool? aclPermissionsPost = null, bool? aclPermissionsPut = null, bool? aclPermissionsDelete = null, bool? aclPermissionsPatch = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'aclPermissionsResource' is set
            if (aclPermissionsResource == null)
                throw new ApiException(400, "Missing required parameter 'aclPermissionsResource' when calling AgreementsApi->PUTAgreementsIdFormat");
            // verify the required parameter 'ipRestrictionAddress' is set
            if (ipRestrictionAddress == null)
                throw new ApiException(400, "Missing required parameter 'ipRestrictionAddress' when calling AgreementsApi->PUTAgreementsIdFormat");

            var localVarPath = "/agreements/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (owner != null) localVarFormParams.Add("owner", this.Configuration.ApiClient.ParameterToString(owner)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (aclPermissionsResource != null) localVarFormParams.Add("acl_permissions[][resource]", this.Configuration.ApiClient.ParameterToString(aclPermissionsResource)); // form parameter
            if (aclPermissionsGet != null) localVarFormParams.Add("acl_permissions[][get]", this.Configuration.ApiClient.ParameterToString(aclPermissionsGet)); // form parameter
            if (aclPermissionsPost != null) localVarFormParams.Add("acl_permissions[][post]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPost)); // form parameter
            if (aclPermissionsPut != null) localVarFormParams.Add("acl_permissions[][put]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPut)); // form parameter
            if (aclPermissionsDelete != null) localVarFormParams.Add("acl_permissions[][delete]", this.Configuration.ApiClient.ParameterToString(aclPermissionsDelete)); // form parameter
            if (aclPermissionsPatch != null) localVarFormParams.Add("acl_permissions[][patch]", this.Configuration.ApiClient.ParameterToString(aclPermissionsPatch)); // form parameter
            if (ipRestrictionAddress != null) localVarFormParams.Add("ip_restriction[][address]", this.Configuration.ApiClient.ParameterToString(ipRestrictionAddress)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTAgreementsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Agreement>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Agreement) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Agreement)));
        }

    }
}
