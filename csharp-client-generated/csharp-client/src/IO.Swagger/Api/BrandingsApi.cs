/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrandingsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns></returns>
        void DELETEBrandingsIdFormat (int? id);

        /// <summary>
        /// Delete a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEBrandingsIdFormatWithHttpInfo (int? id);
        /// <summary>
        /// Deletes a branding resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        void DELETEBrandingsIdresourceNameFormat (int? id, string resourceName = null);

        /// <summary>
        /// Deletes a branding resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEBrandingsIdresourceNameFormatWithHttpInfo (int? id, string resourceName = null);
        /// <summary>
        /// Get brandings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Branding</returns>
        Branding GETBrandingsFormat (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get brandings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>ApiResponse of Branding</returns>
        ApiResponse<Branding> GETBrandingsFormatWithHttpInfo (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        Branding GETBrandingsIdFormat (string acceptVersion, string authorization, int? id, string except = null, string only = null);

        /// <summary>
        /// Get a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        ApiResponse<Branding> GETBrandingsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null);
        /// <summary>
        /// Gets a branding resource as a file
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        void GETBrandingsIdresourceNameFormat (int? id, string resourceName = null);

        /// <summary>
        /// Gets a branding resource as a file
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GETBrandingsIdresourceNameFormatWithHttpInfo (int? id, string resourceName = null);
        /// <summary>
        /// Update a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        Branding PATCHBrandingsIdFormat (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null);

        /// <summary>
        /// Update a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        ApiResponse<Branding> PATCHBrandingsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null);
        /// <summary>
        /// Create a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Branding</returns>
        Branding POSTBrandingsFormat (string acceptVersion, string authorization, string name);

        /// <summary>
        /// Create a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>ApiResponse of Branding</returns>
        ApiResponse<Branding> POSTBrandingsFormatWithHttpInfo (string acceptVersion, string authorization, string name);
        /// <summary>
        /// Copies branding and returns the new branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        Branding POSTBrandingsIdCopyFormat (string acceptVersion, string authorization, int? id, string except = null, string only = null);

        /// <summary>
        /// Copies branding and returns the new branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        ApiResponse<Branding> POSTBrandingsIdCopyFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null);
        /// <summary>
        /// Uploads a file and creates or replaces a resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        void PUTBrandingsIdresourceNameFormat (string acceptVersion, string authorization, int? id, string _file, string resourceName = null);

        /// <summary>
        /// Uploads a file and creates or replaces a resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PUTBrandingsIdresourceNameFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string _file, string resourceName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEBrandingsIdFormatAsync (int? id);

        /// <summary>
        /// Delete a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEBrandingsIdFormatAsyncWithHttpInfo (int? id);
        /// <summary>
        /// Deletes a branding resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEBrandingsIdresourceNameFormatAsync (int? id, string resourceName = null);

        /// <summary>
        /// Deletes a branding resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEBrandingsIdresourceNameFormatAsyncWithHttpInfo (int? id, string resourceName = null);
        /// <summary>
        /// Get brandings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Task of Branding</returns>
        System.Threading.Tasks.Task<Branding> GETBrandingsFormatAsync (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get brandings
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branding>> GETBrandingsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Get a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        System.Threading.Tasks.Task<Branding> GETBrandingsIdFormatAsync (string acceptVersion, string authorization, int? id, string except = null, string only = null);

        /// <summary>
        /// Get a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branding>> GETBrandingsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null);
        /// <summary>
        /// Gets a branding resource as a file
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GETBrandingsIdresourceNameFormatAsync (int? id, string resourceName = null);

        /// <summary>
        /// Gets a branding resource as a file
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GETBrandingsIdresourceNameFormatAsyncWithHttpInfo (int? id, string resourceName = null);
        /// <summary>
        /// Update a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        System.Threading.Tasks.Task<Branding> PATCHBrandingsIdFormatAsync (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null);

        /// <summary>
        /// Update a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branding>> PATCHBrandingsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null);
        /// <summary>
        /// Create a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Task of Branding</returns>
        System.Threading.Tasks.Task<Branding> POSTBrandingsFormatAsync (string acceptVersion, string authorization, string name);

        /// <summary>
        /// Create a branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branding>> POSTBrandingsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string name);
        /// <summary>
        /// Copies branding and returns the new branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        System.Threading.Tasks.Task<Branding> POSTBrandingsIdCopyFormatAsync (string acceptVersion, string authorization, int? id, string except = null, string only = null);

        /// <summary>
        /// Copies branding and returns the new branding
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        System.Threading.Tasks.Task<ApiResponse<Branding>> POSTBrandingsIdCopyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null);
        /// <summary>
        /// Uploads a file and creates or replaces a resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PUTBrandingsIdresourceNameFormatAsync (string acceptVersion, string authorization, int? id, string _file, string resourceName = null);

        /// <summary>
        /// Uploads a file and creates or replaces a resource
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PUTBrandingsIdresourceNameFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string _file, string resourceName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrandingsApi : IBrandingsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrandingsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrandingsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrandingsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns></returns>
        public void DELETEBrandingsIdFormat (int? id)
        {
             DELETEBrandingsIdFormatWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEBrandingsIdFormatWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->DELETEBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEBrandingsIdFormatAsync (int? id)
        {
             await DELETEBrandingsIdFormatAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEBrandingsIdFormatAsyncWithHttpInfo (int? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->DELETEBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a branding resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        public void DELETEBrandingsIdresourceNameFormat (int? id, string resourceName = null)
        {
             DELETEBrandingsIdresourceNameFormatWithHttpInfo(id, resourceName);
        }

        /// <summary>
        /// Deletes a branding resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEBrandingsIdresourceNameFormatWithHttpInfo (int? id, string resourceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->DELETEBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_name", resourceName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes a branding resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEBrandingsIdresourceNameFormatAsync (int? id, string resourceName = null)
        {
             await DELETEBrandingsIdresourceNameFormatAsyncWithHttpInfo(id, resourceName);

        }

        /// <summary>
        /// Deletes a branding resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEBrandingsIdresourceNameFormatAsyncWithHttpInfo (int? id, string resourceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->DELETEBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_name", resourceName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get brandings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Branding</returns>
        public Branding GETBrandingsFormat (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Branding> localVarResponse = GETBrandingsFormatWithHttpInfo(acceptVersion, authorization, except, only, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get brandings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>ApiResponse of Branding</returns>
        public ApiResponse< Branding > GETBrandingsFormatWithHttpInfo (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->GETBrandingsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->GETBrandingsFormat");

            var localVarPath = "/brandings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (except != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "except", except)); // query parameter
            if (only != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only", only)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Get brandings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Task of Branding</returns>
        public async System.Threading.Tasks.Task<Branding> GETBrandingsFormatAsync (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Branding> localVarResponse = await GETBrandingsFormatAsyncWithHttpInfo(acceptVersion, authorization, except, only, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get brandings  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to name)</param>
        /// <param name="sortDir">Sort direction  (optional, default to asc)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branding>> GETBrandingsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string except = null, string only = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->GETBrandingsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->GETBrandingsFormat");

            var localVarPath = "/brandings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (except != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "except", except)); // query parameter
            if (only != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only", only)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Get a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        public Branding GETBrandingsIdFormat (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = GETBrandingsIdFormatWithHttpInfo(acceptVersion, authorization, id, except, only);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        public ApiResponse< Branding > GETBrandingsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->GETBrandingsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->GETBrandingsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->GETBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (except != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "except", except)); // query parameter
            if (only != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only", only)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Get a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        public async System.Threading.Tasks.Task<Branding> GETBrandingsIdFormatAsync (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = await GETBrandingsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, except, only);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branding>> GETBrandingsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->GETBrandingsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->GETBrandingsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->GETBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (except != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "except", except)); // query parameter
            if (only != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "only", only)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Gets a branding resource as a file  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        public void GETBrandingsIdresourceNameFormat (int? id, string resourceName = null)
        {
             GETBrandingsIdresourceNameFormatWithHttpInfo(id, resourceName);
        }

        /// <summary>
        /// Gets a branding resource as a file  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GETBrandingsIdresourceNameFormatWithHttpInfo (int? id, string resourceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->GETBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_name", resourceName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets a branding resource as a file  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GETBrandingsIdresourceNameFormatAsync (int? id, string resourceName = null)
        {
             await GETBrandingsIdresourceNameFormatAsyncWithHttpInfo(id, resourceName);

        }

        /// <summary>
        /// Gets a branding resource as a file  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Branding id </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GETBrandingsIdresourceNameFormatAsyncWithHttpInfo (int? id, string resourceName = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->GETBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (resourceName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resource_name", resourceName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        public Branding PATCHBrandingsIdFormat (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = PATCHBrandingsIdFormatWithHttpInfo(acceptVersion, authorization, id, name, except, only);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        public ApiResponse< Branding > PATCHBrandingsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->PATCHBrandingsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->PATCHBrandingsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->PATCHBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (except != null) localVarFormParams.Add("except", this.Configuration.ApiClient.ParameterToString(except)); // form parameter
            if (only != null) localVarFormParams.Add("only", this.Configuration.ApiClient.ParameterToString(only)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Update a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        public async System.Threading.Tasks.Task<Branding> PATCHBrandingsIdFormatAsync (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = await PATCHBrandingsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, name, except, only);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="name">Descriptive name of the branding  (optional)</param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branding>> PATCHBrandingsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string name = null, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->PATCHBrandingsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->PATCHBrandingsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->PATCHBrandingsIdFormat");

            var localVarPath = "/brandings/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (except != null) localVarFormParams.Add("except", this.Configuration.ApiClient.ParameterToString(except)); // form parameter
            if (only != null) localVarFormParams.Add("only", this.Configuration.ApiClient.ParameterToString(only)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHBrandingsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Create a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Branding</returns>
        public Branding POSTBrandingsFormat (string acceptVersion, string authorization, string name)
        {
             ApiResponse<Branding> localVarResponse = POSTBrandingsFormatWithHttpInfo(acceptVersion, authorization, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>ApiResponse of Branding</returns>
        public ApiResponse< Branding > POSTBrandingsFormatWithHttpInfo (string acceptVersion, string authorization, string name)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->POSTBrandingsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->POSTBrandingsFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BrandingsApi->POSTBrandingsFormat");

            var localVarPath = "/brandings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTBrandingsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Create a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Task of Branding</returns>
        public async System.Threading.Tasks.Task<Branding> POSTBrandingsFormatAsync (string acceptVersion, string authorization, string name)
        {
             ApiResponse<Branding> localVarResponse = await POSTBrandingsFormatAsyncWithHttpInfo(acceptVersion, authorization, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="name">Descriptive name of the branding </param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branding>> POSTBrandingsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string name)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->POSTBrandingsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->POSTBrandingsFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling BrandingsApi->POSTBrandingsFormat");

            var localVarPath = "/brandings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTBrandingsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Copies branding and returns the new branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Branding</returns>
        public Branding POSTBrandingsIdCopyFormat (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = POSTBrandingsIdCopyFormatWithHttpInfo(acceptVersion, authorization, id, except, only);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Copies branding and returns the new branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>ApiResponse of Branding</returns>
        public ApiResponse< Branding > POSTBrandingsIdCopyFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->POSTBrandingsIdCopyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->POSTBrandingsIdCopyFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->POSTBrandingsIdCopyFormat");

            var localVarPath = "/brandings/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (except != null) localVarFormParams.Add("except", this.Configuration.ApiClient.ParameterToString(except)); // form parameter
            if (only != null) localVarFormParams.Add("only", this.Configuration.ApiClient.ParameterToString(only)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTBrandingsIdCopyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Copies branding and returns the new branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of Branding</returns>
        public async System.Threading.Tasks.Task<Branding> POSTBrandingsIdCopyFormatAsync (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
             ApiResponse<Branding> localVarResponse = await POSTBrandingsIdCopyFormatAsyncWithHttpInfo(acceptVersion, authorization, id, except, only);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Copies branding and returns the new branding  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="except">Specifies which attributes to skip. Default is ‘resources.data’  (optional)</param>
        /// <param name="only">Specifies which attributes to include. (Overrides except default)  (optional)</param>
        /// <returns>Task of ApiResponse (Branding)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Branding>> POSTBrandingsIdCopyFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string except = null, string only = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->POSTBrandingsIdCopyFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->POSTBrandingsIdCopyFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->POSTBrandingsIdCopyFormat");

            var localVarPath = "/brandings/{id}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (except != null) localVarFormParams.Add("except", this.Configuration.ApiClient.ParameterToString(except)); // form parameter
            if (only != null) localVarFormParams.Add("only", this.Configuration.ApiClient.ParameterToString(only)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTBrandingsIdCopyFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Branding>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Branding) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Branding)));
        }

        /// <summary>
        /// Uploads a file and creates or replaces a resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns></returns>
        public void PUTBrandingsIdresourceNameFormat (string acceptVersion, string authorization, int? id, string _file, string resourceName = null)
        {
             PUTBrandingsIdresourceNameFormatWithHttpInfo(acceptVersion, authorization, id, _file, resourceName);
        }

        /// <summary>
        /// Uploads a file and creates or replaces a resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PUTBrandingsIdresourceNameFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string _file, string resourceName = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (_file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(_file)); // form parameter
            if (resourceName != null) localVarFormParams.Add("resource_name", this.Configuration.ApiClient.ParameterToString(resourceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Uploads a file and creates or replaces a resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PUTBrandingsIdresourceNameFormatAsync (string acceptVersion, string authorization, int? id, string _file, string resourceName = null)
        {
             await PUTBrandingsIdresourceNameFormatAsyncWithHttpInfo(acceptVersion, authorization, id, _file, resourceName);

        }

        /// <summary>
        /// Uploads a file and creates or replaces a resource  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Branding id </param>
        /// <param name="_file">The file send as multipart </param>
        /// <param name="resourceName">  (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PUTBrandingsIdresourceNameFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string _file, string resourceName = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling BrandingsApi->PUTBrandingsIdresourceNameFormat");

            var localVarPath = "/brandings/{id}/*resource_name";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (_file != null) localVarFormParams.Add("file", this.Configuration.ApiClient.ParameterToString(_file)); // form parameter
            if (resourceName != null) localVarFormParams.Add("resource_name", this.Configuration.ApiClient.ParameterToString(resourceName)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTBrandingsIdresourceNameFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
