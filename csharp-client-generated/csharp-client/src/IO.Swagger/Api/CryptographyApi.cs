/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptographyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        void DELETECryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETECryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        void DELETECryptographyKeysIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETECryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get keys
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>MerchantCryptographyKey</returns>
        MerchantCryptographyKey GETCryptographyKeysFormat (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null);

        /// <summary>
        /// Get keys
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        ApiResponse<MerchantCryptographyKey> GETCryptographyKeysFormatWithHttpInfo (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null);
        /// <summary>
        /// Get certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        void GETCryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GETCryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>MerchantCryptographyKey</returns>
        MerchantCryptographyKey GETCryptographyKeysIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        ApiResponse<MerchantCryptographyKey> GETCryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// update key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>MerchantCryptographyKey</returns>
        MerchantCryptographyKey PATCHCryptographyKeysIdFormat (string acceptVersion, string authorization, int? id, string shortDescription = null);

        /// <summary>
        /// update key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        ApiResponse<MerchantCryptographyKey> PATCHCryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string shortDescription = null);
        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>MerchantCryptographyKey</returns>
        MerchantCryptographyKey POSTCryptographyKeysFormat (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve);

        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        ApiResponse<MerchantCryptographyKey> POSTCryptographyKeysFormatWithHttpInfo (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve);
        /// <summary>
        /// Create certificate request (CSR)
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns></returns>
        void POSTCryptographyKeysIdCsrFormat (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding);

        /// <summary>
        /// Create certificate request (CSR)
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> POSTCryptographyKeysIdCsrFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding);
        /// <summary>
        /// Replace certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns></returns>
        void PUTCryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id, System.IO.Stream _file);

        /// <summary>
        /// Replace certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PUTCryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id, System.IO.Stream _file);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETECryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETECryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETECryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETECryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get keys
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        System.Threading.Tasks.Task<MerchantCryptographyKey> GETCryptographyKeysFormatAsync (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null);

        /// <summary>
        /// Get keys
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> GETCryptographyKeysFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null);
        /// <summary>
        /// Get certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GETCryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GETCryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        System.Threading.Tasks.Task<MerchantCryptographyKey> GETCryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> GETCryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// update key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        System.Threading.Tasks.Task<MerchantCryptographyKey> PATCHCryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id, string shortDescription = null);

        /// <summary>
        /// update key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> PATCHCryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string shortDescription = null);
        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        System.Threading.Tasks.Task<MerchantCryptographyKey> POSTCryptographyKeysFormatAsync (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve);

        /// <summary>
        /// Create key
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> POSTCryptographyKeysFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve);
        /// <summary>
        /// Create certificate request (CSR)
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task POSTCryptographyKeysIdCsrFormatAsync (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding);

        /// <summary>
        /// Create certificate request (CSR)
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> POSTCryptographyKeysIdCsrFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding);
        /// <summary>
        /// Replace certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PUTCryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id, System.IO.Stream _file);

        /// <summary>
        /// Replace certificate
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PUTCryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, System.IO.Stream _file);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CryptographyApi : ICryptographyApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptographyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptographyApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptographyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CryptographyApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        public void DELETECryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id)
        {
             DELETECryptographyKeysIdCertificateFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETECryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETECryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETECryptographyKeysIdCertificateFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETECryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->DELETECryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        public void DELETECryptographyKeysIdFormat (string acceptVersion, string authorization, int? id)
        {
             DELETECryptographyKeysIdFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETECryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->DELETECryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->DELETECryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->DELETECryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETECryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETECryptographyKeysIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETECryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->DELETECryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->DELETECryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->DELETECryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETECryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get keys  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>MerchantCryptographyKey</returns>
        public MerchantCryptographyKey GETCryptographyKeysFormat (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = GETCryptographyKeysFormatWithHttpInfo(acceptVersion, authorization, type, query, sortBy, sortDir, pageSize, pageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get keys  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        public ApiResponse< MerchantCryptographyKey > GETCryptographyKeysFormatWithHttpInfo (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysFormat");

            var localVarPath = "/cryptography/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Get keys  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        public async System.Threading.Tasks.Task<MerchantCryptographyKey> GETCryptographyKeysFormatAsync (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = await GETCryptographyKeysFormatAsyncWithHttpInfo(acceptVersion, authorization, type, query, sortBy, sortDir, pageSize, pageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get keys  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type">  (optional)</param>
        /// <param name="query">  (optional)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> GETCryptographyKeysFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string type = null, string query = null, string sortBy = null, string sortDir = null, int? pageSize = null, int? pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysFormat");

            var localVarPath = "/cryptography/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (query != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "query", query)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Get certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns></returns>
        public void GETCryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id)
        {
             GETCryptographyKeysIdCertificateFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Get certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GETCryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GETCryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await GETCryptographyKeysIdCertificateFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Get certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GETCryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->GETCryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>MerchantCryptographyKey</returns>
        public MerchantCryptographyKey GETCryptographyKeysIdFormat (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = GETCryptographyKeysIdFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        public ApiResponse< MerchantCryptographyKey > GETCryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->GETCryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Get key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        public async System.Threading.Tasks.Task<MerchantCryptographyKey> GETCryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = await GETCryptographyKeysIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> GETCryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->GETCryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->GETCryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->GETCryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETCryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// update key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>MerchantCryptographyKey</returns>
        public MerchantCryptographyKey PATCHCryptographyKeysIdFormat (string acceptVersion, string authorization, int? id, string shortDescription = null)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = PATCHCryptographyKeysIdFormatWithHttpInfo(acceptVersion, authorization, id, shortDescription);
             return localVarResponse.Data;
        }

        /// <summary>
        /// update key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        public ApiResponse< MerchantCryptographyKey > PATCHCryptographyKeysIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string shortDescription = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shortDescription != null) localVarFormParams.Add("short_description", this.Configuration.ApiClient.ParameterToString(shortDescription)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHCryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// update key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        public async System.Threading.Tasks.Task<MerchantCryptographyKey> PATCHCryptographyKeysIdFormatAsync (string acceptVersion, string authorization, int? id, string shortDescription = null)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = await PATCHCryptographyKeysIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, shortDescription);
             return localVarResponse.Data;

        }

        /// <summary>
        /// update key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="shortDescription">  (optional)</param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> PATCHCryptographyKeysIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string shortDescription = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->PATCHCryptographyKeysIdFormat");

            var localVarPath = "/cryptography/keys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shortDescription != null) localVarFormParams.Add("short_description", this.Configuration.ApiClient.ParameterToString(shortDescription)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHCryptographyKeysIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Create key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>MerchantCryptographyKey</returns>
        public MerchantCryptographyKey POSTCryptographyKeysFormat (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = POSTCryptographyKeysFormatWithHttpInfo(acceptVersion, authorization, type, shortDescription, keySize, curve);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>ApiResponse of MerchantCryptographyKey</returns>
        public ApiResponse< MerchantCryptographyKey > POSTCryptographyKeysFormatWithHttpInfo (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'shortDescription' is set
            if (shortDescription == null)
                throw new ApiException(400, "Missing required parameter 'shortDescription' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'keySize' is set
            if (keySize == null)
                throw new ApiException(400, "Missing required parameter 'keySize' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'curve' is set
            if (curve == null)
                throw new ApiException(400, "Missing required parameter 'curve' when calling CryptographyApi->POSTCryptographyKeysFormat");

            var localVarPath = "/cryptography/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (shortDescription != null) localVarFormParams.Add("short_description", this.Configuration.ApiClient.ParameterToString(shortDescription)); // form parameter
            if (keySize != null) localVarFormParams.Add("key_size", this.Configuration.ApiClient.ParameterToString(keySize)); // form parameter
            if (curve != null) localVarFormParams.Add("curve", this.Configuration.ApiClient.ParameterToString(curve)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCryptographyKeysFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Create key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>Task of MerchantCryptographyKey</returns>
        public async System.Threading.Tasks.Task<MerchantCryptographyKey> POSTCryptographyKeysFormatAsync (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve)
        {
             ApiResponse<MerchantCryptographyKey> localVarResponse = await POSTCryptographyKeysFormatAsyncWithHttpInfo(acceptVersion, authorization, type, shortDescription, keySize, curve);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create key  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="type"> </param>
        /// <param name="shortDescription"> </param>
        /// <param name="keySize"> </param>
        /// <param name="curve"> </param>
        /// <returns>Task of ApiResponse (MerchantCryptographyKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MerchantCryptographyKey>> POSTCryptographyKeysFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string type, string shortDescription, int? keySize, string curve)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'shortDescription' is set
            if (shortDescription == null)
                throw new ApiException(400, "Missing required parameter 'shortDescription' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'keySize' is set
            if (keySize == null)
                throw new ApiException(400, "Missing required parameter 'keySize' when calling CryptographyApi->POSTCryptographyKeysFormat");
            // verify the required parameter 'curve' is set
            if (curve == null)
                throw new ApiException(400, "Missing required parameter 'curve' when calling CryptographyApi->POSTCryptographyKeysFormat");

            var localVarPath = "/cryptography/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (type != null) localVarFormParams.Add("type", this.Configuration.ApiClient.ParameterToString(type)); // form parameter
            if (shortDescription != null) localVarFormParams.Add("short_description", this.Configuration.ApiClient.ParameterToString(shortDescription)); // form parameter
            if (keySize != null) localVarFormParams.Add("key_size", this.Configuration.ApiClient.ParameterToString(keySize)); // form parameter
            if (curve != null) localVarFormParams.Add("curve", this.Configuration.ApiClient.ParameterToString(curve)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCryptographyKeysFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MerchantCryptographyKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MerchantCryptographyKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MerchantCryptographyKey)));
        }

        /// <summary>
        /// Create certificate request (CSR)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns></returns>
        public void POSTCryptographyKeysIdCsrFormat (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding)
        {
             POSTCryptographyKeysIdCsrFormatWithHttpInfo(acceptVersion, authorization, id, subjectKey, subjectValue, subjectEncoding);
        }

        /// <summary>
        /// Create certificate request (CSR)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> POSTCryptographyKeysIdCsrFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectKey' is set
            if (subjectKey == null)
                throw new ApiException(400, "Missing required parameter 'subjectKey' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectValue' is set
            if (subjectValue == null)
                throw new ApiException(400, "Missing required parameter 'subjectValue' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectEncoding' is set
            if (subjectEncoding == null)
                throw new ApiException(400, "Missing required parameter 'subjectEncoding' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");

            var localVarPath = "/cryptography/keys/{id}/csr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (subjectKey != null) localVarFormParams.Add("subject[][key]", this.Configuration.ApiClient.ParameterToString(subjectKey)); // form parameter
            if (subjectValue != null) localVarFormParams.Add("subject[][value]", this.Configuration.ApiClient.ParameterToString(subjectValue)); // form parameter
            if (subjectEncoding != null) localVarFormParams.Add("subject[][encoding]", this.Configuration.ApiClient.ParameterToString(subjectEncoding)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCryptographyKeysIdCsrFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create certificate request (CSR)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task POSTCryptographyKeysIdCsrFormatAsync (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding)
        {
             await POSTCryptographyKeysIdCsrFormatAsyncWithHttpInfo(acceptVersion, authorization, id, subjectKey, subjectValue, subjectEncoding);

        }

        /// <summary>
        /// Create certificate request (CSR)  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="subjectKey"> </param>
        /// <param name="subjectValue"> </param>
        /// <param name="subjectEncoding"> </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> POSTCryptographyKeysIdCsrFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string subjectKey, string subjectValue, string subjectEncoding)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectKey' is set
            if (subjectKey == null)
                throw new ApiException(400, "Missing required parameter 'subjectKey' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectValue' is set
            if (subjectValue == null)
                throw new ApiException(400, "Missing required parameter 'subjectValue' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");
            // verify the required parameter 'subjectEncoding' is set
            if (subjectEncoding == null)
                throw new ApiException(400, "Missing required parameter 'subjectEncoding' when calling CryptographyApi->POSTCryptographyKeysIdCsrFormat");

            var localVarPath = "/cryptography/keys/{id}/csr";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (subjectKey != null) localVarFormParams.Add("subject[][key]", this.Configuration.ApiClient.ParameterToString(subjectKey)); // form parameter
            if (subjectValue != null) localVarFormParams.Add("subject[][value]", this.Configuration.ApiClient.ParameterToString(subjectValue)); // form parameter
            if (subjectEncoding != null) localVarFormParams.Add("subject[][encoding]", this.Configuration.ApiClient.ParameterToString(subjectEncoding)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTCryptographyKeysIdCsrFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Replace certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns></returns>
        public void PUTCryptographyKeysIdCertificateFormat (string acceptVersion, string authorization, int? id, System.IO.Stream _file)
        {
             PUTCryptographyKeysIdCertificateFormatWithHttpInfo(acceptVersion, authorization, id, _file);
        }

        /// <summary>
        /// Replace certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PUTCryptographyKeysIdCertificateFormatWithHttpInfo (string acceptVersion, string authorization, int? id, System.IO.Stream _file)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTCryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Replace certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PUTCryptographyKeysIdCertificateFormatAsync (string acceptVersion, string authorization, int? id, System.IO.Stream _file)
        {
             await PUTCryptographyKeysIdCertificateFormatAsyncWithHttpInfo(acceptVersion, authorization, id, _file);

        }

        /// <summary>
        /// Replace certificate  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id"> </param>
        /// <param name="_file">The file send as multipart </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PUTCryptographyKeysIdCertificateFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, System.IO.Stream _file)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");
            // verify the required parameter '_file' is set
            if (_file == null)
                throw new ApiException(400, "Missing required parameter '_file' when calling CryptographyApi->PUTCryptographyKeysIdCertificateFormat");

            var localVarPath = "/cryptography/keys/{id}/certificate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (_file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", _file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTCryptographyKeysIdCertificateFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
