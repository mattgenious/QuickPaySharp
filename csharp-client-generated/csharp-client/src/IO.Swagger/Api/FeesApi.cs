/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFeesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Reset a formula to default
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns></returns>
        void DELETEFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod);

        /// <summary>
        /// Reset a formula to default
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod);
        /// <summary>
        /// Get fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>FeeFormula</returns>
        FeeFormula GETFeesFormulasAcquirerFormat (string acceptVersion, string authorization, string acquirer);

        /// <summary>
        /// Get fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>ApiResponse of FeeFormula</returns>
        ApiResponse<FeeFormula> GETFeesFormulasAcquirerFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer);
        /// <summary>
        /// Get fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>FeeFormula</returns>
        FeeFormula GETFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod);

        /// <summary>
        /// Get fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>ApiResponse of FeeFormula</returns>
        ApiResponse<FeeFormula> GETFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod);
        /// <summary>
        /// Get all fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>FeeFormula</returns>
        FeeFormula GETFeesFormulasFormat (string acceptVersion, string authorization, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get all fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>ApiResponse of FeeFormula</returns>
        ApiResponse<FeeFormula> GETFeesFormulasFormatWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null);
        /// <summary>
        /// Update a fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>FeeFormula</returns>
        FeeFormula PATCHFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null);

        /// <summary>
        /// Update a fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of FeeFormula</returns>
        ApiResponse<FeeFormula> PATCHFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null);
        /// <summary>
        /// Calculate fee
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>CalculatedFee</returns>
        CalculatedFee POSTFeesAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount);

        /// <summary>
        /// Calculate fee
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>ApiResponse of CalculatedFee</returns>
        ApiResponse<CalculatedFee> POSTFeesAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount);
        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>CalculatedFee</returns>
        CalculatedFee POSTFeesFormat (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null);

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of CalculatedFee</returns>
        ApiResponse<CalculatedFee> POSTFeesFormatWithHttpInfo (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Reset a formula to default
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod);

        /// <summary>
        /// Reset a formula to default
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod);
        /// <summary>
        /// Get fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>Task of FeeFormula</returns>
        System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasAcquirerFormatAsync (string acceptVersion, string authorization, string acquirer);

        /// <summary>
        /// Get fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasAcquirerFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer);
        /// <summary>
        /// Get fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of FeeFormula</returns>
        System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod);

        /// <summary>
        /// Get fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod);
        /// <summary>
        /// Get all fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>Task of FeeFormula</returns>
        System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasFormatAsync (string acceptVersion, string authorization, int? page = null, int? pageSize = null);

        /// <summary>
        /// Get all fee formulas
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null);
        /// <summary>
        /// Update a fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>Task of FeeFormula</returns>
        System.Threading.Tasks.Task<FeeFormula> PATCHFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null);

        /// <summary>
        /// Update a fee formula
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeeFormula>> PATCHFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null);
        /// <summary>
        /// Calculate fee
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>Task of CalculatedFee</returns>
        System.Threading.Tasks.Task<CalculatedFee> POSTFeesAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount);

        /// <summary>
        /// Calculate fee
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (CalculatedFee)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculatedFee>> POSTFeesAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount);
        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>Task of CalculatedFee</returns>
        System.Threading.Tasks.Task<CalculatedFee> POSTFeesFormatAsync (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null);

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (CalculatedFee)</returns>
        System.Threading.Tasks.Task<ApiResponse<CalculatedFee>> POSTFeesFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FeesApi : IFeesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FeesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FeesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FeesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Reset a formula to default  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns></returns>
        public void DELETEFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
             DELETEFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod);
        }

        /// <summary>
        /// Reset a formula to default  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Reset a formula to default  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
             await DELETEFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod);

        }

        /// <summary>
        /// Reset a formula to default  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->DELETEFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>FeeFormula</returns>
        public FeeFormula GETFeesFormulasAcquirerFormat (string acceptVersion, string authorization, string acquirer)
        {
             ApiResponse<FeeFormula> localVarResponse = GETFeesFormulasAcquirerFormatWithHttpInfo(acceptVersion, authorization, acquirer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>ApiResponse of FeeFormula</returns>
        public ApiResponse< FeeFormula > GETFeesFormulasAcquirerFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasAcquirerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasAcquirerFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->GETFeesFormulasAcquirerFormat");

            var localVarPath = "/fees/formulas/{acquirer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasAcquirerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Get fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>Task of FeeFormula</returns>
        public async System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasAcquirerFormatAsync (string acceptVersion, string authorization, string acquirer)
        {
             ApiResponse<FeeFormula> localVarResponse = await GETFeesFormulasAcquirerFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasAcquirerFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasAcquirerFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasAcquirerFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->GETFeesFormulasAcquirerFormat");

            var localVarPath = "/fees/formulas/{acquirer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasAcquirerFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Get fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>FeeFormula</returns>
        public FeeFormula GETFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
             ApiResponse<FeeFormula> localVarResponse = GETFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>ApiResponse of FeeFormula</returns>
        public ApiResponse< FeeFormula > GETFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Get fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of FeeFormula</returns>
        public async System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
             ApiResponse<FeeFormula> localVarResponse = await GETFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->GETFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Get all fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>FeeFormula</returns>
        public FeeFormula GETFeesFormulasFormat (string acceptVersion, string authorization, int? page = null, int? pageSize = null)
        {
             ApiResponse<FeeFormula> localVarResponse = GETFeesFormulasFormatWithHttpInfo(acceptVersion, authorization, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>ApiResponse of FeeFormula</returns>
        public ApiResponse< FeeFormula > GETFeesFormulasFormatWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasFormat");

            var localVarPath = "/fees/formulas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Get all fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>Task of FeeFormula</returns>
        public async System.Threading.Tasks.Task<FeeFormula> GETFeesFormulasFormatAsync (string acceptVersion, string authorization, int? page = null, int? pageSize = null)
        {
             ApiResponse<FeeFormula> localVarResponse = await GETFeesFormulasFormatAsyncWithHttpInfo(acceptVersion, authorization, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all fee formulas  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeFormula>> GETFeesFormulasFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? page = null, int? pageSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->GETFeesFormulasFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->GETFeesFormulasFormat");

            var localVarPath = "/fees/formulas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFeesFormulasFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Update a fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>FeeFormula</returns>
        public FeeFormula PATCHFeesFormulasAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null)
        {
             ApiResponse<FeeFormula> localVarResponse = PATCHFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod, formula);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of FeeFormula</returns>
        public ApiResponse< FeeFormula > PATCHFeesFormulasAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (formula != null) localVarFormParams.Add("formula", this.Configuration.ApiClient.ParameterToString(formula)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Update a fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>Task of FeeFormula</returns>
        public async System.Threading.Tasks.Task<FeeFormula> PATCHFeesFormulasAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null)
        {
             ApiResponse<FeeFormula> localVarResponse = await PATCHFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod, formula);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a fee formula  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="formula">&lt;p&gt;The formula&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (FeeFormula)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeeFormula>> PATCHFeesFormulasAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, string formula = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->PATCHFeesFormulasAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/formulas/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (formula != null) localVarFormParams.Add("formula", this.Configuration.ApiClient.ParameterToString(formula)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHFeesFormulasAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeeFormula>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FeeFormula) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeeFormula)));
        }

        /// <summary>
        /// Calculate fee  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>CalculatedFee</returns>
        public CalculatedFee POSTFeesAcquirerPaymentMethodFormat (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount)
        {
             ApiResponse<CalculatedFee> localVarResponse = POSTFeesAcquirerPaymentMethodFormatWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod, amount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate fee  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>ApiResponse of CalculatedFee</returns>
        public ApiResponse< CalculatedFee > POSTFeesAcquirerPaymentMethodFormatWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFeesAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalculatedFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalculatedFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalculatedFee)));
        }

        /// <summary>
        /// Calculate fee  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>Task of CalculatedFee</returns>
        public async System.Threading.Tasks.Task<CalculatedFee> POSTFeesAcquirerPaymentMethodFormatAsync (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount)
        {
             ApiResponse<CalculatedFee> localVarResponse = await POSTFeesAcquirerPaymentMethodFormatAsyncWithHttpInfo(acceptVersion, authorization, acquirer, paymentMethod, amount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate fee  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="acquirer">&lt;p&gt;Name of acquirer&lt;/p&gt; </param>
        /// <param name="paymentMethod">&lt;p&gt;Payment method&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (CalculatedFee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalculatedFee>> POSTFeesAcquirerPaymentMethodFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string acquirer, string paymentMethod, int? amount)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'acquirer' is set
            if (acquirer == null)
                throw new ApiException(400, "Missing required parameter 'acquirer' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'paymentMethod' is set
            if (paymentMethod == null)
                throw new ApiException(400, "Missing required parameter 'paymentMethod' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling FeesApi->POSTFeesAcquirerPaymentMethodFormat");

            var localVarPath = "/fees/{acquirer}/{payment_method}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acquirer != null) localVarPathParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // path parameter
            if (paymentMethod != null) localVarPathParams.Add("payment_method", this.Configuration.ApiClient.ParameterToString(paymentMethod)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFeesAcquirerPaymentMethodFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalculatedFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalculatedFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalculatedFee)));
        }

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>CalculatedFee</returns>
        public CalculatedFee POSTFeesFormat (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null)
        {
             ApiResponse<CalculatedFee> localVarResponse = POSTFeesFormatWithHttpInfo(acceptVersion, authorization, amount, currency, cardApplePayToken, cardMobilepayOnlineToken, cardToken, cardNumber, cardBrand, acquirer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of CalculatedFee</returns>
        public ApiResponse< CalculatedFee > POSTFeesFormatWithHttpInfo (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->POSTFeesFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->POSTFeesFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling FeesApi->POSTFeesFormat");

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFeesFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalculatedFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalculatedFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalculatedFee)));
        }

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>Task of CalculatedFee</returns>
        public async System.Threading.Tasks.Task<CalculatedFee> POSTFeesFormatAsync (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null)
        {
             ApiResponse<CalculatedFee> localVarResponse = await POSTFeesFormatAsyncWithHttpInfo(acceptVersion, authorization, amount, currency, cardApplePayToken, cardMobilepayOnlineToken, cardToken, cardNumber, cardBrand, acquirer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Calculate fee for auth params. Requires one of card[number] or card[token]  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount specified in smallest unit&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (CalculatedFee)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CalculatedFee>> POSTFeesFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? amount, string currency = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardToken = null, string cardNumber = null, string cardBrand = null, string acquirer = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FeesApi->POSTFeesFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FeesApi->POSTFeesFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling FeesApi->POSTFeesFormat");

            var localVarPath = "/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFeesFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CalculatedFee>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CalculatedFee) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CalculatedFee)));
        }

    }
}
