/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFraudRulesetsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        FraudRuleset DELETEFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        ApiResponse<FraudRuleset> DELETEFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get custom defined fraud rulesets
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        FraudRuleset GETFraudRulesetsFormat (string acceptVersion, string authorization);

        /// <summary>
        /// Get custom defined fraud rulesets
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        ApiResponse<FraudRuleset> GETFraudRulesetsFormatWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get ruleset by id
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        FraudRuleset GETFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get ruleset by id
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        ApiResponse<FraudRuleset> GETFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Update a ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>FraudRuleset</returns>
        FraudRuleset PATCHFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null);

        /// <summary>
        /// Update a ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        ApiResponse<FraudRuleset> PATCHFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null);
        /// <summary>
        /// Create a custom fraud ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        FraudRuleset POSTFraudRulesetsFormat (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator);

        /// <summary>
        /// Create a custom fraud ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        ApiResponse<FraudRuleset> POSTFraudRulesetsFormatWithHttpInfo (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        System.Threading.Tasks.Task<FraudRuleset> DELETEFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> DELETEFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get custom defined fraud rulesets
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        System.Threading.Tasks.Task<FraudRuleset> GETFraudRulesetsFormatAsync (string acceptVersion, string authorization);

        /// <summary>
        /// Get custom defined fraud rulesets
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> GETFraudRulesetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization);
        /// <summary>
        /// Get ruleset by id
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        System.Threading.Tasks.Task<FraudRuleset> GETFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Get ruleset by id
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> GETFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Update a ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>Task of FraudRuleset</returns>
        System.Threading.Tasks.Task<FraudRuleset> PATCHFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null);

        /// <summary>
        /// Update a ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> PATCHFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null);
        /// <summary>
        /// Create a custom fraud ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        System.Threading.Tasks.Task<FraudRuleset> POSTFraudRulesetsFormatAsync (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator);

        /// <summary>
        /// Create a custom fraud ruleset
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> POSTFraudRulesetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FraudRulesetsApi : IFraudRulesetsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FraudRulesetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FraudRulesetsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FraudRulesetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FraudRulesetsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        public FraudRuleset DELETEFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<FraudRuleset> localVarResponse = DELETEFraudRulesetsIdFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        public ApiResponse< FraudRuleset > DELETEFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Delete ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        public async System.Threading.Tasks.Task<FraudRuleset> DELETEFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<FraudRuleset> localVarResponse = await DELETEFraudRulesetsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> DELETEFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->DELETEFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Get custom defined fraud rulesets  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        public FraudRuleset GETFraudRulesetsFormat (string acceptVersion, string authorization)
        {
             ApiResponse<FraudRuleset> localVarResponse = GETFraudRulesetsFormatWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get custom defined fraud rulesets  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        public ApiResponse< FraudRuleset > GETFraudRulesetsFormatWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->GETFraudRulesetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->GETFraudRulesetsFormat");

            var localVarPath = "/fraud-rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFraudRulesetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Get custom defined fraud rulesets  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        public async System.Threading.Tasks.Task<FraudRuleset> GETFraudRulesetsFormatAsync (string acceptVersion, string authorization)
        {
             ApiResponse<FraudRuleset> localVarResponse = await GETFraudRulesetsFormatAsyncWithHttpInfo(acceptVersion, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get custom defined fraud rulesets  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> GETFraudRulesetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->GETFraudRulesetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->GETFraudRulesetsFormat");

            var localVarPath = "/fraud-rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFraudRulesetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Get ruleset by id  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        public FraudRuleset GETFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<FraudRuleset> localVarResponse = GETFraudRulesetsIdFormatWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get ruleset by id  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        public ApiResponse< FraudRuleset > GETFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Get ruleset by id  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        public async System.Threading.Tasks.Task<FraudRuleset> GETFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id)
        {
             ApiResponse<FraudRuleset> localVarResponse = await GETFraudRulesetsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get ruleset by id  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> GETFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->GETFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Update a ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>FraudRuleset</returns>
        public FraudRuleset PATCHFraudRulesetsIdFormat (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null)
        {
             ApiResponse<FraudRuleset> localVarResponse = PATCHFraudRulesetsIdFormatWithHttpInfo(acceptVersion, authorization, id, filterRulesMetricName, filterRulesOperator, filterRulesValue, name, action, combinator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        public ApiResponse< FraudRuleset > PATCHFraudRulesetsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesMetricName' is set
            if (filterRulesMetricName == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesMetricName' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesOperator' is set
            if (filterRulesOperator == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesOperator' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesValue' is set
            if (filterRulesValue == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesValue' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (filterRulesMetricName != null) localVarFormParams.Add("filter_rules[][metric_name]", this.Configuration.ApiClient.ParameterToString(filterRulesMetricName)); // form parameter
            if (filterRulesOperator != null) localVarFormParams.Add("filter_rules[][operator]", this.Configuration.ApiClient.ParameterToString(filterRulesOperator)); // form parameter
            if (filterRulesValue != null) localVarFormParams.Add("filter_rules[][value]", this.Configuration.ApiClient.ParameterToString(filterRulesValue)); // form parameter
            if (action != null) localVarFormParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // form parameter
            if (combinator != null) localVarFormParams.Add("combinator", this.Configuration.ApiClient.ParameterToString(combinator)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Update a ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>Task of FraudRuleset</returns>
        public async System.Threading.Tasks.Task<FraudRuleset> PATCHFraudRulesetsIdFormatAsync (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null)
        {
             ApiResponse<FraudRuleset> localVarResponse = await PATCHFraudRulesetsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, filterRulesMetricName, filterRulesOperator, filterRulesValue, name, action, combinator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Ruleset id&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt;  (optional)</param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt;  (optional)</param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> PATCHFraudRulesetsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string name = null, string action = null, string combinator = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesMetricName' is set
            if (filterRulesMetricName == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesMetricName' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesOperator' is set
            if (filterRulesOperator == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesOperator' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");
            // verify the required parameter 'filterRulesValue' is set
            if (filterRulesValue == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesValue' when calling FraudRulesetsApi->PATCHFraudRulesetsIdFormat");

            var localVarPath = "/fraud-rulesets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (filterRulesMetricName != null) localVarFormParams.Add("filter_rules[][metric_name]", this.Configuration.ApiClient.ParameterToString(filterRulesMetricName)); // form parameter
            if (filterRulesOperator != null) localVarFormParams.Add("filter_rules[][operator]", this.Configuration.ApiClient.ParameterToString(filterRulesOperator)); // form parameter
            if (filterRulesValue != null) localVarFormParams.Add("filter_rules[][value]", this.Configuration.ApiClient.ParameterToString(filterRulesValue)); // form parameter
            if (action != null) localVarFormParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // form parameter
            if (combinator != null) localVarFormParams.Add("combinator", this.Configuration.ApiClient.ParameterToString(combinator)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHFraudRulesetsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Create a custom fraud ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>FraudRuleset</returns>
        public FraudRuleset POSTFraudRulesetsFormat (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator)
        {
             ApiResponse<FraudRuleset> localVarResponse = POSTFraudRulesetsFormatWithHttpInfo(acceptVersion, authorization, name, filterRulesMetricName, filterRulesOperator, filterRulesValue, action, combinator);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a custom fraud ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>ApiResponse of FraudRuleset</returns>
        public ApiResponse< FraudRuleset > POSTFraudRulesetsFormatWithHttpInfo (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesMetricName' is set
            if (filterRulesMetricName == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesMetricName' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesOperator' is set
            if (filterRulesOperator == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesOperator' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesValue' is set
            if (filterRulesValue == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesValue' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'combinator' is set
            if (combinator == null)
                throw new ApiException(400, "Missing required parameter 'combinator' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");

            var localVarPath = "/fraud-rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (filterRulesMetricName != null) localVarFormParams.Add("filter_rules[][metric_name]", this.Configuration.ApiClient.ParameterToString(filterRulesMetricName)); // form parameter
            if (filterRulesOperator != null) localVarFormParams.Add("filter_rules[][operator]", this.Configuration.ApiClient.ParameterToString(filterRulesOperator)); // form parameter
            if (filterRulesValue != null) localVarFormParams.Add("filter_rules[][value]", this.Configuration.ApiClient.ParameterToString(filterRulesValue)); // form parameter
            if (action != null) localVarFormParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // form parameter
            if (combinator != null) localVarFormParams.Add("combinator", this.Configuration.ApiClient.ParameterToString(combinator)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFraudRulesetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

        /// <summary>
        /// Create a custom fraud ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>Task of FraudRuleset</returns>
        public async System.Threading.Tasks.Task<FraudRuleset> POSTFraudRulesetsFormatAsync (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator)
        {
             ApiResponse<FraudRuleset> localVarResponse = await POSTFraudRulesetsFormatAsyncWithHttpInfo(acceptVersion, authorization, name, filterRulesMetricName, filterRulesOperator, filterRulesValue, action, combinator);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a custom fraud ruleset  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="name">&lt;p&gt;Descriptive name&lt;/p&gt; </param>
        /// <param name="filterRulesMetricName">&lt;p&gt;Name af variable metric&lt;/p&gt; </param>
        /// <param name="filterRulesOperator">&lt;p&gt;Operator&lt;/p&gt; </param>
        /// <param name="filterRulesValue">&lt;p&gt;String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’&lt;/p&gt; </param>
        /// <param name="action">&lt;p&gt;Action to take when ruleset triggers&lt;/p&gt; </param>
        /// <param name="combinator">&lt;p&gt;Method to combine filter rules&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (FraudRuleset)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudRuleset>> POSTFraudRulesetsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string name, string filterRulesMetricName, string filterRulesOperator, string filterRulesValue, string action, string combinator)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesMetricName' is set
            if (filterRulesMetricName == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesMetricName' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesOperator' is set
            if (filterRulesOperator == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesOperator' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'filterRulesValue' is set
            if (filterRulesValue == null)
                throw new ApiException(400, "Missing required parameter 'filterRulesValue' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'action' is set
            if (action == null)
                throw new ApiException(400, "Missing required parameter 'action' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");
            // verify the required parameter 'combinator' is set
            if (combinator == null)
                throw new ApiException(400, "Missing required parameter 'combinator' when calling FraudRulesetsApi->POSTFraudRulesetsFormat");

            var localVarPath = "/fraud-rulesets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (filterRulesMetricName != null) localVarFormParams.Add("filter_rules[][metric_name]", this.Configuration.ApiClient.ParameterToString(filterRulesMetricName)); // form parameter
            if (filterRulesOperator != null) localVarFormParams.Add("filter_rules[][operator]", this.Configuration.ApiClient.ParameterToString(filterRulesOperator)); // form parameter
            if (filterRulesValue != null) localVarFormParams.Add("filter_rules[][value]", this.Configuration.ApiClient.ParameterToString(filterRulesValue)); // form parameter
            if (action != null) localVarFormParams.Add("action", this.Configuration.ApiClient.ParameterToString(action)); // form parameter
            if (combinator != null) localVarFormParams.Add("combinator", this.Configuration.ApiClient.ParameterToString(combinator)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTFraudRulesetsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudRuleset>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudRuleset) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudRuleset)));
        }

    }
}
