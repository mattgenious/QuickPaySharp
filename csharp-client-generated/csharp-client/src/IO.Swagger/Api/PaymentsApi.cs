/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns></returns>
        void DELETEPaymentsIdLinkFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETEPaymentsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get all payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        List<Payment> GETPaymentsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);

        /// <summary>
        /// Get all payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        ApiResponse<List<Payment>> GETPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);
        /// <summary>
        /// Get payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment GETPaymentsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GETPaymentsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        Operation GETPaymentsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> GETPaymentsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Update payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment PATCHPaymentsIdFormat (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> PATCHPaymentsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null);
        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        Operation PATCHPaymentsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);

        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> PATCHPaymentsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);
        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsFormat (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null);

        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null);
        /// <summary>
        /// Authorize payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdAuthorizeFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null);

        /// <summary>
        /// Authorize payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null);
        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdCancelFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdCaptureFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdCaptureFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        FraudReport POSTPaymentsIdFraudReportFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        ApiResponse<FraudReport> POSTPaymentsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Refund payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdRefundFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Refund payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdRefundFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Renew authorization
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdRenewFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Renew authorization
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdRenewFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Create payment session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTPaymentsIdSessionFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Create payment session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTPaymentsIdSessionFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        PaymentLinkUrl PUTPaymentsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null);

        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        ApiResponse<PaymentLinkUrl> PUTPaymentsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETEPaymentsIdLinkFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETEPaymentsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get all payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        System.Threading.Tasks.Task<List<Payment>> GETPaymentsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);

        /// <summary>
        /// Get all payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GETPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);
        /// <summary>
        /// Get payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GETPaymentsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GETPaymentsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> GETPaymentsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> GETPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Update payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> PATCHPaymentsIdFormatAsync (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null);

        /// <summary>
        /// Update payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> PATCHPaymentsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null);
        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> PATCHPaymentsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);

        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> PATCHPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);
        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsFormatAsync (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null);

        /// <summary>
        /// Create payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null);
        /// <summary>
        /// Authorize payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdAuthorizeFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null);

        /// <summary>
        /// Authorize payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null);
        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdCancelFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Cancel payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdCaptureFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Capture payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdCaptureFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        System.Threading.Tasks.Task<FraudReport> POSTPaymentsIdFraudReportFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTPaymentsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Refund payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdRefundFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Refund payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdRefundFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Renew authorization
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdRenewFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Renew authorization
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdRenewFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Create payment session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTPaymentsIdSessionFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null);

        /// <summary>
        /// Create payment session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdSessionFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null);
        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        System.Threading.Tasks.Task<PaymentLinkUrl> PUTPaymentsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null);

        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTPaymentsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentsApi : IPaymentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns></returns>
        public void DELETEPaymentsIdLinkFormat (string acceptVersion, string authorization, int? id)
        {
             DELETEPaymentsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETEPaymentsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");

            var localVarPath = "/payments/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEPaymentsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETEPaymentsIdLinkFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETEPaymentsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETEPaymentsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->DELETEPaymentsIdLinkFormat");

            var localVarPath = "/payments/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETEPaymentsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get all payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>List&lt;Payment&gt;</returns>
        public List<Payment> GETPaymentsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
             ApiResponse<List<Payment>> localVarResponse = GETPaymentsFormatWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, fraudSuspected, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of List&lt;Payment&gt;</returns>
        public ApiResponse< List<Payment> > GETPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsFormat");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Payment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Payment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Payment>)));
        }

        /// <summary>
        /// Get all payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of List&lt;Payment&gt;</returns>
        public async System.Threading.Tasks.Task<List<Payment>> GETPaymentsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
             ApiResponse<List<Payment>> localVarResponse = await GETPaymentsFormatAsyncWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, fraudSuspected, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="dateYear">&lt;p&gt;Year&lt;/p&gt;  (optional)</param>
        /// <param name="dateMonth">&lt;p&gt;Month&lt;/p&gt;  (optional)</param>
        /// <param name="dateDay">&lt;p&gt;Day of the month&lt;/p&gt;  (optional)</param>
        /// <param name="dateHour">&lt;p&gt;Hour of the day&lt;/p&gt;  (optional)</param>
        /// <param name="dateMinute">&lt;p&gt;Minute of the hour&lt;/p&gt;  (optional)</param>
        /// <param name="timestamp">&lt;p&gt;Timestamp field&lt;/p&gt;  (optional, default to created_at)</param>
        /// <param name="minTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="maxTime">&lt;p&gt;Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”&lt;/p&gt;  (optional)</param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <param name="accepted">&lt;p&gt;Return accepted payments&lt;/p&gt;  (optional)</param>
        /// <param name="orderId">&lt;p&gt;Find by order_id&lt;/p&gt;  (optional)</param>
        /// <param name="state">&lt;p&gt;Find by state&lt;/p&gt;  (optional)</param>
        /// <param name="id">&lt;p&gt;Find by transaction id&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Filter by acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="fraudSuspected">&lt;p&gt;Filter by suspected fraud&lt;/p&gt;  (optional)</param>
        /// <param name="page">&lt;p&gt;Pagination page. Default is 1&lt;/p&gt;  (optional, default to 1)</param>
        /// <param name="pageSize">&lt;p&gt;Items per page. Default is 20&lt;/p&gt;  (optional, default to 20)</param>
        /// <param name="sortBy">&lt;p&gt;Property to sort by&lt;/p&gt;  (optional, default to id)</param>
        /// <param name="sortDir">&lt;p&gt;Sort direction&lt;/p&gt;  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Payment&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Payment>>> GETPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, bool? fraudSuspected = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsFormat");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Payment>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Payment>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Payment>)));
        }

        /// <summary>
        /// Get payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment GETPaymentsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Payment> localVarResponse = GETPaymentsIdFormatWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > GETPaymentsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->GETPaymentsIdFormat");

            var localVarPath = "/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Get payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GETPaymentsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Payment> localVarResponse = await GETPaymentsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationsSize">&lt;p&gt;Maximum number of operations to retrieve&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> GETPaymentsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->GETPaymentsIdFormat");

            var localVarPath = "/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        public Operation GETPaymentsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = GETPaymentsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        public ApiResponse< Operation > GETPaymentsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");

            var localVarPath = "/payments/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> GETPaymentsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = await GETPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operation>> GETPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PaymentsApi->GETPaymentsIdOperationsOperationIdFormat");

            var localVarPath = "/payments/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETPaymentsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Update payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment PATCHPaymentsIdFormat (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null)
        {
             ApiResponse<Payment> localVarResponse = PATCHPaymentsIdFormatWithHttpInfo(acceptVersion, authorization, id, basketQty, basketItemNo, basketItemName, basketItemPrice, basketVatRate, deadlineAt, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, shippingMethod, shippingCompany, shippingAmount, shippingVatRate, shippingTrackingNumber, shippingTrackingUrl, variables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > PATCHPaymentsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketQty' is set
            if (basketQty == null)
                throw new ApiException(400, "Missing required parameter 'basketQty' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemNo' is set
            if (basketItemNo == null)
                throw new ApiException(400, "Missing required parameter 'basketItemNo' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemName' is set
            if (basketItemName == null)
                throw new ApiException(400, "Missing required parameter 'basketItemName' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemPrice' is set
            if (basketItemPrice == null)
                throw new ApiException(400, "Missing required parameter 'basketItemPrice' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketVatRate' is set
            if (basketVatRate == null)
                throw new ApiException(400, "Missing required parameter 'basketVatRate' when calling PaymentsApi->PATCHPaymentsIdFormat");

            var localVarPath = "/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (deadlineAt != null) localVarFormParams.Add("deadline_at", this.Configuration.ApiClient.ParameterToString(deadlineAt)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (basketQty != null) localVarFormParams.Add("basket[][qty]", this.Configuration.ApiClient.ParameterToString(basketQty)); // form parameter
            if (basketItemNo != null) localVarFormParams.Add("basket[][item_no]", this.Configuration.ApiClient.ParameterToString(basketItemNo)); // form parameter
            if (basketItemName != null) localVarFormParams.Add("basket[][item_name]", this.Configuration.ApiClient.ParameterToString(basketItemName)); // form parameter
            if (basketItemPrice != null) localVarFormParams.Add("basket[][item_price]", this.Configuration.ApiClient.ParameterToString(basketItemPrice)); // form parameter
            if (basketVatRate != null) localVarFormParams.Add("basket[][vat_rate]", this.Configuration.ApiClient.ParameterToString(basketVatRate)); // form parameter
            if (shippingMethod != null) localVarFormParams.Add("shipping[method]", this.Configuration.ApiClient.ParameterToString(shippingMethod)); // form parameter
            if (shippingCompany != null) localVarFormParams.Add("shipping[company]", this.Configuration.ApiClient.ParameterToString(shippingCompany)); // form parameter
            if (shippingAmount != null) localVarFormParams.Add("shipping[amount]", this.Configuration.ApiClient.ParameterToString(shippingAmount)); // form parameter
            if (shippingVatRate != null) localVarFormParams.Add("shipping[vat_rate]", this.Configuration.ApiClient.ParameterToString(shippingVatRate)); // form parameter
            if (shippingTrackingNumber != null) localVarFormParams.Add("shipping[tracking_number]", this.Configuration.ApiClient.ParameterToString(shippingTrackingNumber)); // form parameter
            if (shippingTrackingUrl != null) localVarFormParams.Add("shipping[tracking_url]", this.Configuration.ApiClient.ParameterToString(shippingTrackingUrl)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPaymentsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Update payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> PATCHPaymentsIdFormatAsync (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null)
        {
             ApiResponse<Payment> localVarResponse = await PATCHPaymentsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, basketQty, basketItemNo, basketItemName, basketItemPrice, basketVatRate, deadlineAt, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, shippingMethod, shippingCompany, shippingAmount, shippingVatRate, shippingTrackingNumber, shippingTrackingUrl, variables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="deadlineAt">&lt;p&gt;Payment must be authorized before this time&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> PATCHPaymentsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, DateTime? deadlineAt = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, Dictionary<string, string> variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketQty' is set
            if (basketQty == null)
                throw new ApiException(400, "Missing required parameter 'basketQty' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemNo' is set
            if (basketItemNo == null)
                throw new ApiException(400, "Missing required parameter 'basketItemNo' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemName' is set
            if (basketItemName == null)
                throw new ApiException(400, "Missing required parameter 'basketItemName' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketItemPrice' is set
            if (basketItemPrice == null)
                throw new ApiException(400, "Missing required parameter 'basketItemPrice' when calling PaymentsApi->PATCHPaymentsIdFormat");
            // verify the required parameter 'basketVatRate' is set
            if (basketVatRate == null)
                throw new ApiException(400, "Missing required parameter 'basketVatRate' when calling PaymentsApi->PATCHPaymentsIdFormat");

            var localVarPath = "/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (deadlineAt != null) localVarFormParams.Add("deadline_at", this.Configuration.ApiClient.ParameterToString(deadlineAt)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (basketQty != null) localVarFormParams.Add("basket[][qty]", this.Configuration.ApiClient.ParameterToString(basketQty)); // form parameter
            if (basketItemNo != null) localVarFormParams.Add("basket[][item_no]", this.Configuration.ApiClient.ParameterToString(basketItemNo)); // form parameter
            if (basketItemName != null) localVarFormParams.Add("basket[][item_name]", this.Configuration.ApiClient.ParameterToString(basketItemName)); // form parameter
            if (basketItemPrice != null) localVarFormParams.Add("basket[][item_price]", this.Configuration.ApiClient.ParameterToString(basketItemPrice)); // form parameter
            if (basketVatRate != null) localVarFormParams.Add("basket[][vat_rate]", this.Configuration.ApiClient.ParameterToString(basketVatRate)); // form parameter
            if (shippingMethod != null) localVarFormParams.Add("shipping[method]", this.Configuration.ApiClient.ParameterToString(shippingMethod)); // form parameter
            if (shippingCompany != null) localVarFormParams.Add("shipping[company]", this.Configuration.ApiClient.ParameterToString(shippingCompany)); // form parameter
            if (shippingAmount != null) localVarFormParams.Add("shipping[amount]", this.Configuration.ApiClient.ParameterToString(shippingAmount)); // form parameter
            if (shippingVatRate != null) localVarFormParams.Add("shipping[vat_rate]", this.Configuration.ApiClient.ParameterToString(shippingVatRate)); // form parameter
            if (shippingTrackingNumber != null) localVarFormParams.Add("shipping[tracking_number]", this.Configuration.ApiClient.ParameterToString(shippingTrackingNumber)); // form parameter
            if (shippingTrackingUrl != null) localVarFormParams.Add("shipping[tracking_url]", this.Configuration.ApiClient.ParameterToString(shippingTrackingUrl)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPaymentsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Operation</returns>
        public Operation PATCHPaymentsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
             ApiResponse<Operation> localVarResponse = PATCHPaymentsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, id, operationId, pending);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>ApiResponse of Operation</returns>
        public ApiResponse< Operation > PATCHPaymentsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'pending' is set
            if (pending == null)
                throw new ApiException(400, "Missing required parameter 'pending' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");

            var localVarPath = "/payments/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pending != null) localVarFormParams.Add("pending", this.Configuration.ApiClient.ParameterToString(pending)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPaymentsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> PATCHPaymentsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
             ApiResponse<Operation> localVarResponse = await PATCHPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationId, pending);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="operationId">&lt;p&gt;Operations id&lt;/p&gt; </param>
        /// <param name="pending">&lt;p&gt;Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)&lt;/p&gt; </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operation>> PATCHPaymentsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");
            // verify the required parameter 'pending' is set
            if (pending == null)
                throw new ApiException(400, "Missing required parameter 'pending' when calling PaymentsApi->PATCHPaymentsIdOperationsOperationIdFormat");

            var localVarPath = "/payments/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pending != null) localVarFormParams.Add("pending", this.Configuration.ApiClient.ParameterToString(pending)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHPaymentsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Create payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsFormat (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsFormatWithHttpInfo(acceptVersion, authorization, currency, orderId, basketQty, basketItemNo, basketItemName, basketItemPrice, basketVatRate, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, brandingId, shippingMethod, shippingCompany, shippingAmount, shippingVatRate, shippingTrackingNumber, shippingTrackingUrl, shopsystemName, shopsystemVersion, variables, textOnStatement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketQty' is set
            if (basketQty == null)
                throw new ApiException(400, "Missing required parameter 'basketQty' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemNo' is set
            if (basketItemNo == null)
                throw new ApiException(400, "Missing required parameter 'basketItemNo' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemName' is set
            if (basketItemName == null)
                throw new ApiException(400, "Missing required parameter 'basketItemName' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemPrice' is set
            if (basketItemPrice == null)
                throw new ApiException(400, "Missing required parameter 'basketItemPrice' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketVatRate' is set
            if (basketVatRate == null)
                throw new ApiException(400, "Missing required parameter 'basketVatRate' when calling PaymentsApi->POSTPaymentsFormat");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (basketQty != null) localVarFormParams.Add("basket[][qty]", this.Configuration.ApiClient.ParameterToString(basketQty)); // form parameter
            if (basketItemNo != null) localVarFormParams.Add("basket[][item_no]", this.Configuration.ApiClient.ParameterToString(basketItemNo)); // form parameter
            if (basketItemName != null) localVarFormParams.Add("basket[][item_name]", this.Configuration.ApiClient.ParameterToString(basketItemName)); // form parameter
            if (basketItemPrice != null) localVarFormParams.Add("basket[][item_price]", this.Configuration.ApiClient.ParameterToString(basketItemPrice)); // form parameter
            if (basketVatRate != null) localVarFormParams.Add("basket[][vat_rate]", this.Configuration.ApiClient.ParameterToString(basketVatRate)); // form parameter
            if (shippingMethod != null) localVarFormParams.Add("shipping[method]", this.Configuration.ApiClient.ParameterToString(shippingMethod)); // form parameter
            if (shippingCompany != null) localVarFormParams.Add("shipping[company]", this.Configuration.ApiClient.ParameterToString(shippingCompany)); // form parameter
            if (shippingAmount != null) localVarFormParams.Add("shipping[amount]", this.Configuration.ApiClient.ParameterToString(shippingAmount)); // form parameter
            if (shippingVatRate != null) localVarFormParams.Add("shipping[vat_rate]", this.Configuration.ApiClient.ParameterToString(shippingVatRate)); // form parameter
            if (shippingTrackingNumber != null) localVarFormParams.Add("shipping[tracking_number]", this.Configuration.ApiClient.ParameterToString(shippingTrackingNumber)); // form parameter
            if (shippingTrackingUrl != null) localVarFormParams.Add("shipping[tracking_url]", this.Configuration.ApiClient.ParameterToString(shippingTrackingUrl)); // form parameter
            if (shopsystemName != null) localVarFormParams.Add("shopsystem[name]", this.Configuration.ApiClient.ParameterToString(shopsystemName)); // form parameter
            if (shopsystemVersion != null) localVarFormParams.Add("shopsystem[version]", this.Configuration.ApiClient.ParameterToString(shopsystemVersion)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsFormatAsync (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsFormatAsyncWithHttpInfo(acceptVersion, authorization, currency, orderId, basketQty, basketItemNo, basketItemName, basketItemPrice, basketVatRate, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, brandingId, shippingMethod, shippingCompany, shippingAmount, shippingVatRate, shippingTrackingNumber, shippingTrackingUrl, shopsystemName, shopsystemVersion, variables, textOnStatement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="currency">&lt;p&gt;Currency&lt;/p&gt; </param>
        /// <param name="orderId">&lt;p&gt;Unique order id(must be between 4-20 characters)&lt;/p&gt; </param>
        /// <param name="basketQty">&lt;p&gt;Quantity&lt;/p&gt; </param>
        /// <param name="basketItemNo">&lt;p&gt;Item reference number&lt;/p&gt; </param>
        /// <param name="basketItemName">&lt;p&gt;Item name&lt;/p&gt; </param>
        /// <param name="basketItemPrice">&lt;p&gt;Per item price (incl. VAT)&lt;/p&gt; </param>
        /// <param name="basketVatRate">&lt;p&gt;VAT rate&lt;/p&gt; </param>
        /// <param name="invoiceAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressName">&lt;p&gt;Name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressAtt">&lt;p&gt;Att&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCompanyName">&lt;p&gt;Company name&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressStreet">&lt;p&gt;Street&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseNumber">&lt;p&gt;House number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressHouseExtension">&lt;p&gt;House extension&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCity">&lt;p&gt;City&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressZipCode">&lt;p&gt;Zip code&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressRegion">&lt;p&gt;Region&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressCountryCode">&lt;p&gt;Three letter country code according to ISO 3166-1 Alpha-3&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressVatNo">&lt;p&gt;VAT registration number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">&lt;p&gt;Phone number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressMobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressEmail">&lt;p&gt;Email address&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Used branding id&lt;/p&gt;  (optional)</param>
        /// <param name="shippingMethod">&lt;p&gt;Shipping method&lt;/p&gt;  (optional)</param>
        /// <param name="shippingCompany">&lt;p&gt;Shipping company&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAmount">&lt;p&gt;Shipping price (incl. VAT)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingVatRate">&lt;p&gt;VAT rate&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingNumber">&lt;p&gt;Shipping tracking number&lt;/p&gt;  (optional)</param>
        /// <param name="shippingTrackingUrl">&lt;p&gt;Shipping tracking url&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemName">&lt;p&gt;Shop system module name&lt;/p&gt;  (optional)</param>
        /// <param name="shopsystemVersion">&lt;p&gt;Shop system module version&lt;/p&gt;  (optional)</param>
        /// <param name="variables">&lt;p&gt;Custom variables&lt;/p&gt;  (optional, default to {})</param>
        /// <param name="textOnStatement">&lt;p&gt;Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string currency, string orderId, int? basketQty, string basketItemNo, string basketItemName, int? basketItemPrice, float? basketVatRate, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, int? brandingId = null, string shippingMethod = null, string shippingCompany = null, int? shippingAmount = null, float? shippingVatRate = null, string shippingTrackingNumber = null, string shippingTrackingUrl = null, string shopsystemName = null, string shopsystemVersion = null, Dictionary<string, string> variables = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketQty' is set
            if (basketQty == null)
                throw new ApiException(400, "Missing required parameter 'basketQty' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemNo' is set
            if (basketItemNo == null)
                throw new ApiException(400, "Missing required parameter 'basketItemNo' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemName' is set
            if (basketItemName == null)
                throw new ApiException(400, "Missing required parameter 'basketItemName' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketItemPrice' is set
            if (basketItemPrice == null)
                throw new ApiException(400, "Missing required parameter 'basketItemPrice' when calling PaymentsApi->POSTPaymentsFormat");
            // verify the required parameter 'basketVatRate' is set
            if (basketVatRate == null)
                throw new ApiException(400, "Missing required parameter 'basketVatRate' when calling PaymentsApi->POSTPaymentsFormat");

            var localVarPath = "/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (basketQty != null) localVarFormParams.Add("basket[][qty]", this.Configuration.ApiClient.ParameterToString(basketQty)); // form parameter
            if (basketItemNo != null) localVarFormParams.Add("basket[][item_no]", this.Configuration.ApiClient.ParameterToString(basketItemNo)); // form parameter
            if (basketItemName != null) localVarFormParams.Add("basket[][item_name]", this.Configuration.ApiClient.ParameterToString(basketItemName)); // form parameter
            if (basketItemPrice != null) localVarFormParams.Add("basket[][item_price]", this.Configuration.ApiClient.ParameterToString(basketItemPrice)); // form parameter
            if (basketVatRate != null) localVarFormParams.Add("basket[][vat_rate]", this.Configuration.ApiClient.ParameterToString(basketVatRate)); // form parameter
            if (shippingMethod != null) localVarFormParams.Add("shipping[method]", this.Configuration.ApiClient.ParameterToString(shippingMethod)); // form parameter
            if (shippingCompany != null) localVarFormParams.Add("shipping[company]", this.Configuration.ApiClient.ParameterToString(shippingCompany)); // form parameter
            if (shippingAmount != null) localVarFormParams.Add("shipping[amount]", this.Configuration.ApiClient.ParameterToString(shippingAmount)); // form parameter
            if (shippingVatRate != null) localVarFormParams.Add("shipping[vat_rate]", this.Configuration.ApiClient.ParameterToString(shippingVatRate)); // form parameter
            if (shippingTrackingNumber != null) localVarFormParams.Add("shipping[tracking_number]", this.Configuration.ApiClient.ParameterToString(shippingTrackingNumber)); // form parameter
            if (shippingTrackingUrl != null) localVarFormParams.Add("shipping[tracking_url]", this.Configuration.ApiClient.ParameterToString(shippingTrackingUrl)); // form parameter
            if (shopsystemName != null) localVarFormParams.Add("shopsystem[name]", this.Configuration.ApiClient.ParameterToString(shopsystemName)); // form parameter
            if (shopsystemVersion != null) localVarFormParams.Add("shopsystem[version]", this.Configuration.ApiClient.ParameterToString(shopsystemVersion)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Authorize payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdAuthorizeFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdAuthorizeFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, autoCapture, acquirer, autofee, customerIp, extras, zeroAuth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");

            var localVarPath = "/payments/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter
            if (zeroAuth != null) localVarFormParams.Add("zero_auth", this.Configuration.ApiClient.ParameterToString(zeroAuth)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Authorize payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdAuthorizeFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdAuthorizeFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, autoCapture, acquirer, autofee, customerIp, extras, zeroAuth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorize payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="cardNumber">&lt;p&gt;Card number&lt;/p&gt;  (optional)</param>
        /// <param name="cardExpiration">&lt;p&gt;Expiration date (YYMM)&lt;/p&gt;  (optional)</param>
        /// <param name="cardCvd">&lt;p&gt;CVD/CVV&lt;/p&gt;  (optional)</param>
        /// <param name="cardToken">&lt;p&gt;Card token&lt;/p&gt;  (optional)</param>
        /// <param name="cardApplePayToken">&lt;p&gt;Apple Pay payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">&lt;p&gt;MobilePay Online payment-token&lt;/p&gt;  (optional)</param>
        /// <param name="cardIssuedTo">&lt;p&gt;Card holder name&lt;/p&gt;  (optional)</param>
        /// <param name="cardBrand">&lt;p&gt;Brand to use on multi-brand card&lt;/p&gt;  (optional)</param>
        /// <param name="cardStatus">&lt;p&gt;3D-Secure status&lt;/p&gt;  (optional)</param>
        /// <param name="cardEci">&lt;p&gt;3D-Secure eci&lt;/p&gt;  (optional)</param>
        /// <param name="cardXav">&lt;p&gt;3D-Secure xav&lt;/p&gt;  (optional)</param>
        /// <param name="cardCavv">&lt;p&gt;3D-Secure cavv&lt;/p&gt;  (optional)</param>
        /// <param name="mobileNumber">&lt;p&gt;Mobile number&lt;/p&gt;  (optional)</param>
        /// <param name="ninNumber">&lt;p&gt;Customer NIN Number&lt;/p&gt;  (optional)</param>
        /// <param name="ninCountryCode">&lt;p&gt;Customer country (ISO 3166-1 Alpha-3)&lt;/p&gt;  (optional)</param>
        /// <param name="ninGender">&lt;p&gt;Customer gender&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <param name="zeroAuth">&lt;p&gt;(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, Dictionary<string, string> cardApplePayToken = null, Dictionary<string, string> cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, Dictionary<string, string> extras = null, bool? zeroAuth = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdAuthorizeFormat");

            var localVarPath = "/payments/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter
            if (zeroAuth != null) localVarFormParams.Add("zero_auth", this.Configuration.ApiClient.ParameterToString(zeroAuth)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Cancel payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdCancelFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdCancelFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdCancelFormat");

            var localVarPath = "/payments/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Cancel payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdCancelFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdCancelFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdCancelFormat");

            var localVarPath = "/payments/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Capture payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdCaptureFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdCaptureFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Capture payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdCaptureFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");

            var localVarPath = "/payments/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdCaptureFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Capture payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdCaptureFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdCaptureFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Capture payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdCaptureFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdCaptureFormat");

            var localVarPath = "/payments/{id}/capture";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdCaptureFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        public FraudReport POSTPaymentsIdFraudReportFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = POSTPaymentsIdFraudReportFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        public ApiResponse< FraudReport > POSTPaymentsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");

            var localVarPath = "/payments/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        public async System.Threading.Tasks.Task<FraudReport> POSTPaymentsIdFraudReportFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = await POSTPaymentsIdFraudReportFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTPaymentsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdFraudReportFormat");

            var localVarPath = "/payments/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Refund payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdRefundFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdRefundFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Refund payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdRefundFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdRefundFormat");

            var localVarPath = "/payments/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdRefundFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Refund payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdRefundFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdRefundFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Refund payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="vatRate">&lt;p&gt;Vate rate&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdRefundFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdRefundFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdRefundFormat");

            var localVarPath = "/payments/{id}/refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdRefundFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Renew authorization  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdRenewFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdRenewFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renew authorization  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdRenewFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdRenewFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdRenewFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdRenewFormat");

            var localVarPath = "/payments/{id}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdRenewFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Renew authorization  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdRenewFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdRenewFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renew authorization  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdRenewFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdRenewFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdRenewFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdRenewFormat");

            var localVarPath = "/payments/{id}/renew";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdRenewFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create payment session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTPaymentsIdSessionFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = POSTPaymentsIdSessionFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, autoCapture, acquirer, autofee, customerIp, personFirstName, personLastName, personEmail, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create payment session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTPaymentsIdSessionFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdSessionFormat");

            var localVarPath = "/payments/{id}/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdSessionFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create payment session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTPaymentsIdSessionFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTPaymentsIdSessionFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, autoCapture, acquirer, autofee, customerIp, personFirstName, personLastName, personEmail, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create payment session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Payment id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount&lt;/p&gt; </param>
        /// <param name="quickPayCallbackUrl">&lt;p&gt;Specify the callback url (overrides merchant default callback-url)&lt;/p&gt;  (optional)</param>
        /// <param name="synchronized">&lt;p&gt;Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;If set, will force the use of this acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="autofee">&lt;p&gt;When true, fee is calculated and added to the given amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="customerIp">&lt;p&gt;Customer IP&lt;/p&gt;  (optional)</param>
        /// <param name="personFirstName">&lt;p&gt;Person first name&lt;/p&gt;  (optional)</param>
        /// <param name="personLastName">&lt;p&gt;Person last name&lt;/p&gt;  (optional)</param>
        /// <param name="personEmail">&lt;p&gt;Person email&lt;/p&gt;  (optional)</param>
        /// <param name="extras">&lt;p&gt;Additional acquirer specific params&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTPaymentsIdSessionFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, string acquirer = null, bool? autofee = null, string customerIp = null, string personFirstName = null, string personLastName = null, string personEmail = null, Dictionary<string, string> extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->POSTPaymentsIdSessionFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->POSTPaymentsIdSessionFormat");

            var localVarPath = "/payments/{id}/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTPaymentsIdSessionFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        public PaymentLinkUrl PUTPaymentsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = PUTPaymentsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, autoFee, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, deadline, framed, brandingConfig, customerEmail, invoiceAddressSelection, shippingAddressSelection, autoCapture);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        public ApiResponse< PaymentLinkUrl > PUTPaymentsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->PUTPaymentsIdLinkFormat");

            var localVarPath = "/payments/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (autoFee != null) localVarFormParams.Add("auto_fee", this.Configuration.ApiClient.ParameterToString(autoFee)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (deadline != null) localVarFormParams.Add("deadline", this.Configuration.ApiClient.ParameterToString(deadline)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter
            if (customerEmail != null) localVarFormParams.Add("customer_email", this.Configuration.ApiClient.ParameterToString(customerEmail)); // form parameter
            if (invoiceAddressSelection != null) localVarFormParams.Add("invoice_address_selection", this.Configuration.ApiClient.ParameterToString(invoiceAddressSelection)); // form parameter
            if (shippingAddressSelection != null) localVarFormParams.Add("shipping_address_selection", this.Configuration.ApiClient.ParameterToString(shippingAddressSelection)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTPaymentsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        public async System.Threading.Tasks.Task<PaymentLinkUrl> PUTPaymentsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = await PUTPaymentsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, autoFee, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, deadline, framed, brandingConfig, customerEmail, invoiceAddressSelection, shippingAddressSelection, autoCapture);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">&lt;p&gt;Specify the version of the API&lt;/p&gt; </param>
        /// <param name="authorization">&lt;p&gt;Use Basic Auth to authorize to the API&lt;/p&gt; </param>
        /// <param name="id">&lt;p&gt;Transaction id&lt;/p&gt; </param>
        /// <param name="amount">&lt;p&gt;Amount to authorize&lt;/p&gt; </param>
        /// <param name="agreementId">&lt;p&gt;Agreement to use. Defaults to the Payment Window agreement&lt;/p&gt;  (optional)</param>
        /// <param name="language">&lt;p&gt;Language&lt;/p&gt;  (optional, default to en)</param>
        /// <param name="continueUrl">&lt;p&gt;Url that cardholder is redirected to after authorize&lt;/p&gt;  (optional)</param>
        /// <param name="cancelUrl">&lt;p&gt;Url that cardholder is redirected to after cancelation&lt;/p&gt;  (optional)</param>
        /// <param name="callbackUrl">&lt;p&gt;Endpoint for async callback&lt;/p&gt;  (optional)</param>
        /// <param name="paymentMethods">&lt;p&gt;Limit payment methods&lt;/p&gt;  (optional)</param>
        /// <param name="autoFee">&lt;p&gt;Add acquirer fee to amount. Default is merchant autofee&lt;/p&gt;  (optional)</param>
        /// <param name="brandingId">&lt;p&gt;Override branding. Default is merchant default branding&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="googleAnalyticsClientId">&lt;p&gt;Send events to Google Analytics&lt;/p&gt;  (optional)</param>
        /// <param name="acquirer">&lt;p&gt;Force usage of the given acquirer&lt;/p&gt;  (optional)</param>
        /// <param name="deadline">&lt;p&gt;Set a deadline in seconds for the cardholder to complete&lt;/p&gt;  (optional)</param>
        /// <param name="framed">&lt;p&gt;Allow opening in iframe&lt;/p&gt;  (optional)</param>
        /// <param name="brandingConfig">&lt;p&gt;Config for branding. Will be merged with the default config in the branding&lt;/p&gt;  (optional)</param>
        /// <param name="customerEmail">&lt;p&gt;Required for PayPal. Email of customer.&lt;/p&gt;  (optional)</param>
        /// <param name="invoiceAddressSelection">&lt;p&gt;Get customer invoice address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="shippingAddressSelection">&lt;p&gt;Get customer shipping address via acquirer (Currently MobilePay and PayPal only)&lt;/p&gt;  (optional)</param>
        /// <param name="autoCapture">&lt;p&gt;When true, payment is captured after authorization. Default is false&lt;/p&gt;  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTPaymentsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, Dictionary<string, string> brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null, bool? autoCapture = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->PUTPaymentsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling PaymentsApi->PUTPaymentsIdLinkFormat");

            var localVarPath = "/payments/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (autoFee != null) localVarFormParams.Add("auto_fee", this.Configuration.ApiClient.ParameterToString(autoFee)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (deadline != null) localVarFormParams.Add("deadline", this.Configuration.ApiClient.ParameterToString(deadline)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter
            if (customerEmail != null) localVarFormParams.Add("customer_email", this.Configuration.ApiClient.ParameterToString(customerEmail)); // form parameter
            if (invoiceAddressSelection != null) localVarFormParams.Add("invoice_address_selection", this.Configuration.ApiClient.ParameterToString(invoiceAddressSelection)); // form parameter
            if (shippingAddressSelection != null) localVarFormParams.Add("shipping_address_selection", this.Configuration.ApiClient.ParameterToString(shippingAddressSelection)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTPaymentsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

    }
}
