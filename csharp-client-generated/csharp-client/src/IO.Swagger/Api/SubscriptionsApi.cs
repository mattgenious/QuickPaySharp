/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns></returns>
        void DELETESubscriptionsIdLinkFormat (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DELETESubscriptionsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get subscriptions
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription GETSubscriptionsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);

        /// <summary>
        /// Get subscriptions
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> GETSubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription GETSubscriptionsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> GETSubscriptionsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Operation</returns>
        Operation GETSubscriptionsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> GETSubscriptionsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Get all subscription payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Payment</returns>
        Payment GETSubscriptionsIdPaymentsFormat (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get all subscription payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> GETSubscriptionsIdPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Update subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription PATCHSubscriptionsIdFormat (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null);

        /// <summary>
        /// Update subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> PATCHSubscriptionsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null);
        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Operation</returns>
        Operation PATCHSubscriptionsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);

        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>ApiResponse of Operation</returns>
        ApiResponse<Operation> PATCHSubscriptionsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription POSTSubscriptionsFormat (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> POSTSubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null);
        /// <summary>
        /// Authorize a subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription POSTSubscriptionsIdAuthorizeFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null);

        /// <summary>
        /// Authorize a subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> POSTSubscriptionsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null);
        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription POSTSubscriptionsIdCancelFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> POSTSubscriptionsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        FraudReport POSTSubscriptionsIdFraudReportFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        ApiResponse<FraudReport> POSTSubscriptionsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Create subscription recurring payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Payment</returns>
        Payment POSTSubscriptionsIdRecurringFormat (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null);

        /// <summary>
        /// Create subscription recurring payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        ApiResponse<Payment> POSTSubscriptionsIdRecurringFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null);
        /// <summary>
        /// Create subscription session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Subscription</returns>
        Subscription POSTSubscriptionsIdSessionFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null);

        /// <summary>
        /// Create subscription session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        ApiResponse<Subscription> POSTSubscriptionsIdSessionFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null);
        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        PaymentLinkUrl PUTSubscriptionsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null);

        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        ApiResponse<PaymentLinkUrl> PUTSubscriptionsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DELETESubscriptionsIdLinkFormatAsync (string acceptVersion, string authorization, int? id);

        /// <summary>
        /// Delete payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DELETESubscriptionsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id);
        /// <summary>
        /// Get subscriptions
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> GETSubscriptionsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);

        /// <summary>
        /// Get subscriptions
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> GETSubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null);
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> GETSubscriptionsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null);

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> GETSubscriptionsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null);
        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> GETSubscriptionsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId);

        /// <summary>
        /// Get Operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> GETSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId);
        /// <summary>
        /// Get all subscription payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> GETSubscriptionsIdPaymentsFormatAsync (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);

        /// <summary>
        /// Get all subscription payments
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> GETSubscriptionsIdPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null);
        /// <summary>
        /// Update subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> PATCHSubscriptionsIdFormatAsync (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null);

        /// <summary>
        /// Update subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> PATCHSubscriptionsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null);
        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Task of Operation</returns>
        System.Threading.Tasks.Task<Operation> PATCHSubscriptionsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);

        /// <summary>
        /// Update operation
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Operation>> PATCHSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending);
        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> POSTSubscriptionsFormatAsync (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null);

        /// <summary>
        /// Create subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null);
        /// <summary>
        /// Authorize a subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdAuthorizeFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null);

        /// <summary>
        /// Authorize a subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null);
        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdCancelFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);

        /// <summary>
        /// Cancel subscription
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null);
        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        System.Threading.Tasks.Task<FraudReport> POSTSubscriptionsIdFraudReportFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);

        /// <summary>
        /// Create fraud confirmation report
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTSubscriptionsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null);
        /// <summary>
        /// Create subscription recurring payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Task of Payment</returns>
        System.Threading.Tasks.Task<Payment> POSTSubscriptionsIdRecurringFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null);

        /// <summary>
        /// Create subscription recurring payment
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        System.Threading.Tasks.Task<ApiResponse<Payment>> POSTSubscriptionsIdRecurringFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null);
        /// <summary>
        /// Create subscription session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of Subscription</returns>
        System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdSessionFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null);

        /// <summary>
        /// Create subscription session
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdSessionFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null);
        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        System.Threading.Tasks.Task<PaymentLinkUrl> PUTSubscriptionsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null);

        /// <summary>
        /// Create or update a payment link
        /// </summary>
        /// <remarks>
        ///  
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTSubscriptionsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : ISubscriptionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscriptionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns></returns>
        public void DELETESubscriptionsIdLinkFormat (string acceptVersion, string authorization, int? id)
        {
             DELETESubscriptionsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DELETESubscriptionsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");

            var localVarPath = "/subscriptions/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETESubscriptionsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DELETESubscriptionsIdLinkFormatAsync (string acceptVersion, string authorization, int? id)
        {
             await DELETESubscriptionsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id);

        }

        /// <summary>
        /// Delete payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DELETESubscriptionsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DELETESubscriptionsIdLinkFormat");

            var localVarPath = "/subscriptions/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DELETESubscriptionsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get subscriptions  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription GETSubscriptionsFormat (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
             ApiResponse<Subscription> localVarResponse = GETSubscriptionsFormatWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, groupId, fraudSuspected, expired, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscriptions  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > GETSubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsFormat");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id", groupId)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (expired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expired", expired)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get subscriptions  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> GETSubscriptionsFormatAsync (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
             ApiResponse<Subscription> localVarResponse = await GETSubscriptionsFormatAsyncWithHttpInfo(acceptVersion, authorization, dateYear, dateMonth, dateDay, dateHour, dateMinute, timestamp, minTime, maxTime, operationsSize, accepted, orderId, state, id, acquirer, groupId, fraudSuspected, expired, page, pageSize, sortBy, sortDir, pageKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscriptions  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="timestamp">Timestamp field  (optional, default to created_at)</param>
        /// <param name="minTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="maxTime">Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”  (optional)</param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <param name="accepted">Return accepted subscriptions  (optional)</param>
        /// <param name="orderId">Find by order_id  (optional)</param>
        /// <param name="state">Filter by state  (optional)</param>
        /// <param name="id">Find by subscription id  (optional)</param>
        /// <param name="acquirer">Filter by acquirer  (optional)</param>
        /// <param name="groupId">Filter by subscription group  (optional)</param>
        /// <param name="fraudSuspected">Filter by suspected fraud  (optional)</param>
        /// <param name="expired">Filter by expiration  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <param name="pageKey">  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> GETSubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, string timestamp = null, string minTime = null, string maxTime = null, int? operationsSize = null, bool? accepted = null, string orderId = null, string state = null, int? id = null, string acquirer = null, int? groupId = null, bool? fraudSuspected = null, bool? expired = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null, string pageKey = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsFormat");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (timestamp != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", timestamp)); // query parameter
            if (minTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "min_time", minTime)); // query parameter
            if (maxTime != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "max_time", maxTime)); // query parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (acquirer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "acquirer", acquirer)); // query parameter
            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group_id", groupId)); // query parameter
            if (fraudSuspected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fraud_suspected", fraudSuspected)); // query parameter
            if (expired != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expired", expired)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (pageKey != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_key", pageKey)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription GETSubscriptionsIdFormat (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Subscription> localVarResponse = GETSubscriptionsIdFormatWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > GETSubscriptionsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdFormat");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> GETSubscriptionsIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
             ApiResponse<Subscription> localVarResponse = await GETSubscriptionsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationsSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationsSize">Maximum number of operations to retrieve  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> GETSubscriptionsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationsSize = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdFormat");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationsSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "operations_size", operationsSize)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Operation</returns>
        public Operation GETSubscriptionsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = GETSubscriptionsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>ApiResponse of Operation</returns>
        public ApiResponse< Operation > GETSubscriptionsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");

            var localVarPath = "/subscriptions/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> GETSubscriptionsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId)
        {
             ApiResponse<Operation> localVarResponse = await GETSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operation>> GETSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling SubscriptionsApi->GETSubscriptionsIdOperationsOperationIdFormat");

            var localVarPath = "/subscriptions/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Get all subscription payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Payment</returns>
        public Payment GETSubscriptionsIdPaymentsFormat (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Payment> localVarResponse = GETSubscriptionsIdPaymentsFormatWithHttpInfo(acceptVersion, authorization, id, accepted, dateYear, dateMonth, dateDay, dateHour, dateMinute, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all subscription payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > GETSubscriptionsIdPaymentsFormatWithHttpInfo (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");

            var localVarPath = "/subscriptions/{id}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Get all subscription payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> GETSubscriptionsIdPaymentsFormatAsync (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
             ApiResponse<Payment> localVarResponse = await GETSubscriptionsIdPaymentsFormatAsyncWithHttpInfo(acceptVersion, authorization, id, accepted, dateYear, dateMonth, dateDay, dateHour, dateMinute, page, pageSize, sortBy, sortDir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all subscription payments  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="accepted">Return accepted payments  (optional)</param>
        /// <param name="dateYear">Year  (optional)</param>
        /// <param name="dateMonth">Month  (optional)</param>
        /// <param name="dateDay">Day of the month  (optional)</param>
        /// <param name="dateHour">Hour of the day  (optional)</param>
        /// <param name="dateMinute">Minute of the hour  (optional)</param>
        /// <param name="page">Pagination page. Default is 1  (optional, default to 1)</param>
        /// <param name="pageSize">Items per page. Default is 20  (optional, default to 20)</param>
        /// <param name="sortBy">Property to sort by  (optional, default to payment_id)</param>
        /// <param name="sortDir">Sort direction  (optional, default to desc)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> GETSubscriptionsIdPaymentsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, bool? accepted = null, int? dateYear = null, int? dateMonth = null, int? dateDay = null, int? dateHour = null, int? dateMinute = null, int? page = null, int? pageSize = null, string sortBy = null, string sortDir = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GETSubscriptionsIdPaymentsFormat");

            var localVarPath = "/subscriptions/{id}/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (accepted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "accepted", accepted)); // query parameter
            if (dateYear != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[year]", dateYear)); // query parameter
            if (dateMonth != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[month]", dateMonth)); // query parameter
            if (dateDay != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[day]", dateDay)); // query parameter
            if (dateHour != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[hour]", dateHour)); // query parameter
            if (dateMinute != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "date[minute]", dateMinute)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page_size", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_by", sortBy)); // query parameter
            if (sortDir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort_dir", sortDir)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GETSubscriptionsIdPaymentsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Update subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription PATCHSubscriptionsIdFormat (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null)
        {
             ApiResponse<Subscription> localVarResponse = PATCHSubscriptionsIdFormatWithHttpInfo(acceptVersion, authorization, id, deadlineAt, groupIds, description, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, variables);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > PATCHSubscriptionsIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (deadlineAt != null) localVarFormParams.Add("deadline_at", this.Configuration.ApiClient.ParameterToString(deadlineAt)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHSubscriptionsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Update subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> PATCHSubscriptionsIdFormatAsync (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null)
        {
             ApiResponse<Subscription> localVarResponse = await PATCHSubscriptionsIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, deadlineAt, groupIds, description, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, variables);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="deadlineAt">Subscription must be authorized before this time  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="description">Subscription description  (optional)</param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> PATCHSubscriptionsIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, DateTime? deadlineAt = null, string groupIds = null, string description = null, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PATCHSubscriptionsIdFormat");

            var localVarPath = "/subscriptions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (deadlineAt != null) localVarFormParams.Add("deadline_at", this.Configuration.ApiClient.ParameterToString(deadlineAt)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHSubscriptionsIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Operation</returns>
        public Operation PATCHSubscriptionsIdOperationsOperationIdFormat (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
             ApiResponse<Operation> localVarResponse = PATCHSubscriptionsIdOperationsOperationIdFormatWithHttpInfo(acceptVersion, authorization, id, operationId, pending);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>ApiResponse of Operation</returns>
        public ApiResponse< Operation > PATCHSubscriptionsIdOperationsOperationIdFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'pending' is set
            if (pending == null)
                throw new ApiException(400, "Missing required parameter 'pending' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");

            var localVarPath = "/subscriptions/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pending != null) localVarFormParams.Add("pending", this.Configuration.ApiClient.ParameterToString(pending)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHSubscriptionsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Task of Operation</returns>
        public async System.Threading.Tasks.Task<Operation> PATCHSubscriptionsIdOperationsOperationIdFormatAsync (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
             ApiResponse<Operation> localVarResponse = await PATCHSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo(acceptVersion, authorization, id, operationId, pending);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update operation  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="operationId">Operations id </param>
        /// <param name="pending">Aborts the operation. Only possible on cancel operations (false is the only allowed value) </param>
        /// <returns>Task of ApiResponse (Operation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Operation>> PATCHSubscriptionsIdOperationsOperationIdFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? operationId, bool? pending)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'operationId' is set
            if (operationId == null)
                throw new ApiException(400, "Missing required parameter 'operationId' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");
            // verify the required parameter 'pending' is set
            if (pending == null)
                throw new ApiException(400, "Missing required parameter 'pending' when calling SubscriptionsApi->PATCHSubscriptionsIdOperationsOperationIdFormat");

            var localVarPath = "/subscriptions/{id}/operations/{operation_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (operationId != null) localVarPathParams.Add("operation_id", this.Configuration.ApiClient.ParameterToString(operationId)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (pending != null) localVarFormParams.Add("pending", this.Configuration.ApiClient.ParameterToString(pending)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PATCHSubscriptionsIdOperationsOperationIdFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Operation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Operation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Operation)));
        }

        /// <summary>
        /// Create subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription POSTSubscriptionsFormat (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null)
        {
             ApiResponse<Subscription> localVarResponse = POSTSubscriptionsFormatWithHttpInfo(acceptVersion, authorization, orderId, currency, description, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, variables, brandingId, groupIds, textOnStatement, shopsystemName, shopsystemVersion);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > POSTSubscriptionsFormatWithHttpInfo (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling SubscriptionsApi->POSTSubscriptionsFormat");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter
            if (shopsystemName != null) localVarFormParams.Add("shopsystem[name]", this.Configuration.ApiClient.ParameterToString(shopsystemName)); // form parameter
            if (shopsystemVersion != null) localVarFormParams.Add("shopsystem[version]", this.Configuration.ApiClient.ParameterToString(shopsystemVersion)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> POSTSubscriptionsFormatAsync (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null)
        {
             ApiResponse<Subscription> localVarResponse = await POSTSubscriptionsFormatAsyncWithHttpInfo(acceptVersion, authorization, orderId, currency, description, invoiceAddressName, invoiceAddressAtt, invoiceAddressCompanyName, invoiceAddressStreet, invoiceAddressHouseNumber, invoiceAddressHouseExtension, invoiceAddressCity, invoiceAddressZipCode, invoiceAddressRegion, invoiceAddressCountryCode, invoiceAddressVatNo, invoiceAddressPhoneNumber, invoiceAddressMobileNumber, invoiceAddressEmail, shippingAddressName, shippingAddressAtt, shippingAddressCompanyName, shippingAddressStreet, shippingAddressHouseNumber, shippingAddressHouseExtension, shippingAddressCity, shippingAddressZipCode, shippingAddressRegion, shippingAddressCountryCode, shippingAddressVatNo, shippingAddressPhoneNumber, shippingAddressMobileNumber, shippingAddressEmail, variables, brandingId, groupIds, textOnStatement, shopsystemName, shopsystemVersion);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="currency">Currency </param>
        /// <param name="description">Subscription description </param>
        /// <param name="invoiceAddressName">Name  (optional)</param>
        /// <param name="invoiceAddressAtt">Att  (optional)</param>
        /// <param name="invoiceAddressCompanyName">Company name  (optional)</param>
        /// <param name="invoiceAddressStreet">Street  (optional)</param>
        /// <param name="invoiceAddressHouseNumber">House number  (optional)</param>
        /// <param name="invoiceAddressHouseExtension">House extension  (optional)</param>
        /// <param name="invoiceAddressCity">City  (optional)</param>
        /// <param name="invoiceAddressZipCode">Zip code  (optional)</param>
        /// <param name="invoiceAddressRegion">Region  (optional)</param>
        /// <param name="invoiceAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="invoiceAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="invoiceAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="invoiceAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="invoiceAddressEmail">Email address  (optional)</param>
        /// <param name="shippingAddressName">Name  (optional)</param>
        /// <param name="shippingAddressAtt">Att  (optional)</param>
        /// <param name="shippingAddressCompanyName">Company name  (optional)</param>
        /// <param name="shippingAddressStreet">Street  (optional)</param>
        /// <param name="shippingAddressHouseNumber">House number  (optional)</param>
        /// <param name="shippingAddressHouseExtension">House extension  (optional)</param>
        /// <param name="shippingAddressCity">City  (optional)</param>
        /// <param name="shippingAddressZipCode">Zip code  (optional)</param>
        /// <param name="shippingAddressRegion">Region  (optional)</param>
        /// <param name="shippingAddressCountryCode">Three letter country code according to ISO 3166-1 Alpha-3  (optional)</param>
        /// <param name="shippingAddressVatNo">VAT registration number  (optional)</param>
        /// <param name="shippingAddressPhoneNumber">Phone number  (optional)</param>
        /// <param name="shippingAddressMobileNumber">Mobile number  (optional)</param>
        /// <param name="shippingAddressEmail">Email address  (optional)</param>
        /// <param name="variables">Custom variables  (optional, default to {})</param>
        /// <param name="brandingId">Used branding id  (optional)</param>
        /// <param name="groupIds">Ids of subscription groups  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <param name="shopsystemName">Shop system module name  (optional)</param>
        /// <param name="shopsystemVersion">Shop system module version  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsFormatAsyncWithHttpInfo (string acceptVersion, string authorization, string orderId, string currency, string description, string invoiceAddressName = null, string invoiceAddressAtt = null, string invoiceAddressCompanyName = null, string invoiceAddressStreet = null, string invoiceAddressHouseNumber = null, string invoiceAddressHouseExtension = null, string invoiceAddressCity = null, string invoiceAddressZipCode = null, string invoiceAddressRegion = null, string invoiceAddressCountryCode = null, string invoiceAddressVatNo = null, string invoiceAddressPhoneNumber = null, string invoiceAddressMobileNumber = null, string invoiceAddressEmail = null, string shippingAddressName = null, string shippingAddressAtt = null, string shippingAddressCompanyName = null, string shippingAddressStreet = null, string shippingAddressHouseNumber = null, string shippingAddressHouseExtension = null, string shippingAddressCity = null, string shippingAddressZipCode = null, string shippingAddressRegion = null, string shippingAddressCountryCode = null, string shippingAddressVatNo = null, string shippingAddressPhoneNumber = null, string shippingAddressMobileNumber = null, string shippingAddressEmail = null, string variables = null, int? brandingId = null, string groupIds = null, string textOnStatement = null, string shopsystemName = null, string shopsystemVersion = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'currency' is set
            if (currency == null)
                throw new ApiException(400, "Missing required parameter 'currency' when calling SubscriptionsApi->POSTSubscriptionsFormat");
            // verify the required parameter 'description' is set
            if (description == null)
                throw new ApiException(400, "Missing required parameter 'description' when calling SubscriptionsApi->POSTSubscriptionsFormat");

            var localVarPath = "/subscriptions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (invoiceAddressName != null) localVarFormParams.Add("invoice_address[name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressName)); // form parameter
            if (invoiceAddressAtt != null) localVarFormParams.Add("invoice_address[att]", this.Configuration.ApiClient.ParameterToString(invoiceAddressAtt)); // form parameter
            if (invoiceAddressCompanyName != null) localVarFormParams.Add("invoice_address[company_name]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCompanyName)); // form parameter
            if (invoiceAddressStreet != null) localVarFormParams.Add("invoice_address[street]", this.Configuration.ApiClient.ParameterToString(invoiceAddressStreet)); // form parameter
            if (invoiceAddressHouseNumber != null) localVarFormParams.Add("invoice_address[house_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseNumber)); // form parameter
            if (invoiceAddressHouseExtension != null) localVarFormParams.Add("invoice_address[house_extension]", this.Configuration.ApiClient.ParameterToString(invoiceAddressHouseExtension)); // form parameter
            if (invoiceAddressCity != null) localVarFormParams.Add("invoice_address[city]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCity)); // form parameter
            if (invoiceAddressZipCode != null) localVarFormParams.Add("invoice_address[zip_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressZipCode)); // form parameter
            if (invoiceAddressRegion != null) localVarFormParams.Add("invoice_address[region]", this.Configuration.ApiClient.ParameterToString(invoiceAddressRegion)); // form parameter
            if (invoiceAddressCountryCode != null) localVarFormParams.Add("invoice_address[country_code]", this.Configuration.ApiClient.ParameterToString(invoiceAddressCountryCode)); // form parameter
            if (invoiceAddressVatNo != null) localVarFormParams.Add("invoice_address[vat_no]", this.Configuration.ApiClient.ParameterToString(invoiceAddressVatNo)); // form parameter
            if (invoiceAddressPhoneNumber != null) localVarFormParams.Add("invoice_address[phone_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressPhoneNumber)); // form parameter
            if (invoiceAddressMobileNumber != null) localVarFormParams.Add("invoice_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(invoiceAddressMobileNumber)); // form parameter
            if (invoiceAddressEmail != null) localVarFormParams.Add("invoice_address[email]", this.Configuration.ApiClient.ParameterToString(invoiceAddressEmail)); // form parameter
            if (shippingAddressName != null) localVarFormParams.Add("shipping_address[name]", this.Configuration.ApiClient.ParameterToString(shippingAddressName)); // form parameter
            if (shippingAddressAtt != null) localVarFormParams.Add("shipping_address[att]", this.Configuration.ApiClient.ParameterToString(shippingAddressAtt)); // form parameter
            if (shippingAddressCompanyName != null) localVarFormParams.Add("shipping_address[company_name]", this.Configuration.ApiClient.ParameterToString(shippingAddressCompanyName)); // form parameter
            if (shippingAddressStreet != null) localVarFormParams.Add("shipping_address[street]", this.Configuration.ApiClient.ParameterToString(shippingAddressStreet)); // form parameter
            if (shippingAddressHouseNumber != null) localVarFormParams.Add("shipping_address[house_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseNumber)); // form parameter
            if (shippingAddressHouseExtension != null) localVarFormParams.Add("shipping_address[house_extension]", this.Configuration.ApiClient.ParameterToString(shippingAddressHouseExtension)); // form parameter
            if (shippingAddressCity != null) localVarFormParams.Add("shipping_address[city]", this.Configuration.ApiClient.ParameterToString(shippingAddressCity)); // form parameter
            if (shippingAddressZipCode != null) localVarFormParams.Add("shipping_address[zip_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressZipCode)); // form parameter
            if (shippingAddressRegion != null) localVarFormParams.Add("shipping_address[region]", this.Configuration.ApiClient.ParameterToString(shippingAddressRegion)); // form parameter
            if (shippingAddressCountryCode != null) localVarFormParams.Add("shipping_address[country_code]", this.Configuration.ApiClient.ParameterToString(shippingAddressCountryCode)); // form parameter
            if (shippingAddressVatNo != null) localVarFormParams.Add("shipping_address[vat_no]", this.Configuration.ApiClient.ParameterToString(shippingAddressVatNo)); // form parameter
            if (shippingAddressPhoneNumber != null) localVarFormParams.Add("shipping_address[phone_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressPhoneNumber)); // form parameter
            if (shippingAddressMobileNumber != null) localVarFormParams.Add("shipping_address[mobile_number]", this.Configuration.ApiClient.ParameterToString(shippingAddressMobileNumber)); // form parameter
            if (shippingAddressEmail != null) localVarFormParams.Add("shipping_address[email]", this.Configuration.ApiClient.ParameterToString(shippingAddressEmail)); // form parameter
            if (variables != null) localVarFormParams.Add("variables", this.Configuration.ApiClient.ParameterToString(variables)); // form parameter
            if (currency != null) localVarFormParams.Add("currency", this.Configuration.ApiClient.ParameterToString(currency)); // form parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (groupIds != null) localVarFormParams.Add("group_ids", this.Configuration.ApiClient.ParameterToString(groupIds)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter
            if (shopsystemName != null) localVarFormParams.Add("shopsystem[name]", this.Configuration.ApiClient.ParameterToString(shopsystemName)); // form parameter
            if (shopsystemVersion != null) localVarFormParams.Add("shopsystem[version]", this.Configuration.ApiClient.ParameterToString(shopsystemVersion)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Authorize a subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription POSTSubscriptionsIdAuthorizeFormat (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null)
        {
             ApiResponse<Subscription> localVarResponse = POSTSubscriptionsIdAuthorizeFormatWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, acquirer, customerIp, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize a subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > POSTSubscriptionsIdAuthorizeFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");

            var localVarPath = "/subscriptions/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Authorize a subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdAuthorizeFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null)
        {
             ApiResponse<Subscription> localVarResponse = await POSTSubscriptionsIdAuthorizeFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, quickPayCallbackUrl, synchronized, vatRate, cardNumber, cardExpiration, cardCvd, cardToken, cardApplePayToken, cardMobilepayOnlineToken, cardIssuedTo, cardBrand, cardStatus, cardEci, cardXav, cardCavv, mobileNumber, ninNumber, ninCountryCode, ninGender, personFirstName, personLastName, personEmail, acquirer, customerIp, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authorize a subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="vatRate">Vate rate  (optional)</param>
        /// <param name="cardNumber">Card number  (optional)</param>
        /// <param name="cardExpiration">Expiration date (YYMM)  (optional)</param>
        /// <param name="cardCvd">CVD/CVV  (optional)</param>
        /// <param name="cardToken">Card token  (optional)</param>
        /// <param name="cardApplePayToken">Apple Pay payment-token  (optional)</param>
        /// <param name="cardMobilepayOnlineToken">MobilePay Online payment-token  (optional)</param>
        /// <param name="cardIssuedTo">Card holder name  (optional)</param>
        /// <param name="cardBrand">Brand to use on multi-brand card  (optional)</param>
        /// <param name="cardStatus">3D-Secure status  (optional)</param>
        /// <param name="cardEci">3D-Secure eci  (optional)</param>
        /// <param name="cardXav">3D-Secure xav  (optional)</param>
        /// <param name="cardCavv">3D-Secure cavv  (optional)</param>
        /// <param name="mobileNumber">Mobile number  (optional)</param>
        /// <param name="ninNumber">Customer NIN Number  (optional)</param>
        /// <param name="ninCountryCode">Customer country (ISO 3166-1 Alpha-3)  (optional)</param>
        /// <param name="ninGender">Customer gender  (optional)</param>
        /// <param name="personFirstName">Person first name  (optional)</param>
        /// <param name="personLastName">Person last name  (optional)</param>
        /// <param name="personEmail">Person email  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdAuthorizeFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string quickPayCallbackUrl = null, bool? synchronized = null, float? vatRate = null, string cardNumber = null, string cardExpiration = null, string cardCvd = null, string cardToken = null, string cardApplePayToken = null, string cardMobilepayOnlineToken = null, string cardIssuedTo = null, string cardBrand = null, string cardStatus = null, string cardEci = null, string cardXav = null, string cardCavv = null, string mobileNumber = null, string ninNumber = null, string ninCountryCode = null, string ninGender = null, string personFirstName = null, string personLastName = null, string personEmail = null, string acquirer = null, string customerIp = null, string extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->POSTSubscriptionsIdAuthorizeFormat");

            var localVarPath = "/subscriptions/{id}/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (vatRate != null) localVarFormParams.Add("vat_rate", this.Configuration.ApiClient.ParameterToString(vatRate)); // form parameter
            if (cardNumber != null) localVarFormParams.Add("card[number]", this.Configuration.ApiClient.ParameterToString(cardNumber)); // form parameter
            if (cardExpiration != null) localVarFormParams.Add("card[expiration]", this.Configuration.ApiClient.ParameterToString(cardExpiration)); // form parameter
            if (cardCvd != null) localVarFormParams.Add("card[cvd]", this.Configuration.ApiClient.ParameterToString(cardCvd)); // form parameter
            if (cardToken != null) localVarFormParams.Add("card[token]", this.Configuration.ApiClient.ParameterToString(cardToken)); // form parameter
            if (cardApplePayToken != null) localVarFormParams.Add("card[apple_pay_token]", this.Configuration.ApiClient.ParameterToString(cardApplePayToken)); // form parameter
            if (cardMobilepayOnlineToken != null) localVarFormParams.Add("card[mobilepay_online_token]", this.Configuration.ApiClient.ParameterToString(cardMobilepayOnlineToken)); // form parameter
            if (cardIssuedTo != null) localVarFormParams.Add("card[issued_to]", this.Configuration.ApiClient.ParameterToString(cardIssuedTo)); // form parameter
            if (cardBrand != null) localVarFormParams.Add("card[brand]", this.Configuration.ApiClient.ParameterToString(cardBrand)); // form parameter
            if (cardStatus != null) localVarFormParams.Add("card[status]", this.Configuration.ApiClient.ParameterToString(cardStatus)); // form parameter
            if (cardEci != null) localVarFormParams.Add("card[eci]", this.Configuration.ApiClient.ParameterToString(cardEci)); // form parameter
            if (cardXav != null) localVarFormParams.Add("card[xav]", this.Configuration.ApiClient.ParameterToString(cardXav)); // form parameter
            if (cardCavv != null) localVarFormParams.Add("card[cavv]", this.Configuration.ApiClient.ParameterToString(cardCavv)); // form parameter
            if (mobileNumber != null) localVarFormParams.Add("mobile_number", this.Configuration.ApiClient.ParameterToString(mobileNumber)); // form parameter
            if (ninNumber != null) localVarFormParams.Add("nin[number]", this.Configuration.ApiClient.ParameterToString(ninNumber)); // form parameter
            if (ninCountryCode != null) localVarFormParams.Add("nin[country_code]", this.Configuration.ApiClient.ParameterToString(ninCountryCode)); // form parameter
            if (ninGender != null) localVarFormParams.Add("nin[gender]", this.Configuration.ApiClient.ParameterToString(ninGender)); // form parameter
            if (personFirstName != null) localVarFormParams.Add("person[first_name]", this.Configuration.ApiClient.ParameterToString(personFirstName)); // form parameter
            if (personLastName != null) localVarFormParams.Add("person[last_name]", this.Configuration.ApiClient.ParameterToString(personLastName)); // form parameter
            if (personEmail != null) localVarFormParams.Add("person[email]", this.Configuration.ApiClient.ParameterToString(personEmail)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdAuthorizeFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Cancel subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription POSTSubscriptionsIdCancelFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Subscription> localVarResponse = POSTSubscriptionsIdCancelFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > POSTSubscriptionsIdCancelFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");

            var localVarPath = "/subscriptions/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Cancel subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdCancelFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
             ApiResponse<Subscription> localVarResponse = await POSTSubscriptionsIdCancelFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, synchronized);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel subscription  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdCancelFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, bool? synchronized = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdCancelFormat");

            var localVarPath = "/subscriptions/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdCancelFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>FraudReport</returns>
        public FraudReport POSTSubscriptionsIdFraudReportFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = POSTSubscriptionsIdFraudReportFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>ApiResponse of FraudReport</returns>
        public ApiResponse< FraudReport > POSTSubscriptionsIdFraudReportFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");

            var localVarPath = "/subscriptions/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of FraudReport</returns>
        public async System.Threading.Tasks.Task<FraudReport> POSTSubscriptionsIdFraudReportFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
             ApiResponse<FraudReport> localVarResponse = await POSTSubscriptionsIdFraudReportFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, description);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create fraud confirmation report  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="description">  (optional)</param>
        /// <returns>Task of ApiResponse (FraudReport)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FraudReport>> POSTSubscriptionsIdFraudReportFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string description = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdFraudReportFormat");

            var localVarPath = "/subscriptions/{id}/fraud-report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (description != null) localVarFormParams.Add("description", this.Configuration.ApiClient.ParameterToString(description)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdFraudReportFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FraudReport>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FraudReport) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FraudReport)));
        }

        /// <summary>
        /// Create subscription recurring payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Payment</returns>
        public Payment POSTSubscriptionsIdRecurringFormat (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null)
        {
             ApiResponse<Payment> localVarResponse = POSTSubscriptionsIdRecurringFormatWithHttpInfo(acceptVersion, authorization, id, amount, orderId, quickPayCallbackUrl, synchronized, autoCapture, autofee, zeroAuth, textOnStatement);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription recurring payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>ApiResponse of Payment</returns>
        public ApiResponse< Payment > POSTSubscriptionsIdRecurringFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");

            var localVarPath = "/subscriptions/{id}/recurring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (zeroAuth != null) localVarFormParams.Add("zero_auth", this.Configuration.ApiClient.ParameterToString(zeroAuth)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdRecurringFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create subscription recurring payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Task of Payment</returns>
        public async System.Threading.Tasks.Task<Payment> POSTSubscriptionsIdRecurringFormatAsync (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null)
        {
             ApiResponse<Payment> localVarResponse = await POSTSubscriptionsIdRecurringFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, orderId, quickPayCallbackUrl, synchronized, autoCapture, autofee, zeroAuth, textOnStatement);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription recurring payment  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="amount">Amount </param>
        /// <param name="orderId">Unique order id(must be between 4-20 characters) </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="synchronized">DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)  (optional)</param>
        /// <param name="autoCapture">When true, payment is captured after authorization. Default is false  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="zeroAuth">(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false  (optional)</param>
        /// <param name="textOnStatement">Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.  (optional)</param>
        /// <returns>Task of ApiResponse (Payment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Payment>> POSTSubscriptionsIdRecurringFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, string orderId, string quickPayCallbackUrl = null, bool? synchronized = null, bool? autoCapture = null, bool? autofee = null, bool? zeroAuth = null, string textOnStatement = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");
            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new ApiException(400, "Missing required parameter 'orderId' when calling SubscriptionsApi->POSTSubscriptionsIdRecurringFormat");

            var localVarPath = "/subscriptions/{id}/recurring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (synchronized != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "synchronized", synchronized)); // query parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (orderId != null) localVarFormParams.Add("order_id", this.Configuration.ApiClient.ParameterToString(orderId)); // form parameter
            if (autoCapture != null) localVarFormParams.Add("auto_capture", this.Configuration.ApiClient.ParameterToString(autoCapture)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (zeroAuth != null) localVarFormParams.Add("zero_auth", this.Configuration.ApiClient.ParameterToString(zeroAuth)); // form parameter
            if (textOnStatement != null) localVarFormParams.Add("text_on_statement", this.Configuration.ApiClient.ParameterToString(textOnStatement)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdRecurringFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Payment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Payment) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Payment)));
        }

        /// <summary>
        /// Create subscription session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Subscription</returns>
        public Subscription POSTSubscriptionsIdSessionFormat (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null)
        {
             ApiResponse<Subscription> localVarResponse = POSTSubscriptionsIdSessionFormatWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, acquirer, autofee, customerIp, extras);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>ApiResponse of Subscription</returns>
        public ApiResponse< Subscription > POSTSubscriptionsIdSessionFormatWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");

            var localVarPath = "/subscriptions/{id}/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdSessionFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create subscription session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of Subscription</returns>
        public async System.Threading.Tasks.Task<Subscription> POSTSubscriptionsIdSessionFormatAsync (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null)
        {
             ApiResponse<Subscription> localVarResponse = await POSTSubscriptionsIdSessionFormatAsyncWithHttpInfo(acceptVersion, authorization, id, quickPayCallbackUrl, acquirer, autofee, customerIp, extras);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create subscription session  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Subscription id </param>
        /// <param name="quickPayCallbackUrl">Specify the callback url (overrides merchant default callback-url)  (optional)</param>
        /// <param name="acquirer">If set, will force the use of this acquirer  (optional)</param>
        /// <param name="autofee">When true, fee is calculated and added to the given amount. Default is merchant autofee  (optional)</param>
        /// <param name="customerIp">Customer IP  (optional)</param>
        /// <param name="extras">Additional acquirer specific params  (optional)</param>
        /// <returns>Task of ApiResponse (Subscription)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Subscription>> POSTSubscriptionsIdSessionFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, string quickPayCallbackUrl = null, string acquirer = null, bool? autofee = null, string customerIp = null, string extras = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->POSTSubscriptionsIdSessionFormat");

            var localVarPath = "/subscriptions/{id}/session";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (quickPayCallbackUrl != null) localVarHeaderParams.Add("QuickPay-Callback-Url", this.Configuration.ApiClient.ParameterToString(quickPayCallbackUrl)); // header parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (autofee != null) localVarFormParams.Add("autofee", this.Configuration.ApiClient.ParameterToString(autofee)); // form parameter
            if (customerIp != null) localVarFormParams.Add("customer_ip", this.Configuration.ApiClient.ParameterToString(customerIp)); // form parameter
            if (extras != null) localVarFormParams.Add("extras", this.Configuration.ApiClient.ParameterToString(extras)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("POSTSubscriptionsIdSessionFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Subscription>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Subscription) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Subscription)));
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>PaymentLinkUrl</returns>
        public PaymentLinkUrl PUTSubscriptionsIdLinkFormat (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = PUTSubscriptionsIdLinkFormatWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, autoFee, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, deadline, framed, brandingConfig, customerEmail, invoiceAddressSelection, shippingAddressSelection);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>ApiResponse of PaymentLinkUrl</returns>
        public ApiResponse< PaymentLinkUrl > PUTSubscriptionsIdLinkFormatWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");

            var localVarPath = "/subscriptions/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (autoFee != null) localVarFormParams.Add("auto_fee", this.Configuration.ApiClient.ParameterToString(autoFee)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (deadline != null) localVarFormParams.Add("deadline", this.Configuration.ApiClient.ParameterToString(deadline)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter
            if (customerEmail != null) localVarFormParams.Add("customer_email", this.Configuration.ApiClient.ParameterToString(customerEmail)); // form parameter
            if (invoiceAddressSelection != null) localVarFormParams.Add("invoice_address_selection", this.Configuration.ApiClient.ParameterToString(invoiceAddressSelection)); // form parameter
            if (shippingAddressSelection != null) localVarFormParams.Add("shipping_address_selection", this.Configuration.ApiClient.ParameterToString(shippingAddressSelection)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTSubscriptionsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>Task of PaymentLinkUrl</returns>
        public async System.Threading.Tasks.Task<PaymentLinkUrl> PUTSubscriptionsIdLinkFormatAsync (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null)
        {
             ApiResponse<PaymentLinkUrl> localVarResponse = await PUTSubscriptionsIdLinkFormatAsyncWithHttpInfo(acceptVersion, authorization, id, amount, agreementId, language, continueUrl, cancelUrl, callbackUrl, paymentMethods, autoFee, brandingId, googleAnalyticsTrackingId, googleAnalyticsClientId, acquirer, deadline, framed, brandingConfig, customerEmail, invoiceAddressSelection, shippingAddressSelection);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create or update a payment link  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptVersion">Specify the version of the API </param>
        /// <param name="authorization">Use Basic Auth to authorize to the API </param>
        /// <param name="id">Transaction id </param>
        /// <param name="amount">Amount to authorize </param>
        /// <param name="agreementId">Agreement to use. Defaults to the Payment Window agreement  (optional)</param>
        /// <param name="language">Language  (optional, default to en)</param>
        /// <param name="continueUrl">Url that cardholder is redirected to after authorize  (optional)</param>
        /// <param name="cancelUrl">Url that cardholder is redirected to after cancelation  (optional)</param>
        /// <param name="callbackUrl">Endpoint for async callback  (optional)</param>
        /// <param name="paymentMethods">Limit payment methods  (optional)</param>
        /// <param name="autoFee">Add acquirer fee to amount. Default is merchant autofee  (optional)</param>
        /// <param name="brandingId">Override branding. Default is merchant default branding  (optional)</param>
        /// <param name="googleAnalyticsTrackingId">Send events to Google Analytics  (optional)</param>
        /// <param name="googleAnalyticsClientId">Send events to Google Analytics  (optional)</param>
        /// <param name="acquirer">Force usage of the given acquirer  (optional)</param>
        /// <param name="deadline">Set a deadline in seconds for the cardholder to complete  (optional)</param>
        /// <param name="framed">Allow opening in iframe  (optional)</param>
        /// <param name="brandingConfig">Config for branding. Will be merged with the default config in the branding  (optional)</param>
        /// <param name="customerEmail">Required for PayPal. Email of customer.  (optional)</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only)  (optional)</param>
        /// <returns>Task of ApiResponse (PaymentLinkUrl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentLinkUrl>> PUTSubscriptionsIdLinkFormatAsyncWithHttpInfo (string acceptVersion, string authorization, int? id, int? amount, int? agreementId = null, string language = null, string continueUrl = null, string cancelUrl = null, string callbackUrl = null, string paymentMethods = null, bool? autoFee = null, int? brandingId = null, string googleAnalyticsTrackingId = null, string googleAnalyticsClientId = null, string acquirer = null, int? deadline = null, bool? framed = null, string brandingConfig = null, string customerEmail = null, bool? invoiceAddressSelection = null, bool? shippingAddressSelection = null)
        {
            // verify the required parameter 'acceptVersion' is set
            if (acceptVersion == null)
                throw new ApiException(400, "Missing required parameter 'acceptVersion' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");
            // verify the required parameter 'amount' is set
            if (amount == null)
                throw new ApiException(400, "Missing required parameter 'amount' when calling SubscriptionsApi->PUTSubscriptionsIdLinkFormat");

            var localVarPath = "/subscriptions/{id}/link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/xml",
                "application/json",
                "application/octet-stream",
                "text/plain"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptVersion != null) localVarHeaderParams.Add("Accept-Version", this.Configuration.ApiClient.ParameterToString(acceptVersion)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (amount != null) localVarFormParams.Add("amount", this.Configuration.ApiClient.ParameterToString(amount)); // form parameter
            if (agreementId != null) localVarFormParams.Add("agreement_id", this.Configuration.ApiClient.ParameterToString(agreementId)); // form parameter
            if (language != null) localVarFormParams.Add("language", this.Configuration.ApiClient.ParameterToString(language)); // form parameter
            if (continueUrl != null) localVarFormParams.Add("continue_url", this.Configuration.ApiClient.ParameterToString(continueUrl)); // form parameter
            if (cancelUrl != null) localVarFormParams.Add("cancel_url", this.Configuration.ApiClient.ParameterToString(cancelUrl)); // form parameter
            if (callbackUrl != null) localVarFormParams.Add("callback_url", this.Configuration.ApiClient.ParameterToString(callbackUrl)); // form parameter
            if (paymentMethods != null) localVarFormParams.Add("payment_methods", this.Configuration.ApiClient.ParameterToString(paymentMethods)); // form parameter
            if (autoFee != null) localVarFormParams.Add("auto_fee", this.Configuration.ApiClient.ParameterToString(autoFee)); // form parameter
            if (brandingId != null) localVarFormParams.Add("branding_id", this.Configuration.ApiClient.ParameterToString(brandingId)); // form parameter
            if (googleAnalyticsTrackingId != null) localVarFormParams.Add("google_analytics_tracking_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsTrackingId)); // form parameter
            if (googleAnalyticsClientId != null) localVarFormParams.Add("google_analytics_client_id", this.Configuration.ApiClient.ParameterToString(googleAnalyticsClientId)); // form parameter
            if (acquirer != null) localVarFormParams.Add("acquirer", this.Configuration.ApiClient.ParameterToString(acquirer)); // form parameter
            if (deadline != null) localVarFormParams.Add("deadline", this.Configuration.ApiClient.ParameterToString(deadline)); // form parameter
            if (framed != null) localVarFormParams.Add("framed", this.Configuration.ApiClient.ParameterToString(framed)); // form parameter
            if (brandingConfig != null) localVarFormParams.Add("branding_config", this.Configuration.ApiClient.ParameterToString(brandingConfig)); // form parameter
            if (customerEmail != null) localVarFormParams.Add("customer_email", this.Configuration.ApiClient.ParameterToString(customerEmail)); // form parameter
            if (invoiceAddressSelection != null) localVarFormParams.Add("invoice_address_selection", this.Configuration.ApiClient.ParameterToString(invoiceAddressSelection)); // form parameter
            if (shippingAddressSelection != null) localVarFormParams.Add("shipping_address_selection", this.Configuration.ApiClient.ParameterToString(shippingAddressSelection)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PUTSubscriptionsIdLinkFormat", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentLinkUrl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PaymentLinkUrl) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentLinkUrl)));
        }

    }
}
