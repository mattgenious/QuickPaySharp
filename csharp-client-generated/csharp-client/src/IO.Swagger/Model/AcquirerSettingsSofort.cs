/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AcquirerSettingsSofort
    /// </summary>
    [DataContract]
    public partial class AcquirerSettingsSofort :  IEquatable<AcquirerSettingsSofort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirerSettingsSofort" /> class.
        /// </summary>
        /// <param name="active">True if the acquirer is active.</param>
        /// <param name="apiKey">Sofort api-key.</param>
        /// <param name="customerNumber">Sofort customer number.</param>
        /// <param name="gateway">Sofort gateway feature enabled.</param>
        /// <param name="ideal">Sofort iDeal feature enabled.</param>
        /// <param name="idealNotificationPassword">Sofort iDeal notification password.</param>
        /// <param name="idealProjectId">Sofort iDeal project id.</param>
        /// <param name="idealProjectPassword">Sofort iDeal project password.</param>
        /// <param name="projectId">Sofort gateway project id.</param>
        public AcquirerSettingsSofort(bool? active = default(bool?), string apiKey = default(string), int? customerNumber = default(int?), bool? gateway = default(bool?), bool? ideal = default(bool?), string idealNotificationPassword = default(string), int? idealProjectId = default(int?), string idealProjectPassword = default(string), int? projectId = default(int?))
        {
            this.Active = active;
            this.ApiKey = apiKey;
            this.CustomerNumber = customerNumber;
            this.Gateway = gateway;
            this.Ideal = ideal;
            this.IdealNotificationPassword = idealNotificationPassword;
            this.IdealProjectId = idealProjectId;
            this.IdealProjectPassword = idealProjectPassword;
            this.ProjectId = projectId;
        }
        
        /// <summary>
        /// True if the acquirer is active
        /// </summary>
        /// <value>True if the acquirer is active</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Sofort api-key
        /// </summary>
        /// <value>Sofort api-key</value>
        [DataMember(Name="api_key", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Sofort customer number
        /// </summary>
        /// <value>Sofort customer number</value>
        [DataMember(Name="customer_number", EmitDefaultValue=false)]
        public int? CustomerNumber { get; set; }

        /// <summary>
        /// Sofort gateway feature enabled
        /// </summary>
        /// <value>Sofort gateway feature enabled</value>
        [DataMember(Name="gateway", EmitDefaultValue=false)]
        public bool? Gateway { get; set; }

        /// <summary>
        /// Sofort iDeal feature enabled
        /// </summary>
        /// <value>Sofort iDeal feature enabled</value>
        [DataMember(Name="ideal", EmitDefaultValue=false)]
        public bool? Ideal { get; set; }

        /// <summary>
        /// Sofort iDeal notification password
        /// </summary>
        /// <value>Sofort iDeal notification password</value>
        [DataMember(Name="ideal_notification_password", EmitDefaultValue=false)]
        public string IdealNotificationPassword { get; set; }

        /// <summary>
        /// Sofort iDeal project id
        /// </summary>
        /// <value>Sofort iDeal project id</value>
        [DataMember(Name="ideal_project_id", EmitDefaultValue=false)]
        public int? IdealProjectId { get; set; }

        /// <summary>
        /// Sofort iDeal project password
        /// </summary>
        /// <value>Sofort iDeal project password</value>
        [DataMember(Name="ideal_project_password", EmitDefaultValue=false)]
        public string IdealProjectPassword { get; set; }

        /// <summary>
        /// Sofort gateway project id
        /// </summary>
        /// <value>Sofort gateway project id</value>
        [DataMember(Name="project_id", EmitDefaultValue=false)]
        public int? ProjectId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcquirerSettingsSofort {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  CustomerNumber: ").Append(CustomerNumber).Append("\n");
            sb.Append("  Gateway: ").Append(Gateway).Append("\n");
            sb.Append("  Ideal: ").Append(Ideal).Append("\n");
            sb.Append("  IdealNotificationPassword: ").Append(IdealNotificationPassword).Append("\n");
            sb.Append("  IdealProjectId: ").Append(IdealProjectId).Append("\n");
            sb.Append("  IdealProjectPassword: ").Append(IdealProjectPassword).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcquirerSettingsSofort);
        }

        /// <summary>
        /// Returns true if AcquirerSettingsSofort instances are equal
        /// </summary>
        /// <param name="input">Instance of AcquirerSettingsSofort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcquirerSettingsSofort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.CustomerNumber == input.CustomerNumber ||
                    (this.CustomerNumber != null &&
                    this.CustomerNumber.Equals(input.CustomerNumber))
                ) && 
                (
                    this.Gateway == input.Gateway ||
                    (this.Gateway != null &&
                    this.Gateway.Equals(input.Gateway))
                ) && 
                (
                    this.Ideal == input.Ideal ||
                    (this.Ideal != null &&
                    this.Ideal.Equals(input.Ideal))
                ) && 
                (
                    this.IdealNotificationPassword == input.IdealNotificationPassword ||
                    (this.IdealNotificationPassword != null &&
                    this.IdealNotificationPassword.Equals(input.IdealNotificationPassword))
                ) && 
                (
                    this.IdealProjectId == input.IdealProjectId ||
                    (this.IdealProjectId != null &&
                    this.IdealProjectId.Equals(input.IdealProjectId))
                ) && 
                (
                    this.IdealProjectPassword == input.IdealProjectPassword ||
                    (this.IdealProjectPassword != null &&
                    this.IdealProjectPassword.Equals(input.IdealProjectPassword))
                ) && 
                (
                    this.ProjectId == input.ProjectId ||
                    (this.ProjectId != null &&
                    this.ProjectId.Equals(input.ProjectId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.CustomerNumber != null)
                    hashCode = hashCode * 59 + this.CustomerNumber.GetHashCode();
                if (this.Gateway != null)
                    hashCode = hashCode * 59 + this.Gateway.GetHashCode();
                if (this.Ideal != null)
                    hashCode = hashCode * 59 + this.Ideal.GetHashCode();
                if (this.IdealNotificationPassword != null)
                    hashCode = hashCode * 59 + this.IdealNotificationPassword.GetHashCode();
                if (this.IdealProjectId != null)
                    hashCode = hashCode * 59 + this.IdealProjectId.GetHashCode();
                if (this.IdealProjectPassword != null)
                    hashCode = hashCode * 59 + this.IdealProjectPassword.GetHashCode();
                if (this.ProjectId != null)
                    hashCode = hashCode * 59 + this.ProjectId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
