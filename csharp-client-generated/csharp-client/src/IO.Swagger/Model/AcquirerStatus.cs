/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AcquirerStatus
    /// </summary>
    [DataContract]
    public partial class AcquirerStatus :  IEquatable<AcquirerStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AcquirerStatus" /> class.
        /// </summary>
        /// <param name="acquirer">Acquirer.</param>
        /// <param name="health">Health of the acquirer in %.</param>
        /// <param name="status">Status of the acquirer. Can be &#39;ok&#39;, &#39;irregular&#39; or &#39;down&#39;.</param>
        public AcquirerStatus(string acquirer = default(string), int? health = default(int?), string status = default(string))
        {
            this.Acquirer = acquirer;
            this.Health = health;
            this.Status = status;
        }
        
        /// <summary>
        /// Acquirer
        /// </summary>
        /// <value>Acquirer</value>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public string Acquirer { get; set; }

        /// <summary>
        /// Health of the acquirer in %
        /// </summary>
        /// <value>Health of the acquirer in %</value>
        [DataMember(Name="health", EmitDefaultValue=false)]
        public int? Health { get; set; }

        /// <summary>
        /// Status of the acquirer. Can be &#39;ok&#39;, &#39;irregular&#39; or &#39;down&#39;
        /// </summary>
        /// <value>Status of the acquirer. Can be &#39;ok&#39;, &#39;irregular&#39; or &#39;down&#39;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AcquirerStatus {\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  Health: ").Append(Health).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AcquirerStatus);
        }

        /// <summary>
        /// Returns true if AcquirerStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of AcquirerStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AcquirerStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.Health == input.Health ||
                    (this.Health != null &&
                    this.Health.Equals(input.Health))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.Health != null)
                    hashCode = hashCode * 59 + this.Health.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
