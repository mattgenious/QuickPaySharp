/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Activity
    /// </summary>
    [DataContract]
    public partial class Activity :  IEquatable<Activity>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Activity" /> class.
        /// </summary>
        /// <param name="accountId">Activity performed on.</param>
        /// <param name="action">Activity action.</param>
        /// <param name="changes">Activity changes.</param>
        /// <param name="createdAt">Timestamp of activity.</param>
        /// <param name="extra">Extra data.</param>
        /// <param name="id">ID.</param>
        /// <param name="support">Whether activity was created by a supporter.</param>
        /// <param name="targetId">Activity target id.</param>
        /// <param name="targetType">Activity target.</param>
        /// <param name="userId">Activity performed by.</param>
        public Activity(int? accountId = default(int?), string action = default(string), Dictionary<string, string> changes = default(Dictionary<string, string>), DateTime? createdAt = default(DateTime?), Dictionary<string, string> extra = default(Dictionary<string, string>), int? id = default(int?), bool? support = default(bool?), int? targetId = default(int?), string targetType = default(string), int? userId = default(int?))
        {
            this.AccountId = accountId;
            this.Action = action;
            this.Changes = changes;
            this.CreatedAt = createdAt;
            this.Extra = extra;
            this.Id = id;
            this.Support = support;
            this.TargetId = targetId;
            this.TargetType = targetType;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Activity performed on
        /// </summary>
        /// <value>Activity performed on</value>
        [DataMember(Name="account_id", EmitDefaultValue=false)]
        public int? AccountId { get; set; }

        /// <summary>
        /// Activity action
        /// </summary>
        /// <value>Activity action</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Activity changes
        /// </summary>
        /// <value>Activity changes</value>
        [DataMember(Name="changes", EmitDefaultValue=false)]
        public Dictionary<string, string> Changes { get; set; }

        /// <summary>
        /// Timestamp of activity
        /// </summary>
        /// <value>Timestamp of activity</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Extra data
        /// </summary>
        /// <value>Extra data</value>
        [DataMember(Name="extra", EmitDefaultValue=false)]
        public Dictionary<string, string> Extra { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Whether activity was created by a supporter
        /// </summary>
        /// <value>Whether activity was created by a supporter</value>
        [DataMember(Name="support", EmitDefaultValue=false)]
        public bool? Support { get; set; }

        /// <summary>
        /// Activity target id
        /// </summary>
        /// <value>Activity target id</value>
        [DataMember(Name="target_id", EmitDefaultValue=false)]
        public int? TargetId { get; set; }

        /// <summary>
        /// Activity target
        /// </summary>
        /// <value>Activity target</value>
        [DataMember(Name="target_type", EmitDefaultValue=false)]
        public string TargetType { get; set; }

        /// <summary>
        /// Activity performed by
        /// </summary>
        /// <value>Activity performed by</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Activity {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Changes: ").Append(Changes).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Activity);
        }

        /// <summary>
        /// Returns true if Activity instances are equal
        /// </summary>
        /// <param name="input">Instance of Activity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Activity input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.Changes == input.Changes ||
                    this.Changes != null &&
                    this.Changes.SequenceEqual(input.Changes)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Extra == input.Extra ||
                    this.Extra != null &&
                    this.Extra.SequenceEqual(input.Extra)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Support == input.Support ||
                    (this.Support != null &&
                    this.Support.Equals(input.Support))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    (this.TargetType != null &&
                    this.TargetType.Equals(input.TargetType))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Changes != null)
                    hashCode = hashCode * 59 + this.Changes.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Extra != null)
                    hashCode = hashCode * 59 + this.Extra.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Support != null)
                    hashCode = hashCode * 59 + this.Support.GetHashCode();
                if (this.TargetId != null)
                    hashCode = hashCode * 59 + this.TargetId.GetHashCode();
                if (this.TargetType != null)
                    hashCode = hashCode * 59 + this.TargetType.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
