/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CardLink
    /// </summary>
    [DataContract]
    public partial class CardLink :  IEquatable<CardLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardLink" /> class.
        /// </summary>
        /// <param name="acquirer">Force usage of this acquirer.</param>
        /// <param name="agreementId">Id of agreement that will be used in the payment window.</param>
        /// <param name="brandingConfig">Branding config.</param>
        /// <param name="brandingId">The branding to use in the payment window.</param>
        /// <param name="callbackurl">Endpoint for a POST callback.</param>
        /// <param name="cancelurl">Where cardholder is redirected after cancel.</param>
        /// <param name="continueurl">Where cardholder is redirected after success.</param>
        /// <param name="framed">Allowed in iframe.</param>
        /// <param name="googleAnalyticsClientId">Set this to enable Google Analytics events from the payment window.</param>
        /// <param name="googleAnalyticsTrackingId">Set this to enable Google Analytics events from the payment window.</param>
        /// <param name="language">Two letter language code that determines the language of the payment window.</param>
        /// <param name="paymentMethods">Lock to these payment methods.</param>
        /// <param name="url">Url to payment window for this payment link.</param>
        /// <param name="version">Version of payment window and API.</param>
        public CardLink(string acquirer = default(string), int? agreementId = default(int?), Object brandingConfig = default(Object), int? brandingId = default(int?), string callbackurl = default(string), string cancelurl = default(string), string continueurl = default(string), bool? framed = default(bool?), string googleAnalyticsClientId = default(string), string googleAnalyticsTrackingId = default(string), string language = default(string), string paymentMethods = default(string), string url = default(string), string version = default(string))
        {
            this.Acquirer = acquirer;
            this.AgreementId = agreementId;
            this.BrandingConfig = brandingConfig;
            this.BrandingId = brandingId;
            this.Callbackurl = callbackurl;
            this.Cancelurl = cancelurl;
            this.Continueurl = continueurl;
            this.Framed = framed;
            this.GoogleAnalyticsClientId = googleAnalyticsClientId;
            this.GoogleAnalyticsTrackingId = googleAnalyticsTrackingId;
            this.Language = language;
            this.PaymentMethods = paymentMethods;
            this.Url = url;
            this.Version = version;
        }
        
        /// <summary>
        /// Force usage of this acquirer
        /// </summary>
        /// <value>Force usage of this acquirer</value>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public string Acquirer { get; set; }

        /// <summary>
        /// Id of agreement that will be used in the payment window
        /// </summary>
        /// <value>Id of agreement that will be used in the payment window</value>
        [DataMember(Name="agreement_id", EmitDefaultValue=false)]
        public int? AgreementId { get; set; }

        /// <summary>
        /// Branding config
        /// </summary>
        /// <value>Branding config</value>
        [DataMember(Name="branding_config", EmitDefaultValue=false)]
        public Object BrandingConfig { get; set; }

        /// <summary>
        /// The branding to use in the payment window
        /// </summary>
        /// <value>The branding to use in the payment window</value>
        [DataMember(Name="branding_id", EmitDefaultValue=false)]
        public int? BrandingId { get; set; }

        /// <summary>
        /// Endpoint for a POST callback
        /// </summary>
        /// <value>Endpoint for a POST callback</value>
        [DataMember(Name="callbackurl", EmitDefaultValue=false)]
        public string Callbackurl { get; set; }

        /// <summary>
        /// Where cardholder is redirected after cancel
        /// </summary>
        /// <value>Where cardholder is redirected after cancel</value>
        [DataMember(Name="cancelurl", EmitDefaultValue=false)]
        public string Cancelurl { get; set; }

        /// <summary>
        /// Where cardholder is redirected after success
        /// </summary>
        /// <value>Where cardholder is redirected after success</value>
        [DataMember(Name="continueurl", EmitDefaultValue=false)]
        public string Continueurl { get; set; }

        /// <summary>
        /// Allowed in iframe
        /// </summary>
        /// <value>Allowed in iframe</value>
        [DataMember(Name="framed", EmitDefaultValue=false)]
        public bool? Framed { get; set; }

        /// <summary>
        /// Set this to enable Google Analytics events from the payment window
        /// </summary>
        /// <value>Set this to enable Google Analytics events from the payment window</value>
        [DataMember(Name="google_analytics_client_id", EmitDefaultValue=false)]
        public string GoogleAnalyticsClientId { get; set; }

        /// <summary>
        /// Set this to enable Google Analytics events from the payment window
        /// </summary>
        /// <value>Set this to enable Google Analytics events from the payment window</value>
        [DataMember(Name="google_analytics_tracking_id", EmitDefaultValue=false)]
        public string GoogleAnalyticsTrackingId { get; set; }

        /// <summary>
        /// Two letter language code that determines the language of the payment window
        /// </summary>
        /// <value>Two letter language code that determines the language of the payment window</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Lock to these payment methods
        /// </summary>
        /// <value>Lock to these payment methods</value>
        [DataMember(Name="payment_methods", EmitDefaultValue=false)]
        public string PaymentMethods { get; set; }

        /// <summary>
        /// Url to payment window for this payment link
        /// </summary>
        /// <value>Url to payment window for this payment link</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Version of payment window and API
        /// </summary>
        /// <value>Version of payment window and API</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardLink {\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  BrandingConfig: ").Append(BrandingConfig).Append("\n");
            sb.Append("  BrandingId: ").Append(BrandingId).Append("\n");
            sb.Append("  Callbackurl: ").Append(Callbackurl).Append("\n");
            sb.Append("  Cancelurl: ").Append(Cancelurl).Append("\n");
            sb.Append("  Continueurl: ").Append(Continueurl).Append("\n");
            sb.Append("  Framed: ").Append(Framed).Append("\n");
            sb.Append("  GoogleAnalyticsClientId: ").Append(GoogleAnalyticsClientId).Append("\n");
            sb.Append("  GoogleAnalyticsTrackingId: ").Append(GoogleAnalyticsTrackingId).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardLink);
        }

        /// <summary>
        /// Returns true if CardLink instances are equal
        /// </summary>
        /// <param name="input">Instance of CardLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.BrandingConfig == input.BrandingConfig ||
                    (this.BrandingConfig != null &&
                    this.BrandingConfig.Equals(input.BrandingConfig))
                ) && 
                (
                    this.BrandingId == input.BrandingId ||
                    (this.BrandingId != null &&
                    this.BrandingId.Equals(input.BrandingId))
                ) && 
                (
                    this.Callbackurl == input.Callbackurl ||
                    (this.Callbackurl != null &&
                    this.Callbackurl.Equals(input.Callbackurl))
                ) && 
                (
                    this.Cancelurl == input.Cancelurl ||
                    (this.Cancelurl != null &&
                    this.Cancelurl.Equals(input.Cancelurl))
                ) && 
                (
                    this.Continueurl == input.Continueurl ||
                    (this.Continueurl != null &&
                    this.Continueurl.Equals(input.Continueurl))
                ) && 
                (
                    this.Framed == input.Framed ||
                    (this.Framed != null &&
                    this.Framed.Equals(input.Framed))
                ) && 
                (
                    this.GoogleAnalyticsClientId == input.GoogleAnalyticsClientId ||
                    (this.GoogleAnalyticsClientId != null &&
                    this.GoogleAnalyticsClientId.Equals(input.GoogleAnalyticsClientId))
                ) && 
                (
                    this.GoogleAnalyticsTrackingId == input.GoogleAnalyticsTrackingId ||
                    (this.GoogleAnalyticsTrackingId != null &&
                    this.GoogleAnalyticsTrackingId.Equals(input.GoogleAnalyticsTrackingId))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PaymentMethods == input.PaymentMethods ||
                    (this.PaymentMethods != null &&
                    this.PaymentMethods.Equals(input.PaymentMethods))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.AgreementId != null)
                    hashCode = hashCode * 59 + this.AgreementId.GetHashCode();
                if (this.BrandingConfig != null)
                    hashCode = hashCode * 59 + this.BrandingConfig.GetHashCode();
                if (this.BrandingId != null)
                    hashCode = hashCode * 59 + this.BrandingId.GetHashCode();
                if (this.Callbackurl != null)
                    hashCode = hashCode * 59 + this.Callbackurl.GetHashCode();
                if (this.Cancelurl != null)
                    hashCode = hashCode * 59 + this.Cancelurl.GetHashCode();
                if (this.Continueurl != null)
                    hashCode = hashCode * 59 + this.Continueurl.GetHashCode();
                if (this.Framed != null)
                    hashCode = hashCode * 59 + this.Framed.GetHashCode();
                if (this.GoogleAnalyticsClientId != null)
                    hashCode = hashCode * 59 + this.GoogleAnalyticsClientId.GetHashCode();
                if (this.GoogleAnalyticsTrackingId != null)
                    hashCode = hashCode * 59 + this.GoogleAnalyticsTrackingId.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.PaymentMethods != null)
                    hashCode = hashCode * 59 + this.PaymentMethods.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
