/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Operation
    /// </summary>
    [DataContract]
    public partial class Operation :  IEquatable<Operation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Operation" /> class.
        /// </summary>
        /// <param name="_3dSecureStatus">3D Secure status.</param>
        /// <param name="acquirer">Acquirer that processed this operation.</param>
        /// <param name="amount">Amount.</param>
        /// <param name="aqStatusCode">Acquirer status code.</param>
        /// <param name="aqStatusMsg">Acquirer status message.</param>
        /// <param name="callbackAt">Timestamp of callback.</param>
        /// <param name="callbackDuration">Callback duration (ms).</param>
        /// <param name="callbackResponseCode">The http response code from the callback operation.</param>
        /// <param name="callbackSuccess">Did the callback succeed.</param>
        /// <param name="callbackUrl">Operation callback url.</param>
        /// <param name="createdAt">Timestamp of creation.</param>
        /// <param name="data">Acquirer specific data.</param>
        /// <param name="id">Operation ID.</param>
        /// <param name="pending">If the operation is pending.</param>
        /// <param name="qpStatusCode">QuickPay status code.</param>
        /// <param name="qpStatusMsg">QuickPay status message.</param>
        /// <param name="type">Type of operation.</param>
        public Operation(string _3dSecureStatus = default(string), string acquirer = default(string), int? amount = default(int?), string aqStatusCode = default(string), string aqStatusMsg = default(string), DateTime? callbackAt = default(DateTime?), int? callbackDuration = default(int?), bool? callbackResponseCode = default(bool?), bool? callbackSuccess = default(bool?), string callbackUrl = default(string), DateTime? createdAt = default(DateTime?), Dictionary<string, string> data = default(Dictionary<string, string>), int? id = default(int?), bool? pending = default(bool?), string qpStatusCode = default(string), string qpStatusMsg = default(string), string type = default(string))
        {
            this._3dSecureStatus = _3dSecureStatus;
            this.Acquirer = acquirer;
            this.Amount = amount;
            this.AqStatusCode = aqStatusCode;
            this.AqStatusMsg = aqStatusMsg;
            this.CallbackAt = callbackAt;
            this.CallbackDuration = callbackDuration;
            this.CallbackResponseCode = callbackResponseCode;
            this.CallbackSuccess = callbackSuccess;
            this.CallbackUrl = callbackUrl;
            this.CreatedAt = createdAt;
            this.Data = data;
            this.Id = id;
            this.Pending = pending;
            this.QpStatusCode = qpStatusCode;
            this.QpStatusMsg = qpStatusMsg;
            this.Type = type;
        }
        
        /// <summary>
        /// 3D Secure status
        /// </summary>
        /// <value>3D Secure status</value>
        [DataMember(Name="3d_secure_status", EmitDefaultValue=false)]
        public string _3dSecureStatus { get; set; }

        /// <summary>
        /// Acquirer that processed this operation
        /// </summary>
        /// <value>Acquirer that processed this operation</value>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public string Acquirer { get; set; }

        /// <summary>
        /// Amount
        /// </summary>
        /// <value>Amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// Acquirer status code
        /// </summary>
        /// <value>Acquirer status code</value>
        [DataMember(Name="aq_status_code", EmitDefaultValue=false)]
        public string AqStatusCode { get; set; }

        /// <summary>
        /// Acquirer status message
        /// </summary>
        /// <value>Acquirer status message</value>
        [DataMember(Name="aq_status_msg", EmitDefaultValue=false)]
        public string AqStatusMsg { get; set; }

        /// <summary>
        /// Timestamp of callback
        /// </summary>
        /// <value>Timestamp of callback</value>
        [DataMember(Name="callback_at", EmitDefaultValue=false)]
        public DateTime? CallbackAt { get; set; }

        /// <summary>
        /// Callback duration (ms)
        /// </summary>
        /// <value>Callback duration (ms)</value>
        [DataMember(Name="callback_duration", EmitDefaultValue=false)]
        public int? CallbackDuration { get; set; }

        /// <summary>
        /// The http response code from the callback operation
        /// </summary>
        /// <value>The http response code from the callback operation</value>
        [DataMember(Name="callback_response_code", EmitDefaultValue=false)]
        public bool? CallbackResponseCode { get; set; }

        /// <summary>
        /// Did the callback succeed
        /// </summary>
        /// <value>Did the callback succeed</value>
        [DataMember(Name="callback_success", EmitDefaultValue=false)]
        public bool? CallbackSuccess { get; set; }

        /// <summary>
        /// Operation callback url
        /// </summary>
        /// <value>Operation callback url</value>
        [DataMember(Name="callback_url", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Timestamp of creation
        /// </summary>
        /// <value>Timestamp of creation</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Acquirer specific data
        /// </summary>
        /// <value>Acquirer specific data</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public Dictionary<string, string> Data { get; set; }

        /// <summary>
        /// Operation ID
        /// </summary>
        /// <value>Operation ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// If the operation is pending
        /// </summary>
        /// <value>If the operation is pending</value>
        [DataMember(Name="pending", EmitDefaultValue=false)]
        public bool? Pending { get; set; }

        /// <summary>
        /// QuickPay status code
        /// </summary>
        /// <value>QuickPay status code</value>
        [DataMember(Name="qp_status_code", EmitDefaultValue=false)]
        public string QpStatusCode { get; set; }

        /// <summary>
        /// QuickPay status message
        /// </summary>
        /// <value>QuickPay status message</value>
        [DataMember(Name="qp_status_msg", EmitDefaultValue=false)]
        public string QpStatusMsg { get; set; }

        /// <summary>
        /// Type of operation
        /// </summary>
        /// <value>Type of operation</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Operation {\n");
            sb.Append("  _3dSecureStatus: ").Append(_3dSecureStatus).Append("\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AqStatusCode: ").Append(AqStatusCode).Append("\n");
            sb.Append("  AqStatusMsg: ").Append(AqStatusMsg).Append("\n");
            sb.Append("  CallbackAt: ").Append(CallbackAt).Append("\n");
            sb.Append("  CallbackDuration: ").Append(CallbackDuration).Append("\n");
            sb.Append("  CallbackResponseCode: ").Append(CallbackResponseCode).Append("\n");
            sb.Append("  CallbackSuccess: ").Append(CallbackSuccess).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pending: ").Append(Pending).Append("\n");
            sb.Append("  QpStatusCode: ").Append(QpStatusCode).Append("\n");
            sb.Append("  QpStatusMsg: ").Append(QpStatusMsg).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Operation);
        }

        /// <summary>
        /// Returns true if Operation instances are equal
        /// </summary>
        /// <param name="input">Instance of Operation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Operation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._3dSecureStatus == input._3dSecureStatus ||
                    (this._3dSecureStatus != null &&
                    this._3dSecureStatus.Equals(input._3dSecureStatus))
                ) && 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AqStatusCode == input.AqStatusCode ||
                    (this.AqStatusCode != null &&
                    this.AqStatusCode.Equals(input.AqStatusCode))
                ) && 
                (
                    this.AqStatusMsg == input.AqStatusMsg ||
                    (this.AqStatusMsg != null &&
                    this.AqStatusMsg.Equals(input.AqStatusMsg))
                ) && 
                (
                    this.CallbackAt == input.CallbackAt ||
                    (this.CallbackAt != null &&
                    this.CallbackAt.Equals(input.CallbackAt))
                ) && 
                (
                    this.CallbackDuration == input.CallbackDuration ||
                    (this.CallbackDuration != null &&
                    this.CallbackDuration.Equals(input.CallbackDuration))
                ) && 
                (
                    this.CallbackResponseCode == input.CallbackResponseCode ||
                    (this.CallbackResponseCode != null &&
                    this.CallbackResponseCode.Equals(input.CallbackResponseCode))
                ) && 
                (
                    this.CallbackSuccess == input.CallbackSuccess ||
                    (this.CallbackSuccess != null &&
                    this.CallbackSuccess.Equals(input.CallbackSuccess))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Pending == input.Pending ||
                    (this.Pending != null &&
                    this.Pending.Equals(input.Pending))
                ) && 
                (
                    this.QpStatusCode == input.QpStatusCode ||
                    (this.QpStatusCode != null &&
                    this.QpStatusCode.Equals(input.QpStatusCode))
                ) && 
                (
                    this.QpStatusMsg == input.QpStatusMsg ||
                    (this.QpStatusMsg != null &&
                    this.QpStatusMsg.Equals(input.QpStatusMsg))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._3dSecureStatus != null)
                    hashCode = hashCode * 59 + this._3dSecureStatus.GetHashCode();
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AqStatusCode != null)
                    hashCode = hashCode * 59 + this.AqStatusCode.GetHashCode();
                if (this.AqStatusMsg != null)
                    hashCode = hashCode * 59 + this.AqStatusMsg.GetHashCode();
                if (this.CallbackAt != null)
                    hashCode = hashCode * 59 + this.CallbackAt.GetHashCode();
                if (this.CallbackDuration != null)
                    hashCode = hashCode * 59 + this.CallbackDuration.GetHashCode();
                if (this.CallbackResponseCode != null)
                    hashCode = hashCode * 59 + this.CallbackResponseCode.GetHashCode();
                if (this.CallbackSuccess != null)
                    hashCode = hashCode * 59 + this.CallbackSuccess.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Pending != null)
                    hashCode = hashCode * 59 + this.Pending.GetHashCode();
                if (this.QpStatusCode != null)
                    hashCode = hashCode * 59 + this.QpStatusCode.GetHashCode();
                if (this.QpStatusMsg != null)
                    hashCode = hashCode * 59 + this.QpStatusMsg.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
