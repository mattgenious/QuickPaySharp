/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PaymentLink
    /// </summary>
    [DataContract]
    public partial class PaymentLink :  IEquatable<PaymentLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentLink" /> class.
        /// </summary>
        /// <param name="acquirer">Force usage of this acquirer.</param>
        /// <param name="agreementId">Id of agreement that will be used in the payment window.</param>
        /// <param name="amount">Amount to authorize..</param>
        /// <param name="autoCapture">If true, will capture the transaction after authorize succeeds.</param>
        /// <param name="autoFee">If true, will add acquirer fee to the amount.</param>
        /// <param name="brandingConfig">Branding config.</param>
        /// <param name="brandingId">The branding to use in the payment window.</param>
        /// <param name="callbackUrl">Endpoint for a POST callback.</param>
        /// <param name="cancelUrl">Where cardholder is redirected after cancel.</param>
        /// <param name="continueUrl">Where cardholder is redirected after success.</param>
        /// <param name="customerEmail">PayPal specific: Customer email.</param>
        /// <param name="deadline">Deadline in seconds for the cardholder to complete.</param>
        /// <param name="framed">Allow in iframe.</param>
        /// <param name="googleAnalyticsClientId">Set this to enable Google Analytics events from the payment window.</param>
        /// <param name="googleAnalyticsTrackingId">Set this to enable Google Analytics events from the payment window.</param>
        /// <param name="invoiceAddressSelection">Get customer invoice address via acquirer (Currently MobilePay and PayPal only).</param>
        /// <param name="language">Two letter language code that determines the language of the payment window.</param>
        /// <param name="paymentMethods">Lock to these payment methods.</param>
        /// <param name="shippingAddressSelection">Get customer shipping address via acquirer (Currently MobilePay and PayPal only).</param>
        /// <param name="url">Url to payment window for this payment link.</param>
        /// <param name="version">Version of payment window and API.</param>
        public PaymentLink(string acquirer = default(string), int? agreementId = default(int?), int? amount = default(int?), bool? autoCapture = default(bool?), bool? autoFee = default(bool?), Object brandingConfig = default(Object), int? brandingId = default(int?), string callbackUrl = default(string), string cancelUrl = default(string), string continueUrl = default(string), string customerEmail = default(string), string deadline = default(string), bool? framed = default(bool?), string googleAnalyticsClientId = default(string), string googleAnalyticsTrackingId = default(string), bool? invoiceAddressSelection = default(bool?), string language = default(string), string paymentMethods = default(string), bool? shippingAddressSelection = default(bool?), string url = default(string), string version = default(string))
        {
            this.Acquirer = acquirer;
            this.AgreementId = agreementId;
            this.Amount = amount;
            this.AutoCapture = autoCapture;
            this.AutoFee = autoFee;
            this.BrandingConfig = brandingConfig;
            this.BrandingId = brandingId;
            this.CallbackUrl = callbackUrl;
            this.CancelUrl = cancelUrl;
            this.ContinueUrl = continueUrl;
            this.CustomerEmail = customerEmail;
            this.Deadline = deadline;
            this.Framed = framed;
            this.GoogleAnalyticsClientId = googleAnalyticsClientId;
            this.GoogleAnalyticsTrackingId = googleAnalyticsTrackingId;
            this.InvoiceAddressSelection = invoiceAddressSelection;
            this.Language = language;
            this.PaymentMethods = paymentMethods;
            this.ShippingAddressSelection = shippingAddressSelection;
            this.Url = url;
            this.Version = version;
        }
        
        /// <summary>
        /// Force usage of this acquirer
        /// </summary>
        /// <value>Force usage of this acquirer</value>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public string Acquirer { get; set; }

        /// <summary>
        /// Id of agreement that will be used in the payment window
        /// </summary>
        /// <value>Id of agreement that will be used in the payment window</value>
        [DataMember(Name="agreement_id", EmitDefaultValue=false)]
        public int? AgreementId { get; set; }

        /// <summary>
        /// Amount to authorize.
        /// </summary>
        /// <value>Amount to authorize.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public int? Amount { get; set; }

        /// <summary>
        /// If true, will capture the transaction after authorize succeeds
        /// </summary>
        /// <value>If true, will capture the transaction after authorize succeeds</value>
        [DataMember(Name="auto_capture", EmitDefaultValue=false)]
        public bool? AutoCapture { get; set; }

        /// <summary>
        /// If true, will add acquirer fee to the amount
        /// </summary>
        /// <value>If true, will add acquirer fee to the amount</value>
        [DataMember(Name="auto_fee", EmitDefaultValue=false)]
        public bool? AutoFee { get; set; }

        /// <summary>
        /// Branding config
        /// </summary>
        /// <value>Branding config</value>
        [DataMember(Name="branding_config", EmitDefaultValue=false)]
        public Object BrandingConfig { get; set; }

        /// <summary>
        /// The branding to use in the payment window
        /// </summary>
        /// <value>The branding to use in the payment window</value>
        [DataMember(Name="branding_id", EmitDefaultValue=false)]
        public int? BrandingId { get; set; }

        /// <summary>
        /// Endpoint for a POST callback
        /// </summary>
        /// <value>Endpoint for a POST callback</value>
        [DataMember(Name="callback_url", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Where cardholder is redirected after cancel
        /// </summary>
        /// <value>Where cardholder is redirected after cancel</value>
        [DataMember(Name="cancel_url", EmitDefaultValue=false)]
        public string CancelUrl { get; set; }

        /// <summary>
        /// Where cardholder is redirected after success
        /// </summary>
        /// <value>Where cardholder is redirected after success</value>
        [DataMember(Name="continue_url", EmitDefaultValue=false)]
        public string ContinueUrl { get; set; }

        /// <summary>
        /// PayPal specific: Customer email
        /// </summary>
        /// <value>PayPal specific: Customer email</value>
        [DataMember(Name="customer_email", EmitDefaultValue=false)]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// Deadline in seconds for the cardholder to complete
        /// </summary>
        /// <value>Deadline in seconds for the cardholder to complete</value>
        [DataMember(Name="deadline", EmitDefaultValue=false)]
        public string Deadline { get; set; }

        /// <summary>
        /// Allow in iframe
        /// </summary>
        /// <value>Allow in iframe</value>
        [DataMember(Name="framed", EmitDefaultValue=false)]
        public bool? Framed { get; set; }

        /// <summary>
        /// Set this to enable Google Analytics events from the payment window
        /// </summary>
        /// <value>Set this to enable Google Analytics events from the payment window</value>
        [DataMember(Name="google_analytics_client_id", EmitDefaultValue=false)]
        public string GoogleAnalyticsClientId { get; set; }

        /// <summary>
        /// Set this to enable Google Analytics events from the payment window
        /// </summary>
        /// <value>Set this to enable Google Analytics events from the payment window</value>
        [DataMember(Name="google_analytics_tracking_id", EmitDefaultValue=false)]
        public string GoogleAnalyticsTrackingId { get; set; }

        /// <summary>
        /// Get customer invoice address via acquirer (Currently MobilePay and PayPal only)
        /// </summary>
        /// <value>Get customer invoice address via acquirer (Currently MobilePay and PayPal only)</value>
        [DataMember(Name="invoice_address_selection", EmitDefaultValue=false)]
        public bool? InvoiceAddressSelection { get; set; }

        /// <summary>
        /// Two letter language code that determines the language of the payment window
        /// </summary>
        /// <value>Two letter language code that determines the language of the payment window</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// Lock to these payment methods
        /// </summary>
        /// <value>Lock to these payment methods</value>
        [DataMember(Name="payment_methods", EmitDefaultValue=false)]
        public string PaymentMethods { get; set; }

        /// <summary>
        /// Get customer shipping address via acquirer (Currently MobilePay and PayPal only)
        /// </summary>
        /// <value>Get customer shipping address via acquirer (Currently MobilePay and PayPal only)</value>
        [DataMember(Name="shipping_address_selection", EmitDefaultValue=false)]
        public bool? ShippingAddressSelection { get; set; }

        /// <summary>
        /// Url to payment window for this payment link
        /// </summary>
        /// <value>Url to payment window for this payment link</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Version of payment window and API
        /// </summary>
        /// <value>Version of payment window and API</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentLink {\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  AgreementId: ").Append(AgreementId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AutoCapture: ").Append(AutoCapture).Append("\n");
            sb.Append("  AutoFee: ").Append(AutoFee).Append("\n");
            sb.Append("  BrandingConfig: ").Append(BrandingConfig).Append("\n");
            sb.Append("  BrandingId: ").Append(BrandingId).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CancelUrl: ").Append(CancelUrl).Append("\n");
            sb.Append("  ContinueUrl: ").Append(ContinueUrl).Append("\n");
            sb.Append("  CustomerEmail: ").Append(CustomerEmail).Append("\n");
            sb.Append("  Deadline: ").Append(Deadline).Append("\n");
            sb.Append("  Framed: ").Append(Framed).Append("\n");
            sb.Append("  GoogleAnalyticsClientId: ").Append(GoogleAnalyticsClientId).Append("\n");
            sb.Append("  GoogleAnalyticsTrackingId: ").Append(GoogleAnalyticsTrackingId).Append("\n");
            sb.Append("  InvoiceAddressSelection: ").Append(InvoiceAddressSelection).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("  ShippingAddressSelection: ").Append(ShippingAddressSelection).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentLink);
        }

        /// <summary>
        /// Returns true if PaymentLink instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.AgreementId == input.AgreementId ||
                    (this.AgreementId != null &&
                    this.AgreementId.Equals(input.AgreementId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AutoCapture == input.AutoCapture ||
                    (this.AutoCapture != null &&
                    this.AutoCapture.Equals(input.AutoCapture))
                ) && 
                (
                    this.AutoFee == input.AutoFee ||
                    (this.AutoFee != null &&
                    this.AutoFee.Equals(input.AutoFee))
                ) && 
                (
                    this.BrandingConfig == input.BrandingConfig ||
                    (this.BrandingConfig != null &&
                    this.BrandingConfig.Equals(input.BrandingConfig))
                ) && 
                (
                    this.BrandingId == input.BrandingId ||
                    (this.BrandingId != null &&
                    this.BrandingId.Equals(input.BrandingId))
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.CancelUrl == input.CancelUrl ||
                    (this.CancelUrl != null &&
                    this.CancelUrl.Equals(input.CancelUrl))
                ) && 
                (
                    this.ContinueUrl == input.ContinueUrl ||
                    (this.ContinueUrl != null &&
                    this.ContinueUrl.Equals(input.ContinueUrl))
                ) && 
                (
                    this.CustomerEmail == input.CustomerEmail ||
                    (this.CustomerEmail != null &&
                    this.CustomerEmail.Equals(input.CustomerEmail))
                ) && 
                (
                    this.Deadline == input.Deadline ||
                    (this.Deadline != null &&
                    this.Deadline.Equals(input.Deadline))
                ) && 
                (
                    this.Framed == input.Framed ||
                    (this.Framed != null &&
                    this.Framed.Equals(input.Framed))
                ) && 
                (
                    this.GoogleAnalyticsClientId == input.GoogleAnalyticsClientId ||
                    (this.GoogleAnalyticsClientId != null &&
                    this.GoogleAnalyticsClientId.Equals(input.GoogleAnalyticsClientId))
                ) && 
                (
                    this.GoogleAnalyticsTrackingId == input.GoogleAnalyticsTrackingId ||
                    (this.GoogleAnalyticsTrackingId != null &&
                    this.GoogleAnalyticsTrackingId.Equals(input.GoogleAnalyticsTrackingId))
                ) && 
                (
                    this.InvoiceAddressSelection == input.InvoiceAddressSelection ||
                    (this.InvoiceAddressSelection != null &&
                    this.InvoiceAddressSelection.Equals(input.InvoiceAddressSelection))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.PaymentMethods == input.PaymentMethods ||
                    (this.PaymentMethods != null &&
                    this.PaymentMethods.Equals(input.PaymentMethods))
                ) && 
                (
                    this.ShippingAddressSelection == input.ShippingAddressSelection ||
                    (this.ShippingAddressSelection != null &&
                    this.ShippingAddressSelection.Equals(input.ShippingAddressSelection))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.AgreementId != null)
                    hashCode = hashCode * 59 + this.AgreementId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AutoCapture != null)
                    hashCode = hashCode * 59 + this.AutoCapture.GetHashCode();
                if (this.AutoFee != null)
                    hashCode = hashCode * 59 + this.AutoFee.GetHashCode();
                if (this.BrandingConfig != null)
                    hashCode = hashCode * 59 + this.BrandingConfig.GetHashCode();
                if (this.BrandingId != null)
                    hashCode = hashCode * 59 + this.BrandingId.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.CancelUrl != null)
                    hashCode = hashCode * 59 + this.CancelUrl.GetHashCode();
                if (this.ContinueUrl != null)
                    hashCode = hashCode * 59 + this.ContinueUrl.GetHashCode();
                if (this.CustomerEmail != null)
                    hashCode = hashCode * 59 + this.CustomerEmail.GetHashCode();
                if (this.Deadline != null)
                    hashCode = hashCode * 59 + this.Deadline.GetHashCode();
                if (this.Framed != null)
                    hashCode = hashCode * 59 + this.Framed.GetHashCode();
                if (this.GoogleAnalyticsClientId != null)
                    hashCode = hashCode * 59 + this.GoogleAnalyticsClientId.GetHashCode();
                if (this.GoogleAnalyticsTrackingId != null)
                    hashCode = hashCode * 59 + this.GoogleAnalyticsTrackingId.GetHashCode();
                if (this.InvoiceAddressSelection != null)
                    hashCode = hashCode * 59 + this.InvoiceAddressSelection.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.PaymentMethods != null)
                    hashCode = hashCode * 59 + this.PaymentMethods.GetHashCode();
                if (this.ShippingAddressSelection != null)
                    hashCode = hashCode * 59 + this.ShippingAddressSelection.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
