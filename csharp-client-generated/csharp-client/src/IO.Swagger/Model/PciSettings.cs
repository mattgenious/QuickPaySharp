/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  Authorization is done using basic-auth. Authorization can be done with a user or an agreement.  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PciSettings
    /// </summary>
    [DataContract]
    public partial class PciSettings :  IEquatable<PciSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PciSettings" /> class.
        /// </summary>
        /// <param name="saqA">true if SAQ A is set.</param>
        /// <param name="saqAEp">true if SAQ A-EP is set.</param>
        /// <param name="saqB">true if SAQ B is set.</param>
        /// <param name="saqBIp">true if SAQ B-IP is set.</param>
        /// <param name="saqC">true if SAQ C is set.</param>
        /// <param name="saqCVt">true if SAQ C-VT is set.</param>
        /// <param name="saqDMerchant">true if SAQ D Merchant is set.</param>
        /// <param name="saqDServiceProvider">true if SAQ D Service Provider is set.</param>
        /// <param name="saqP2peHw">true if SAQ P2PE-HW is set.</param>
        public PciSettings(bool? saqA = default(bool?), bool? saqAEp = default(bool?), bool? saqB = default(bool?), bool? saqBIp = default(bool?), bool? saqC = default(bool?), bool? saqCVt = default(bool?), bool? saqDMerchant = default(bool?), bool? saqDServiceProvider = default(bool?), bool? saqP2peHw = default(bool?))
        {
            this.SaqA = saqA;
            this.SaqAEp = saqAEp;
            this.SaqB = saqB;
            this.SaqBIp = saqBIp;
            this.SaqC = saqC;
            this.SaqCVt = saqCVt;
            this.SaqDMerchant = saqDMerchant;
            this.SaqDServiceProvider = saqDServiceProvider;
            this.SaqP2peHw = saqP2peHw;
        }
        
        /// <summary>
        /// true if SAQ A is set
        /// </summary>
        /// <value>true if SAQ A is set</value>
        [DataMember(Name="saq_a", EmitDefaultValue=false)]
        public bool? SaqA { get; set; }

        /// <summary>
        /// true if SAQ A-EP is set
        /// </summary>
        /// <value>true if SAQ A-EP is set</value>
        [DataMember(Name="saq_a_ep", EmitDefaultValue=false)]
        public bool? SaqAEp { get; set; }

        /// <summary>
        /// true if SAQ B is set
        /// </summary>
        /// <value>true if SAQ B is set</value>
        [DataMember(Name="saq_b", EmitDefaultValue=false)]
        public bool? SaqB { get; set; }

        /// <summary>
        /// true if SAQ B-IP is set
        /// </summary>
        /// <value>true if SAQ B-IP is set</value>
        [DataMember(Name="saq_b_ip", EmitDefaultValue=false)]
        public bool? SaqBIp { get; set; }

        /// <summary>
        /// true if SAQ C is set
        /// </summary>
        /// <value>true if SAQ C is set</value>
        [DataMember(Name="saq_c", EmitDefaultValue=false)]
        public bool? SaqC { get; set; }

        /// <summary>
        /// true if SAQ C-VT is set
        /// </summary>
        /// <value>true if SAQ C-VT is set</value>
        [DataMember(Name="saq_c_vt", EmitDefaultValue=false)]
        public bool? SaqCVt { get; set; }

        /// <summary>
        /// true if SAQ D Merchant is set
        /// </summary>
        /// <value>true if SAQ D Merchant is set</value>
        [DataMember(Name="saq_d_merchant", EmitDefaultValue=false)]
        public bool? SaqDMerchant { get; set; }

        /// <summary>
        /// true if SAQ D Service Provider is set
        /// </summary>
        /// <value>true if SAQ D Service Provider is set</value>
        [DataMember(Name="saq_d_service_provider", EmitDefaultValue=false)]
        public bool? SaqDServiceProvider { get; set; }

        /// <summary>
        /// true if SAQ P2PE-HW is set
        /// </summary>
        /// <value>true if SAQ P2PE-HW is set</value>
        [DataMember(Name="saq_p2pe_hw", EmitDefaultValue=false)]
        public bool? SaqP2peHw { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PciSettings {\n");
            sb.Append("  SaqA: ").Append(SaqA).Append("\n");
            sb.Append("  SaqAEp: ").Append(SaqAEp).Append("\n");
            sb.Append("  SaqB: ").Append(SaqB).Append("\n");
            sb.Append("  SaqBIp: ").Append(SaqBIp).Append("\n");
            sb.Append("  SaqC: ").Append(SaqC).Append("\n");
            sb.Append("  SaqCVt: ").Append(SaqCVt).Append("\n");
            sb.Append("  SaqDMerchant: ").Append(SaqDMerchant).Append("\n");
            sb.Append("  SaqDServiceProvider: ").Append(SaqDServiceProvider).Append("\n");
            sb.Append("  SaqP2peHw: ").Append(SaqP2peHw).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PciSettings);
        }

        /// <summary>
        /// Returns true if PciSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of PciSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PciSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SaqA == input.SaqA ||
                    (this.SaqA != null &&
                    this.SaqA.Equals(input.SaqA))
                ) && 
                (
                    this.SaqAEp == input.SaqAEp ||
                    (this.SaqAEp != null &&
                    this.SaqAEp.Equals(input.SaqAEp))
                ) && 
                (
                    this.SaqB == input.SaqB ||
                    (this.SaqB != null &&
                    this.SaqB.Equals(input.SaqB))
                ) && 
                (
                    this.SaqBIp == input.SaqBIp ||
                    (this.SaqBIp != null &&
                    this.SaqBIp.Equals(input.SaqBIp))
                ) && 
                (
                    this.SaqC == input.SaqC ||
                    (this.SaqC != null &&
                    this.SaqC.Equals(input.SaqC))
                ) && 
                (
                    this.SaqCVt == input.SaqCVt ||
                    (this.SaqCVt != null &&
                    this.SaqCVt.Equals(input.SaqCVt))
                ) && 
                (
                    this.SaqDMerchant == input.SaqDMerchant ||
                    (this.SaqDMerchant != null &&
                    this.SaqDMerchant.Equals(input.SaqDMerchant))
                ) && 
                (
                    this.SaqDServiceProvider == input.SaqDServiceProvider ||
                    (this.SaqDServiceProvider != null &&
                    this.SaqDServiceProvider.Equals(input.SaqDServiceProvider))
                ) && 
                (
                    this.SaqP2peHw == input.SaqP2peHw ||
                    (this.SaqP2peHw != null &&
                    this.SaqP2peHw.Equals(input.SaqP2peHw))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SaqA != null)
                    hashCode = hashCode * 59 + this.SaqA.GetHashCode();
                if (this.SaqAEp != null)
                    hashCode = hashCode * 59 + this.SaqAEp.GetHashCode();
                if (this.SaqB != null)
                    hashCode = hashCode * 59 + this.SaqB.GetHashCode();
                if (this.SaqBIp != null)
                    hashCode = hashCode * 59 + this.SaqBIp.GetHashCode();
                if (this.SaqC != null)
                    hashCode = hashCode * 59 + this.SaqC.GetHashCode();
                if (this.SaqCVt != null)
                    hashCode = hashCode * 59 + this.SaqCVt.GetHashCode();
                if (this.SaqDMerchant != null)
                    hashCode = hashCode * 59 + this.SaqDMerchant.GetHashCode();
                if (this.SaqDServiceProvider != null)
                    hashCode = hashCode * 59 + this.SaqDServiceProvider.GetHashCode();
                if (this.SaqP2peHw != null)
                    hashCode = hashCode * 59 + this.SaqP2peHw.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
