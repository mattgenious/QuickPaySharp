/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickPayProtocolV10AcquirerSettingsVipps
    /// </summary>
    [DataContract]
    public partial class QuickPayProtocolV10AcquirerSettingsVipps :  IEquatable<QuickPayProtocolV10AcquirerSettingsVipps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPayProtocolV10AcquirerSettingsVipps" /> class.
        /// </summary>
        /// <param name="accessTokenSubscriptionKey">Vipps Access-Token Subscription Key.</param>
        /// <param name="active">True if the acquirer is active.</param>
        /// <param name="clientId">Vipps OAuth Client ID.</param>
        /// <param name="clientSecret">Vipps OAuth Client Secret.</param>
        /// <param name="ecommerceSubscriptionKey">Vipps eCommerce Subscription Key.</param>
        /// <param name="orgno">Vipps company organization number.</param>
        /// <param name="serialNumber">Vipps agreement serial number.</param>
        public QuickPayProtocolV10AcquirerSettingsVipps(string accessTokenSubscriptionKey = default(string), bool? active = default(bool?), string clientId = default(string), string clientSecret = default(string), string ecommerceSubscriptionKey = default(string), string orgno = default(string), string serialNumber = default(string))
        {
            this.AccessTokenSubscriptionKey = accessTokenSubscriptionKey;
            this.Active = active;
            this.ClientId = clientId;
            this.ClientSecret = clientSecret;
            this.EcommerceSubscriptionKey = ecommerceSubscriptionKey;
            this.Orgno = orgno;
            this.SerialNumber = serialNumber;
        }
        
        /// <summary>
        /// Vipps Access-Token Subscription Key
        /// </summary>
        /// <value>Vipps Access-Token Subscription Key</value>
        [DataMember(Name="access_token_subscription_key", EmitDefaultValue=false)]
        public string AccessTokenSubscriptionKey { get; set; }

        /// <summary>
        /// True if the acquirer is active
        /// </summary>
        /// <value>True if the acquirer is active</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Vipps OAuth Client ID
        /// </summary>
        /// <value>Vipps OAuth Client ID</value>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Vipps OAuth Client Secret
        /// </summary>
        /// <value>Vipps OAuth Client Secret</value>
        [DataMember(Name="client_secret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Vipps eCommerce Subscription Key
        /// </summary>
        /// <value>Vipps eCommerce Subscription Key</value>
        [DataMember(Name="ecommerce_subscription_key", EmitDefaultValue=false)]
        public string EcommerceSubscriptionKey { get; set; }

        /// <summary>
        /// Vipps company organization number
        /// </summary>
        /// <value>Vipps company organization number</value>
        [DataMember(Name="orgno", EmitDefaultValue=false)]
        public string Orgno { get; set; }

        /// <summary>
        /// Vipps agreement serial number
        /// </summary>
        /// <value>Vipps agreement serial number</value>
        [DataMember(Name="serial_number", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickPayProtocolV10AcquirerSettingsVipps {\n");
            sb.Append("  AccessTokenSubscriptionKey: ").Append(AccessTokenSubscriptionKey).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  EcommerceSubscriptionKey: ").Append(EcommerceSubscriptionKey).Append("\n");
            sb.Append("  Orgno: ").Append(Orgno).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickPayProtocolV10AcquirerSettingsVipps);
        }

        /// <summary>
        /// Returns true if QuickPayProtocolV10AcquirerSettingsVipps instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickPayProtocolV10AcquirerSettingsVipps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickPayProtocolV10AcquirerSettingsVipps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessTokenSubscriptionKey == input.AccessTokenSubscriptionKey ||
                    (this.AccessTokenSubscriptionKey != null &&
                    this.AccessTokenSubscriptionKey.Equals(input.AccessTokenSubscriptionKey))
                ) && 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) && 
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) && 
                (
                    this.EcommerceSubscriptionKey == input.EcommerceSubscriptionKey ||
                    (this.EcommerceSubscriptionKey != null &&
                    this.EcommerceSubscriptionKey.Equals(input.EcommerceSubscriptionKey))
                ) && 
                (
                    this.Orgno == input.Orgno ||
                    (this.Orgno != null &&
                    this.Orgno.Equals(input.Orgno))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessTokenSubscriptionKey != null)
                    hashCode = hashCode * 59 + this.AccessTokenSubscriptionKey.GetHashCode();
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.EcommerceSubscriptionKey != null)
                    hashCode = hashCode * 59 + this.EcommerceSubscriptionKey.GetHashCode();
                if (this.Orgno != null)
                    hashCode = hashCode * 59 + this.Orgno.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
