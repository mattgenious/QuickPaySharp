/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickPayProtocolV10FeeFormula
    /// </summary>
    [DataContract]
    public partial class QuickPayProtocolV10FeeFormula :  IEquatable<QuickPayProtocolV10FeeFormula>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPayProtocolV10FeeFormula" /> class.
        /// </summary>
        /// <param name="acquirer">Acquirer.</param>
        /// <param name="formula">The formula.</param>
        /// <param name="paymentMethod">Payment method.</param>
        /// <param name="standard">True if this is the standard fee formula.</param>
        public QuickPayProtocolV10FeeFormula(string acquirer = default(string), string formula = default(string), string paymentMethod = default(string), bool? standard = default(bool?))
        {
            this.Acquirer = acquirer;
            this.Formula = formula;
            this.PaymentMethod = paymentMethod;
            this.Standard = standard;
        }
        
        /// <summary>
        /// Acquirer
        /// </summary>
        /// <value>Acquirer</value>
        [DataMember(Name="acquirer", EmitDefaultValue=false)]
        public string Acquirer { get; set; }

        /// <summary>
        /// The formula
        /// </summary>
        /// <value>The formula</value>
        [DataMember(Name="formula", EmitDefaultValue=false)]
        public string Formula { get; set; }

        /// <summary>
        /// Payment method
        /// </summary>
        /// <value>Payment method</value>
        [DataMember(Name="payment_method", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// True if this is the standard fee formula
        /// </summary>
        /// <value>True if this is the standard fee formula</value>
        [DataMember(Name="standard", EmitDefaultValue=false)]
        public bool? Standard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickPayProtocolV10FeeFormula {\n");
            sb.Append("  Acquirer: ").Append(Acquirer).Append("\n");
            sb.Append("  Formula: ").Append(Formula).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  Standard: ").Append(Standard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickPayProtocolV10FeeFormula);
        }

        /// <summary>
        /// Returns true if QuickPayProtocolV10FeeFormula instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickPayProtocolV10FeeFormula to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickPayProtocolV10FeeFormula input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Acquirer == input.Acquirer ||
                    (this.Acquirer != null &&
                    this.Acquirer.Equals(input.Acquirer))
                ) && 
                (
                    this.Formula == input.Formula ||
                    (this.Formula != null &&
                    this.Formula.Equals(input.Formula))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.Standard == input.Standard ||
                    (this.Standard != null &&
                    this.Standard.Equals(input.Standard))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Acquirer != null)
                    hashCode = hashCode * 59 + this.Acquirer.GetHashCode();
                if (this.Formula != null)
                    hashCode = hashCode * 59 + this.Formula.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.Standard != null)
                    hashCode = hashCode * 59 + this.Standard.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
