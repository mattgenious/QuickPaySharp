/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickPayProtocolV10MerchantReseller
    /// </summary>
    [DataContract]
    public partial class QuickPayProtocolV10MerchantReseller :  IEquatable<QuickPayProtocolV10MerchantReseller>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPayProtocolV10MerchantReseller" /> class.
        /// </summary>
        /// <param name="defaultBrandingId">Id of default branding, or null.</param>
        /// <param name="defaultPaymentMethods">Comma separated list of default payment methods.</param>
        /// <param name="id">ID.</param>
        /// <param name="name">Name.</param>
        /// <param name="supportEmail">Email address to reseller for support.</param>
        public QuickPayProtocolV10MerchantReseller(int? defaultBrandingId = default(int?), string defaultPaymentMethods = default(string), int? id = default(int?), string name = default(string), string supportEmail = default(string))
        {
            this.DefaultBrandingId = defaultBrandingId;
            this.DefaultPaymentMethods = defaultPaymentMethods;
            this.Id = id;
            this.Name = name;
            this.SupportEmail = supportEmail;
        }
        
        /// <summary>
        /// Id of default branding, or null
        /// </summary>
        /// <value>Id of default branding, or null</value>
        [DataMember(Name="default_branding_id", EmitDefaultValue=false)]
        public int? DefaultBrandingId { get; set; }

        /// <summary>
        /// Comma separated list of default payment methods
        /// </summary>
        /// <value>Comma separated list of default payment methods</value>
        [DataMember(Name="default_payment_methods", EmitDefaultValue=false)]
        public string DefaultPaymentMethods { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        /// <value>ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Email address to reseller for support
        /// </summary>
        /// <value>Email address to reseller for support</value>
        [DataMember(Name="support_email", EmitDefaultValue=false)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickPayProtocolV10MerchantReseller {\n");
            sb.Append("  DefaultBrandingId: ").Append(DefaultBrandingId).Append("\n");
            sb.Append("  DefaultPaymentMethods: ").Append(DefaultPaymentMethods).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickPayProtocolV10MerchantReseller);
        }

        /// <summary>
        /// Returns true if QuickPayProtocolV10MerchantReseller instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickPayProtocolV10MerchantReseller to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickPayProtocolV10MerchantReseller input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultBrandingId == input.DefaultBrandingId ||
                    (this.DefaultBrandingId != null &&
                    this.DefaultBrandingId.Equals(input.DefaultBrandingId))
                ) && 
                (
                    this.DefaultPaymentMethods == input.DefaultPaymentMethods ||
                    (this.DefaultPaymentMethods != null &&
                    this.DefaultPaymentMethods.Equals(input.DefaultPaymentMethods))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DefaultBrandingId != null)
                    hashCode = hashCode * 59 + this.DefaultBrandingId.GetHashCode();
                if (this.DefaultPaymentMethods != null)
                    hashCode = hashCode * 59 + this.DefaultPaymentMethods.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.SupportEmail != null)
                    hashCode = hashCode * 59 + this.SupportEmail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
