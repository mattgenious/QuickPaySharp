/* 
 * Quickpay API v10
 *
 * <h2 id=\"authorization\">Authorization</h2>  <p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>  <ul>   <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>   <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li> </ul>  
 *
 * OpenAPI spec version: 10.0
 * Contact: support@quickpay.net
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QuickPayProtocolV10Metadata
    /// </summary>
    [DataContract]
    public partial class QuickPayProtocolV10Metadata :  IEquatable<QuickPayProtocolV10Metadata>, IValidatableObject
    {
        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum Card for value: card
            /// </summary>
            [EnumMember(Value = "card")]
            Card = 1,
            
            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            Mobile = 2,
            
            /// <summary>
            /// Enum Nin for value: nin
            /// </summary>
            [EnumMember(Value = "nin")]
            Nin = 3
        }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="QuickPayProtocolV10Metadata" /> class.
        /// </summary>
        /// <param name="bin">Card type only: Card BIN.</param>
        /// <param name="brand">Card type only: The card brand.</param>
        /// <param name="corporate">Card type only: Corporate status.</param>
        /// <param name="country">Card type only: The card country in ISO 3166-1 alpha-3.</param>
        /// <param name="customerCountry">Customer country based on IP geo-data, ISO 3166-1 alpha-2.</param>
        /// <param name="customerIp">Customer IP.</param>
        /// <param name="expMonth">Card type only: The expiration month.</param>
        /// <param name="expYear">Card type only: The expiration year (YYYY).</param>
        /// <param name="fraudRemarks">Fraud remarks.</param>
        /// <param name="fraudReportDescription">Fraud report description.</param>
        /// <param name="fraudReported">Reported as fraudulent.</param>
        /// <param name="fraudReportedAt">Fraud report description.</param>
        /// <param name="fraudSuspected">Suspected fraud.</param>
        /// <param name="hash">Card type only: PCI safe hash of card number.</param>
        /// <param name="is3dSecure">Card type only: Verified via 3D-Secure.</param>
        /// <param name="issuedTo">Name of cardholder.</param>
        /// <param name="last4">Card type only: The last 4 digits of the card number.</param>
        /// <param name="ninCountryCode">NIN type only. NIN country code, ISO 3166-1 alpha-3.</param>
        /// <param name="ninGender">NIN type only. NIN gender.</param>
        /// <param name="ninNumber">NIN type only. NIN number.</param>
        /// <param name="number">Mobile type only: The mobile number.</param>
        /// <param name="origin">Origin of this transaction or card. If set, describes where it came from..</param>
        /// <param name="shopsystemName">Shop system module name.</param>
        /// <param name="shopsystemVersion">Shop system module version.</param>
        /// <param name="type">Type.</param>
        public QuickPayProtocolV10Metadata(string bin = default(string), string brand = default(string), bool? corporate = default(bool?), string country = default(string), string customerCountry = default(string), string customerIp = default(string), int? expMonth = default(int?), int? expYear = default(int?), List<string> fraudRemarks = default(List<string>), string fraudReportDescription = default(string), bool? fraudReported = default(bool?), string fraudReportedAt = default(string), bool? fraudSuspected = default(bool?), string hash = default(string), string is3dSecure = default(string), string issuedTo = default(string), string last4 = default(string), string ninCountryCode = default(string), string ninGender = default(string), string ninNumber = default(string), string number = default(string), string origin = default(string), string shopsystemName = default(string), string shopsystemVersion = default(string), TypeEnum? type = default(TypeEnum?))
        {
            this.Bin = bin;
            this.Brand = brand;
            this.Corporate = corporate;
            this.Country = country;
            this.CustomerCountry = customerCountry;
            this.CustomerIp = customerIp;
            this.ExpMonth = expMonth;
            this.ExpYear = expYear;
            this.FraudRemarks = fraudRemarks;
            this.FraudReportDescription = fraudReportDescription;
            this.FraudReported = fraudReported;
            this.FraudReportedAt = fraudReportedAt;
            this.FraudSuspected = fraudSuspected;
            this.Hash = hash;
            this.Is3dSecure = is3dSecure;
            this.IssuedTo = issuedTo;
            this.Last4 = last4;
            this.NinCountryCode = ninCountryCode;
            this.NinGender = ninGender;
            this.NinNumber = ninNumber;
            this.Number = number;
            this.Origin = origin;
            this.ShopsystemName = shopsystemName;
            this.ShopsystemVersion = shopsystemVersion;
            this.Type = type;
        }
        
        /// <summary>
        /// Card type only: Card BIN
        /// </summary>
        /// <value>Card type only: Card BIN</value>
        [DataMember(Name="bin", EmitDefaultValue=false)]
        public string Bin { get; set; }

        /// <summary>
        /// Card type only: The card brand
        /// </summary>
        /// <value>Card type only: The card brand</value>
        [DataMember(Name="brand", EmitDefaultValue=false)]
        public string Brand { get; set; }

        /// <summary>
        /// Card type only: Corporate status
        /// </summary>
        /// <value>Card type only: Corporate status</value>
        [DataMember(Name="corporate", EmitDefaultValue=false)]
        public bool? Corporate { get; set; }

        /// <summary>
        /// Card type only: The card country in ISO 3166-1 alpha-3
        /// </summary>
        /// <value>Card type only: The card country in ISO 3166-1 alpha-3</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Customer country based on IP geo-data, ISO 3166-1 alpha-2
        /// </summary>
        /// <value>Customer country based on IP geo-data, ISO 3166-1 alpha-2</value>
        [DataMember(Name="customer_country", EmitDefaultValue=false)]
        public string CustomerCountry { get; set; }

        /// <summary>
        /// Customer IP
        /// </summary>
        /// <value>Customer IP</value>
        [DataMember(Name="customer_ip", EmitDefaultValue=false)]
        public string CustomerIp { get; set; }

        /// <summary>
        /// Card type only: The expiration month
        /// </summary>
        /// <value>Card type only: The expiration month</value>
        [DataMember(Name="exp_month", EmitDefaultValue=false)]
        public int? ExpMonth { get; set; }

        /// <summary>
        /// Card type only: The expiration year (YYYY)
        /// </summary>
        /// <value>Card type only: The expiration year (YYYY)</value>
        [DataMember(Name="exp_year", EmitDefaultValue=false)]
        public int? ExpYear { get; set; }

        /// <summary>
        /// Fraud remarks
        /// </summary>
        /// <value>Fraud remarks</value>
        [DataMember(Name="fraud_remarks", EmitDefaultValue=false)]
        public List<string> FraudRemarks { get; set; }

        /// <summary>
        /// Fraud report description
        /// </summary>
        /// <value>Fraud report description</value>
        [DataMember(Name="fraud_report_description", EmitDefaultValue=false)]
        public string FraudReportDescription { get; set; }

        /// <summary>
        /// Reported as fraudulent
        /// </summary>
        /// <value>Reported as fraudulent</value>
        [DataMember(Name="fraud_reported", EmitDefaultValue=false)]
        public bool? FraudReported { get; set; }

        /// <summary>
        /// Fraud report description
        /// </summary>
        /// <value>Fraud report description</value>
        [DataMember(Name="fraud_reported_at", EmitDefaultValue=false)]
        public string FraudReportedAt { get; set; }

        /// <summary>
        /// Suspected fraud
        /// </summary>
        /// <value>Suspected fraud</value>
        [DataMember(Name="fraud_suspected", EmitDefaultValue=false)]
        public bool? FraudSuspected { get; set; }

        /// <summary>
        /// Card type only: PCI safe hash of card number
        /// </summary>
        /// <value>Card type only: PCI safe hash of card number</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// Card type only: Verified via 3D-Secure
        /// </summary>
        /// <value>Card type only: Verified via 3D-Secure</value>
        [DataMember(Name="is_3d_secure", EmitDefaultValue=false)]
        public string Is3dSecure { get; set; }

        /// <summary>
        /// Name of cardholder
        /// </summary>
        /// <value>Name of cardholder</value>
        [DataMember(Name="issued_to", EmitDefaultValue=false)]
        public string IssuedTo { get; set; }

        /// <summary>
        /// Card type only: The last 4 digits of the card number
        /// </summary>
        /// <value>Card type only: The last 4 digits of the card number</value>
        [DataMember(Name="last4", EmitDefaultValue=false)]
        public string Last4 { get; set; }

        /// <summary>
        /// NIN type only. NIN country code, ISO 3166-1 alpha-3
        /// </summary>
        /// <value>NIN type only. NIN country code, ISO 3166-1 alpha-3</value>
        [DataMember(Name="nin_country_code", EmitDefaultValue=false)]
        public string NinCountryCode { get; set; }

        /// <summary>
        /// NIN type only. NIN gender
        /// </summary>
        /// <value>NIN type only. NIN gender</value>
        [DataMember(Name="nin_gender", EmitDefaultValue=false)]
        public string NinGender { get; set; }

        /// <summary>
        /// NIN type only. NIN number
        /// </summary>
        /// <value>NIN type only. NIN number</value>
        [DataMember(Name="nin_number", EmitDefaultValue=false)]
        public string NinNumber { get; set; }

        /// <summary>
        /// Mobile type only: The mobile number
        /// </summary>
        /// <value>Mobile type only: The mobile number</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Origin of this transaction or card. If set, describes where it came from.
        /// </summary>
        /// <value>Origin of this transaction or card. If set, describes where it came from.</value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public string Origin { get; set; }

        /// <summary>
        /// Shop system module name
        /// </summary>
        /// <value>Shop system module name</value>
        [DataMember(Name="shopsystem_name", EmitDefaultValue=false)]
        public string ShopsystemName { get; set; }

        /// <summary>
        /// Shop system module version
        /// </summary>
        /// <value>Shop system module version</value>
        [DataMember(Name="shopsystem_version", EmitDefaultValue=false)]
        public string ShopsystemVersion { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QuickPayProtocolV10Metadata {\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("  Corporate: ").Append(Corporate).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CustomerCountry: ").Append(CustomerCountry).Append("\n");
            sb.Append("  CustomerIp: ").Append(CustomerIp).Append("\n");
            sb.Append("  ExpMonth: ").Append(ExpMonth).Append("\n");
            sb.Append("  ExpYear: ").Append(ExpYear).Append("\n");
            sb.Append("  FraudRemarks: ").Append(FraudRemarks).Append("\n");
            sb.Append("  FraudReportDescription: ").Append(FraudReportDescription).Append("\n");
            sb.Append("  FraudReported: ").Append(FraudReported).Append("\n");
            sb.Append("  FraudReportedAt: ").Append(FraudReportedAt).Append("\n");
            sb.Append("  FraudSuspected: ").Append(FraudSuspected).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Is3dSecure: ").Append(Is3dSecure).Append("\n");
            sb.Append("  IssuedTo: ").Append(IssuedTo).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  NinCountryCode: ").Append(NinCountryCode).Append("\n");
            sb.Append("  NinGender: ").Append(NinGender).Append("\n");
            sb.Append("  NinNumber: ").Append(NinNumber).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  ShopsystemName: ").Append(ShopsystemName).Append("\n");
            sb.Append("  ShopsystemVersion: ").Append(ShopsystemVersion).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QuickPayProtocolV10Metadata);
        }

        /// <summary>
        /// Returns true if QuickPayProtocolV10Metadata instances are equal
        /// </summary>
        /// <param name="input">Instance of QuickPayProtocolV10Metadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QuickPayProtocolV10Metadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                ) && 
                (
                    this.Corporate == input.Corporate ||
                    (this.Corporate != null &&
                    this.Corporate.Equals(input.Corporate))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CustomerCountry == input.CustomerCountry ||
                    (this.CustomerCountry != null &&
                    this.CustomerCountry.Equals(input.CustomerCountry))
                ) && 
                (
                    this.CustomerIp == input.CustomerIp ||
                    (this.CustomerIp != null &&
                    this.CustomerIp.Equals(input.CustomerIp))
                ) && 
                (
                    this.ExpMonth == input.ExpMonth ||
                    (this.ExpMonth != null &&
                    this.ExpMonth.Equals(input.ExpMonth))
                ) && 
                (
                    this.ExpYear == input.ExpYear ||
                    (this.ExpYear != null &&
                    this.ExpYear.Equals(input.ExpYear))
                ) && 
                (
                    this.FraudRemarks == input.FraudRemarks ||
                    this.FraudRemarks != null &&
                    this.FraudRemarks.SequenceEqual(input.FraudRemarks)
                ) && 
                (
                    this.FraudReportDescription == input.FraudReportDescription ||
                    (this.FraudReportDescription != null &&
                    this.FraudReportDescription.Equals(input.FraudReportDescription))
                ) && 
                (
                    this.FraudReported == input.FraudReported ||
                    (this.FraudReported != null &&
                    this.FraudReported.Equals(input.FraudReported))
                ) && 
                (
                    this.FraudReportedAt == input.FraudReportedAt ||
                    (this.FraudReportedAt != null &&
                    this.FraudReportedAt.Equals(input.FraudReportedAt))
                ) && 
                (
                    this.FraudSuspected == input.FraudSuspected ||
                    (this.FraudSuspected != null &&
                    this.FraudSuspected.Equals(input.FraudSuspected))
                ) && 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.Is3dSecure == input.Is3dSecure ||
                    (this.Is3dSecure != null &&
                    this.Is3dSecure.Equals(input.Is3dSecure))
                ) && 
                (
                    this.IssuedTo == input.IssuedTo ||
                    (this.IssuedTo != null &&
                    this.IssuedTo.Equals(input.IssuedTo))
                ) && 
                (
                    this.Last4 == input.Last4 ||
                    (this.Last4 != null &&
                    this.Last4.Equals(input.Last4))
                ) && 
                (
                    this.NinCountryCode == input.NinCountryCode ||
                    (this.NinCountryCode != null &&
                    this.NinCountryCode.Equals(input.NinCountryCode))
                ) && 
                (
                    this.NinGender == input.NinGender ||
                    (this.NinGender != null &&
                    this.NinGender.Equals(input.NinGender))
                ) && 
                (
                    this.NinNumber == input.NinNumber ||
                    (this.NinNumber != null &&
                    this.NinNumber.Equals(input.NinNumber))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.ShopsystemName == input.ShopsystemName ||
                    (this.ShopsystemName != null &&
                    this.ShopsystemName.Equals(input.ShopsystemName))
                ) && 
                (
                    this.ShopsystemVersion == input.ShopsystemVersion ||
                    (this.ShopsystemVersion != null &&
                    this.ShopsystemVersion.Equals(input.ShopsystemVersion))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                if (this.Corporate != null)
                    hashCode = hashCode * 59 + this.Corporate.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CustomerCountry != null)
                    hashCode = hashCode * 59 + this.CustomerCountry.GetHashCode();
                if (this.CustomerIp != null)
                    hashCode = hashCode * 59 + this.CustomerIp.GetHashCode();
                if (this.ExpMonth != null)
                    hashCode = hashCode * 59 + this.ExpMonth.GetHashCode();
                if (this.ExpYear != null)
                    hashCode = hashCode * 59 + this.ExpYear.GetHashCode();
                if (this.FraudRemarks != null)
                    hashCode = hashCode * 59 + this.FraudRemarks.GetHashCode();
                if (this.FraudReportDescription != null)
                    hashCode = hashCode * 59 + this.FraudReportDescription.GetHashCode();
                if (this.FraudReported != null)
                    hashCode = hashCode * 59 + this.FraudReported.GetHashCode();
                if (this.FraudReportedAt != null)
                    hashCode = hashCode * 59 + this.FraudReportedAt.GetHashCode();
                if (this.FraudSuspected != null)
                    hashCode = hashCode * 59 + this.FraudSuspected.GetHashCode();
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.Is3dSecure != null)
                    hashCode = hashCode * 59 + this.Is3dSecure.GetHashCode();
                if (this.IssuedTo != null)
                    hashCode = hashCode * 59 + this.IssuedTo.GetHashCode();
                if (this.Last4 != null)
                    hashCode = hashCode * 59 + this.Last4.GetHashCode();
                if (this.NinCountryCode != null)
                    hashCode = hashCode * 59 + this.NinCountryCode.GetHashCode();
                if (this.NinGender != null)
                    hashCode = hashCode * 59 + this.NinGender.GetHashCode();
                if (this.NinNumber != null)
                    hashCode = hashCode * 59 + this.NinNumber.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Origin != null)
                    hashCode = hashCode * 59 + this.Origin.GetHashCode();
                if (this.ShopsystemName != null)
                    hashCode = hashCode * 59 + this.ShopsystemName.GetHashCode();
                if (this.ShopsystemVersion != null)
                    hashCode = hashCode * 59 + this.ShopsystemVersion.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
