{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.quickpay.net/docs/v10/"
    }
  ],
  "info": {
    "title": "Quickpay API v10",
    "version": "10.0",
    "description": "<h2 id=\"authorization\">Authorization</h2>\n\n<p>Authorization is done using basic-auth. Authorization can be done with a user or an agreement.</p>\n\n<ul>\n  <li>When authorized with a user one is able to edit own settings, create new merchant or request access to existing merchant.</li>\n  <li>When authorized with an agreement one is able to perform anything on the account that agreement gives permissions to.</li>\n</ul>\n\n",
    "contact": {
      "email": "support@quickpay.net"
    },
    "termsOfService": "http://quickpay.net/terms"
  },
  "tags": [
    {
      "name": "account",
      "description": "Operations about accounts"
    },
    {
      "name": "acl-resources",
      "description": "Operations about acl-resources"
    },
    {
      "name": "acquirers",
      "description": "Operations about acquirers"
    },
    {
      "name": "activity",
      "description": "Operations about activities"
    },
    {
      "name": "agreements",
      "description": "Operations about agreements"
    },
    {
      "name": "brandings",
      "description": "Operations about brandings"
    },
    {
      "name": "cards",
      "description": "Operations about cards"
    },
    {
      "name": "changelog",
      "description": "Operations about changelogs"
    },
    {
      "name": "cryptography",
      "description": "Operations about cryptographies"
    },
    {
      "name": "fees",
      "description": "Operations about fees"
    },
    {
      "name": "fraud-rulesets",
      "description": "Operations about fraud-rulesets"
    },
    {
      "name": "operational-status",
      "description": "Operations about operational-statuses"
    },
    {
      "name": "payment-method-priority",
      "description": "Operations about payment-method-priorities"
    },
    {
      "name": "payments",
      "description": "Operations about payments"
    },
    {
      "name": "payouts",
      "description": "Operations about payouts"
    },
    {
      "name": "ping",
      "description": "Operations about pings"
    },
    {
      "name": "subscription-groups",
      "description": "Operations about subscription-groups"
    },
    {
      "name": "subscriptions",
      "description": "Operations about subscriptions"
    }
  ],
  "paths": {
    "/account": {
      "get": {
        "tags": [
          "account"
        ],
        "operationId": "GET-account---format-",
        "summary": "Get merchant account",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "operationId": "PATCH-account---format-",
        "summary": "Update merchant account",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "customer_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "customer_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "customer_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "customer_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "customer_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "customer_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "customer_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "billing_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "billing_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "billing_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "billing_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "billing_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "billing_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "billing_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "billing_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "callback_url": {
                    "description": "<p>Callback url</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][active]": {
                    "description": "<p>Enable Bambora payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[bambora][identification_code]": {
                    "description": "<p>Bambora identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][identification_code_int]": {
                    "description": "<p>Bambora international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][business_code]": {
                    "description": "<p>Business code (assigned by Bambora)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[bambora][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[bambora][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[bambora][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[bambora][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][visa_bin]": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[bambora][mastercard_bin]": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[clearhaus][active]": {
                    "description": "<p>Enable ClearHaus payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[clearhaus][api_key]": {
                    "description": "<p>Clearhaus API key (is required but may be left empty)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[clearhaus][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[clearhaus][payout]": {
                    "description": "<p>Enable payouts (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[clearhaus][apple_pay]": {
                    "description": "<p>Enable Apple Pay (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][active]": {
                    "description": "<p>Enable Elavon payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][identification_code]": {
                    "description": "<p>Elavon identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][identification_code_int]": {
                    "description": "<p>Elavon international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][business_code]": {
                    "description": "<p>Business code (assigned by Elavon)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[elavon][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][visa_bin]": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[elavon][mastercard_bin]": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][active]": {
                    "description": "<p>Enable Handelsbanken payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[handelsbanken][identification_code]": {
                    "description": "<p>Handelsbanken identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][identification_code_int]": {
                    "description": "<p>Handelsbanken international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][business_code]": {
                    "description": "<p>Business code (assigned by Handelsbanken)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[handelsbanken][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[handelsbanken][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[handelsbanken][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[handelsbanken][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][visa_bin]": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[handelsbanken][mastercard_bin]": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[klarna][active]": {
                    "description": "<p>Enable Klarna payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[klarna][eid]": {
                    "description": "<p>Klarna merchant ID</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "acquirer_settings[klarna][shared_secret]": {
                    "description": "<p>Klarna shared secret</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepay][active]": {
                    "description": "<p>Enable MobilePay payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[mobilepay][delivery_limited_to]": {
                    "description": "<p>Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepaysubscriptions][active]": {
                    "description": "<p>Enable MobilePay Subscriptions payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[mobilepaysubscriptions][auth_state]": {
                    "description": "<p>Identifier MobilePay Subscriptions uses to link requests to callbacks</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepaysubscriptions][code_verifier]": {
                    "description": "<p>Verifies received code challenge</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepaysubscriptions][last_token_refresh]": {
                    "description": "<p>Unix Timestamp of last time the tokens were refreshed</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "acquirer_settings[mobilepaysubscriptions][nonce]": {
                    "description": "<p>Associate client sessions with ID Tokens to mitigate replay attacks</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepaysubscriptions][pending_status]": {
                    "description": "<p>0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed</p>\n",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "acquirer_settings[mobilepaysubscriptions][provider]": {
                    "description": "<p>The provider / sales-place chosen by the merchant</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[mobilepaysubscriptions][refresh_token]": {
                    "description": "<p>Token to refresh access token for up to 1 year</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[nets][active]": {
                    "description": "<p>Enable Nets/Teller payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][identification_code]": {
                    "description": "<p>Nets TOF number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[nets][business_code]": {
                    "description": "<p>Business code (assigned by Nets)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[nets][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Nets)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][fbg1886]": {
                    "description": "<p>Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][secured_by_nets]": {
                    "description": "<p>Enable SecuredByNets fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][identification_code_int]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[nets][americanexpress]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][dinersclub]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[nets][securepay]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "acquirer_settings[nets][visa_bin]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[nets][mastercard_bin]": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[paypal][active]": {
                    "description": "<p>Enable PayPal payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[paypal][recurring]": {
                    "description": "<p>Enable recurring payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[paypal][credit_card]": {
                    "description": "<p>Allow credit-card payments. (Only for US/CA/UK merchants)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[paypal][token]": {
                    "description": "<p>Authentication token</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[paypal][token_secret]": {
                    "description": "<p>Authentication token secret</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[paypal][scope]": {
                    "description": "<p>Authentication scope</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[sofort][active]": {
                    "description": "<p>Enable Sofort payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[sofort][customer_number]": {
                    "description": "<p>Sofort customer number</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "acquirer_settings[sofort][project_id]": {
                    "description": "<p>Sofort Gateway project id</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "acquirer_settings[sofort][api_key]": {
                    "description": "<p>Sofort API key</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[sofort][gateway]": {
                    "description": "<p>Enable Sofort Gateway feature</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "acquirer_settings[sofort][ideal]": {
                    "description": "<p>Enable Sofort iDeal feature</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[sofort][ideal_project_id]": {
                    "description": "<p>Sofort iDeal project id</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "acquirer_settings[sofort][ideal_project_password]": {
                    "description": "<p>Sofort iDeal project password</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[sofort][ideal_notification_password]": {
                    "description": "<p>Sofort iDeal notification password</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][active]": {
                    "description": "<p>Enable Swedbank payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[swedbank][identification_code]": {
                    "description": "<p>Swedbank identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][identification_code_int]": {
                    "description": "<p>Swedbank international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][business_code]": {
                    "description": "<p>Business code (assigned by Swedbank)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[swedbank][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[swedbank][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[swedbank][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[swedbank][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][visa_bin]": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[swedbank][mastercard_bin]": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][active]": {
                    "description": "<p>Enable Teller payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[teller][identification_code]": {
                    "description": "<p>Teller TOF number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][identification_code_int]": {
                    "description": "<p>Teller international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][business_code]": {
                    "description": "<p>Business code (assigned by Teller)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[teller][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[teller][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[teller][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection. (disabling requires agreement with Teller)</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "acquirer_settings[teller][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][visa_bin]": {
                    "description": "<p>Teller VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[teller][mastercard_bin]": {
                    "description": "<p>Teller Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][active]": {
                    "description": "<p>Enable Valitor payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[valitor][identification_code]": {
                    "description": "<p>Valitor identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][identification_code_int]": {
                    "description": "<p>Valitor international identification number</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][business_code]": {
                    "description": "<p>Business code (assigned by Valitor)</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][recurring]": {
                    "description": "<p>Enable recurring payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[valitor][americanexpress]": {
                    "description": "<p>Enable AMEX payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[valitor][dinersclub]": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[valitor][securepay]": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[valitor][visa_mpi_merchant_id]": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][mastercard_mpi_merchant_id]": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][visa_bin]": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[valitor][mastercard_bin]": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "acquirer_settings[viabill][active]": {
                    "description": "<p>Enable ViaBill payments</p>\n",
                    "type": "boolean"
                  },
                  "acquirer_settings[viabill][api_key]": {
                    "description": "<p>ViaBill API key</p>\n",
                    "type": "string"
                  },
                  "integration_settings[economic][active]": {
                    "description": "<p>Enable e-conomic integration</p>\n",
                    "type": "boolean"
                  },
                  "integration_settings[economic][agreement]": {
                    "description": "<p>e-conomic agreement no.</p>\n",
                    "type": "string"
                  },
                  "integration_settings[economic][agreement_token]": {
                    "description": "<p>economic agreement grant token</p>\n",
                    "type": "string"
                  },
                  "pci[saq_a]": {
                    "description": "<p>Enable SAQ A</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_a_ep]": {
                    "description": "<p>Enable SAQ A-EP</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_b]": {
                    "description": "<p>Enable SAQ B</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_b_ip]": {
                    "description": "<p>Enable SAQ B-IP</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_c]": {
                    "description": "<p>Enable SAQ C</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_c_vt]": {
                    "description": "<p>Enable SAQ C-VT</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_d_merchant]": {
                    "description": "<p>Enable SAQ D Merchant</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_d_service_provider]": {
                    "description": "<p>Enable SAQ D Service Provider</p>\n",
                    "type": "boolean"
                  },
                  "pci[saq_p2pe_hw]": {
                    "description": "<p>Enable SAQ P2PE-HW</p>\n",
                    "type": "boolean"
                  },
                  "autofee": {
                    "description": "<p>Add automatic fee on all payments</p>\n",
                    "type": "boolean"
                  },
                  "default_payment_methods": {
                    "description": "<p>Comma separated list of default payment methods</p>\n",
                    "type": "string"
                  },
                  "shop_url": {
                    "description": "<p>Shop URL (deprecated, use shop_urls instead)</p>\n",
                    "type": "string"
                  },
                  "shop_urls": {
                    "description": "<p>Shop URLs</p>\n",
                    "type": "string"
                  },
                  "contact_email": {
                    "description": "<p>Contact email</p>\n",
                    "type": "string"
                  },
                  "shop_name": {
                    "description": "<p>Shop name</p>\n",
                    "type": "string"
                  },
                  "shopsystem": {
                    "description": "<p>Shop system</p>\n",
                    "type": "string"
                  },
                  "timezone": {
                    "description": "<table>\n  <tbody>\n    <tr>\n      <td>Timezone UTC offsets in Zulu (+</td>\n      <td>-)hh:mm</td>\n    </tr>\n  </tbody>\n</table>\n",
                    "type": "string"
                  },
                  "locale": {
                    "description": "<p>Locale as a two letter language code</p>\n",
                    "type": "string"
                  },
                  "default_branding_id": {
                    "description": "<p>Id of default branding</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "logging_stops_at": {
                    "description": "<p>Timestamp when logging is active</p>\n",
                    "type": "string"
                  },
                  "allow_test_transactions": {
                    "description": "<p>Allow test transactions</p>\n",
                    "type": "boolean"
                  },
                  "default_payment_language": {
                    "description": "<p>Default payment language (Two letter language code, ISO-639-1)</p>\n",
                    "type": "string"
                  },
                  "default_text_on_statement": {
                    "description": "<p>Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.</p>\n",
                    "type": "string"
                  },
                  "default_branding_config": {
                    "description": "<p>Default branding config. Can be overwritten in branding or in request to payment window</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "operationId": "DELETE-account---format-",
        "summary": "Delete merchant account",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/account/private-key": {
      "get": {
        "tags": [
          "account"
        ],
        "operationId": "GET-account-private-key---format-",
        "summary": "Gets the private key of the merchant",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "account"
        ],
        "operationId": "PATCH-account-private-key---format-",
        "summary": "Regenerates the private key of the merchant",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PrivateKey"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/account/04-platform": {
      "get": {
        "tags": [
          "account"
        ],
        "operationId": "GET-account-04-platform---format-",
        "summary": "Get 04 platform settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "operationId": "DELETE-account-04-platform---format-",
        "summary": "Delete 04 platform settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Zero4PlatformSettings"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/account/logo": {
      "get": {
        "tags": [
          "account"
        ],
        "operationId": "GET-account-logo---format-",
        "summary": "Gets the merchant logo as a raw download or a 404 if none exists",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Type of logo</p>\n",
            "name": "logo_type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "payment_window",
                "mobilepay"
              ],
              "default": "payment_window"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "account"
        ],
        "operationId": "PUT-account-logo---format-",
        "summary": "Creates or replaces the current merchant logo",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "<p>The logo as a multipart file. If the logo_type is ‘mobilepay’, the logo must be a 250px x 250px PNG file</p>\n",
                    "type": "string"
                  },
                  "logo_type": {
                    "description": "<p>Type of logo</p>\n",
                    "type": "string",
                    "enum": [
                      "payment_window",
                      "mobilepay"
                    ],
                    "default": "payment_window"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "account"
        ],
        "operationId": "DELETE-account-logo---format-",
        "summary": "Deletes the current merchant logo",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Type of logo</p>\n",
            "name": "logo_type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "payment_window",
                "mobilepay"
              ],
              "default": "payment_window"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/acquirers": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers---format-",
        "summary": "Fetch acquirers",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettings"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettings"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettings"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/acquirers/bambora": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-bambora---format-",
        "summary": "Get Bambora acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-bambora---format-",
        "summary": "Update Bambora acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsBambora"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Bambora payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Bambora identification number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Bambora international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Bambora)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Bambora)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/clearhaus": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-clearhaus---format-",
        "summary": "Get Clearhaus acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-clearhaus---format-",
        "summary": "Update Clearhaus acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsClearhaus"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable ClearHaus payments</p>\n",
                    "type": "boolean"
                  },
                  "api_key": {
                    "description": "<p>Clearhaus API key (is required but may be left empty)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  },
                  "payout": {
                    "description": "<p>Enable payouts (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  },
                  "apple_pay": {
                    "description": "<p>Enable Apple Pay (requires agreement with Clearhaus)</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/coinify": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-coinify---format-",
        "summary": "Get Coinify acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-coinify---format-",
        "summary": "Update Coinify acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsCoinify"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Coinify Bitcoin payments</p>\n",
                    "type": "boolean"
                  },
                  "api_key": {
                    "description": "<p>Coinify API key</p>\n",
                    "type": "string"
                  },
                  "api_secret": {
                    "description": "<p>Coinify API secret</p>\n",
                    "type": "string"
                  },
                  "ipn_secret": {
                    "description": "<p>Coinify IPN secret (recommended)</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/elavon": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-elavon---format-",
        "summary": "Get Elavon acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-elavon---format-",
        "summary": "Update Elavon acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsElavon"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Elavon payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Elavon identification number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Elavon international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Elavon)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Elavon)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/handelsbanken": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-handelsbanken---format-",
        "summary": "Get Handelsbanken acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-handelsbanken---format-",
        "summary": "Update Handelsbanken acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Handelsbanken payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Handelsbanken identification number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Handelsbanken international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Handelsbanken)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Handelsbanken)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/klarna": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-klarna---format-",
        "summary": "Get Klarna acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-klarna---format-",
        "summary": "Update Klarna acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarna"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Klarna payments</p>\n",
                    "type": "boolean"
                  },
                  "eid": {
                    "description": "<p>Klarna merchant ID</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "shared_secret": {
                    "description": "<p>Klarna shared secret</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/klarnapayments": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-klarnapayments---format-",
        "summary": "Get KlarnaPayments acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-klarnapayments---format-",
        "summary": "Update KlarnaPayments acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Klarna payments</p>\n",
                    "type": "boolean"
                  },
                  "uid": {
                    "description": "<p>Klarna username</p>\n",
                    "type": "string"
                  },
                  "password": {
                    "description": "<p>Klarna password</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/mobilepay": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-mobilepay---format-",
        "summary": "Get MobilePay acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-mobilepay---format-",
        "summary": "Update MobilePay acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePay"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable MobilePay payments</p>\n",
                    "type": "boolean"
                  },
                  "delivery_limited_to": {
                    "description": "<p>Limit MobilePay delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/mobilepayonline": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-mobilepayonline---format-",
        "summary": "Get MobilePayOnline acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-mobilepayonline---format-",
        "summary": "Update MobilePayOnline acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable MobilePay Online payments</p>\n",
                    "type": "boolean"
                  },
                  "merchant_id": {
                    "description": "<p>Id for the merchant</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "delivery_limited_to": {
                    "description": "<p>Limit MobilePay Online delivery address selection to theses countries. (ISO 3166-1 alpha-2 without delimiter ‘DKNOSEFI’) (Valid options are DK,NO,SE,FI)</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/mobilepaysubscriptions": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-mobilepaysubscriptions---format-",
        "summary": "Get MobilePaySubscriptions acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-mobilepaysubscriptions---format-",
        "summary": "Update MobilePaySubscriptions acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable MobilePay Subscriptions payments</p>\n",
                    "type": "boolean"
                  },
                  "auth_state": {
                    "description": "<p>Identifier MobilePay Subscriptions uses to link requests to callbacks</p>\n",
                    "type": "string"
                  },
                  "code_verifier": {
                    "description": "<p>Verifies received code challenge</p>\n",
                    "type": "string"
                  },
                  "last_token_refresh": {
                    "description": "<p>Unix Timestamp of last time the tokens were refreshed</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "nonce": {
                    "description": "<p>Associate client sessions with ID Tokens to mitigate replay attacks</p>\n",
                    "type": "string"
                  },
                  "pending_status": {
                    "description": "<p>0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed</p>\n",
                    "type": "integer",
                    "format": "int32",
                    "default": 0
                  },
                  "provider": {
                    "description": "<p>The provider / sales-place chosen by the merchant</p>\n",
                    "type": "string"
                  },
                  "refresh_token": {
                    "description": "<p>Token to refresh access token for up to 1 year</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/nets": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-nets---format-",
        "summary": "Get Nets acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-nets---format-",
        "summary": "Update Nets acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsNets"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Nets/Teller payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Nets TOF number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Nets)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Nets)</p>\n",
                    "type": "boolean"
                  },
                  "fbg1886": {
                    "description": "<p>Enable Forbrugsforeningen payments (requires agreement with Nets and Forbrugsforeningen)</p>\n",
                    "type": "boolean"
                  },
                  "secured_by_nets": {
                    "description": "<p>Enable SecuredByNets fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "identification_code_int": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  },
                  "americanexpress": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "visa_bin": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>(Depricated; use Teller acquirer)</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/paypal": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-paypal---format-",
        "summary": "Get PayPal acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-paypal---format-",
        "summary": "Update PayPal acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPayPal"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable PayPal payments</p>\n",
                    "type": "boolean"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments</p>\n",
                    "type": "boolean"
                  },
                  "credit_card": {
                    "description": "<p>Allow credit-card payments. (Only for US/CA/UK merchants)</p>\n",
                    "type": "boolean"
                  },
                  "token": {
                    "description": "<p>Authentication token</p>\n",
                    "type": "string"
                  },
                  "token_secret": {
                    "description": "<p>Authentication token secret</p>\n",
                    "type": "string"
                  },
                  "scope": {
                    "description": "<p>Authentication scope</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/paysafecard": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-paysafecard---format-",
        "summary": "Get Paysafecard acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-paysafecard---format-",
        "summary": "Update Paysafecard acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsPaysafecard"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Paysafecard payments</p>\n",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "<p>Paysafecard username</p>\n",
                    "type": "string"
                  },
                  "password": {
                    "description": "<p>Paysafecard password</p>\n",
                    "type": "string"
                  },
                  "currencies": {
                    "description": "<p>Paysafecard currencies (Paysafecard requires agreement per currency)</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/resurs": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-resurs---format-",
        "summary": "Get Resurs acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-resurs---format-",
        "summary": "Update Resurs acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsResurs"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Resurs payments</p>\n",
                    "type": "boolean"
                  },
                  "customer_id": {
                    "description": "<p>Resurs customer ID</p>\n",
                    "type": "string"
                  },
                  "customer_password": {
                    "description": "<p>Resurs password</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/sofort": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-sofort---format-",
        "summary": "Get Sofort acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-sofort---format-",
        "summary": "Update Sofort acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSofort"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Sofort payments</p>\n",
                    "type": "boolean"
                  },
                  "customer_number": {
                    "description": "<p>Sofort customer number</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "project_id": {
                    "description": "<p>Sofort Gateway project id</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "api_key": {
                    "description": "<p>Sofort API key</p>\n",
                    "type": "string"
                  },
                  "gateway": {
                    "description": "<p>Enable Sofort Gateway feature</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "ideal": {
                    "description": "<p>Enable Sofort iDeal feature</p>\n",
                    "type": "boolean"
                  },
                  "ideal_project_id": {
                    "description": "<p>Sofort iDeal project id</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "ideal_project_password": {
                    "description": "<p>Sofort iDeal project password</p>\n",
                    "type": "string"
                  },
                  "ideal_notification_password": {
                    "description": "<p>Sofort iDeal notification password</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/swedbank": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-swedbank---format-",
        "summary": "Get Swedbank acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-swedbank---format-",
        "summary": "Update Swedbank acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwedbank"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Swedbank payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Swedbank identification number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Swedbank international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Swedbank)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Swedbank)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/swish": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-swish---format-",
        "summary": "Get Swish acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-swish---format-",
        "summary": "Update Swish acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsSwish"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Swish payments</p>\n",
                    "type": "boolean"
                  },
                  "merchant_id": {
                    "description": "<p>Swish merchant id</p>\n",
                    "type": "string"
                  },
                  "cryptography_key_id": {
                    "description": "<p>Swish certificate and private-key from Cryptography store</p>\n",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/teller": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-teller---format-",
        "summary": "Get Teller acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-teller---format-",
        "summary": "Update Teller acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTeller"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Teller payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Teller TOF number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Teller international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Teller)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Teller)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection. (disabling requires agreement with Teller)</p>\n",
                    "type": "boolean",
                    "default": true
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>Teller VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Teller Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/trustly": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-trustly---format-",
        "summary": "Get Trustly acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-trustly---format-",
        "summary": "Update Trustly acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsTrustly"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Trustly payments</p>\n",
                    "type": "boolean"
                  },
                  "ideal": {
                    "description": "<p>Enable iDeal payments</p>\n",
                    "type": "boolean"
                  },
                  "username": {
                    "description": "<p>Trustly API username</p>\n",
                    "type": "string"
                  },
                  "password": {
                    "description": "<p>Trustly API password</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/valitor": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-valitor---format-",
        "summary": "Get Valitor acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-valitor---format-",
        "summary": "Update Valitor acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsValitor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Valitor payments</p>\n",
                    "type": "boolean"
                  },
                  "identification_code": {
                    "description": "<p>Valitor identification number</p>\n",
                    "type": "string"
                  },
                  "identification_code_int": {
                    "description": "<p>Valitor international identification number</p>\n",
                    "type": "string"
                  },
                  "business_code": {
                    "description": "<p>Business code (assigned by Valitor)</p>\n",
                    "type": "string"
                  },
                  "recurring": {
                    "description": "<p>Enable recurring payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "americanexpress": {
                    "description": "<p>Enable AMEX payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "dinersclub": {
                    "description": "<p>Enable Diners Club payments (requires agreement with Valitor)</p>\n",
                    "type": "boolean"
                  },
                  "securepay": {
                    "description": "<p>Enable SecurePay fraud protection.</p>\n",
                    "type": "boolean"
                  },
                  "visa_mpi_merchant_id": {
                    "description": "<p>VISA MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "mastercard_mpi_merchant_id": {
                    "description": "<p>Mastercard MPI merchant id. Used for 3D secure transactions</p>\n",
                    "type": "string"
                  },
                  "visa_bin": {
                    "description": "<p>VISA acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  },
                  "mastercard_bin": {
                    "description": "<p>Mastercard acquirer bin used for 3D Secure</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/viabill": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-viabill---format-",
        "summary": "Get ViaBill acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-viabill---format-",
        "summary": "Update ViaBill acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsViaBill"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable ViaBill payments</p>\n",
                    "type": "boolean"
                  },
                  "api_key": {
                    "description": "<p>ViaBill API key</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/vipps": {
      "get": {
        "tags": [
          "acquirers"
        ],
        "operationId": "GET-acquirers-vipps---format-",
        "summary": "Get Vipps acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "acquirers"
        ],
        "operationId": "PATCH-acquirers-vipps---format-",
        "summary": "Update Vipps acquirer settings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerSettingsVipps"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "description": "<p>Enable Vipps payments</p>\n",
                    "type": "boolean"
                  },
                  "client_id": {
                    "description": "<p>Vipps OAuth Client ID</p>\n",
                    "type": "string"
                  },
                  "client_secret": {
                    "description": "<p>Vipps OAuth Client Secret</p>\n",
                    "type": "string"
                  },
                  "serial_number": {
                    "description": "<p>Vipps agreement serial</p>\n",
                    "type": "string"
                  },
                  "access_token_subscription_key": {
                    "description": "<p>Vipps Access-Token Subscription Key</p>\n",
                    "type": "string"
                  },
                  "ecommerce_subscription_key": {
                    "description": "<p>Vipps eCommerce Subscription Key</p>\n",
                    "type": "string"
                  },
                  "orgno": {
                    "description": "<p>Vipps companys organization number</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "active"
                ]
              }
            }
          }
        }
      }
    },
    "/acquirers/{acquirer}/test": {
      "post": {
        "tags": [
          "acquirers"
        ],
        "operationId": "POST-acquirers--acquirer-test---format-",
        "summary": "Test payments via acquirer",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Acquirer name</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "elavon",
                "handelsbanken",
                "nets",
                "paypal",
                "swedbank",
                "teller",
                "valitor"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerTest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerTest"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerTest"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerTest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/cards": {
      "get": {
        "tags": [
          "cards"
        ],
        "operationId": "GET-cards---format-",
        "summary": "Get saved cards",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Timestamp field</p>\n",
            "name": "timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "min_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "max_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by suspected fraud</p>\n",
            "name": "fraud_suspected",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "cards"
        ],
        "operationId": "POST-cards---format-",
        "summary": "Create saved card",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string",
                    "default": {}
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cards/{id}": {
      "get": {
        "tags": [
          "cards"
        ],
        "operationId": "GET-cards--id---format-",
        "summary": "Get saved card",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "cards"
        ],
        "operationId": "PATCH-cards--id---format-",
        "summary": "Update saved card",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cards/{id}/authorize": {
      "post": {
        "tags": [
          "cards"
        ],
        "operationId": "POST-cards--id-authorize---format-",
        "summary": "Authorize saved card",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "card[number]": {
                    "description": "<p>Card number</p>\n",
                    "type": "string"
                  },
                  "card[expiration]": {
                    "description": "<p>Expiration date (YYMM)</p>\n",
                    "type": "string"
                  },
                  "card[cvd]": {
                    "description": "<p>CVD/CVV</p>\n",
                    "type": "string"
                  },
                  "card[issued_to]": {
                    "description": "<p>Card holder name</p>\n",
                    "type": "string"
                  },
                  "card[brand]": {
                    "description": "<p>Brand to use on multi-brand card</p>\n",
                    "type": "string",
                    "enum": [
                      "american-express",
                      "dankort",
                      "diners",
                      "fbg1886",
                      "jcb",
                      "maestro",
                      "mastercard",
                      "mastercard-debet",
                      "visa",
                      "visa-electron"
                    ]
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "card[number]"
                ]
              }
            }
          }
        }
      }
    },
    "/cards/{id}/cancel": {
      "post": {
        "tags": [
          "cards"
        ],
        "operationId": "POST-cards--id-cancel---format-",
        "summary": "Cancel saved card",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/cards/{id}/tokens": {
      "post": {
        "tags": [
          "cards"
        ],
        "operationId": "POST-cards--id-tokens---format-",
        "summary": "Create card token",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardToken"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CardToken"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardToken"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/cards/{id}/link": {
      "put": {
        "tags": [
          "cards"
        ],
        "operationId": "PUT-cards--id-link---format-",
        "summary": "Create or update a card link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardLinkUrl"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardLinkUrl"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CardLinkUrl"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardLinkUrl"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "agreement_id": {
                    "description": "<p>Agreement to use. Defaults to the Payment Window agreement</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "language": {
                    "description": "<p>Language</p>\n",
                    "type": "string",
                    "default": "en"
                  },
                  "continueurl": {
                    "description": "<p>Url that cardholder is redirected to after authorize</p>\n",
                    "type": "string"
                  },
                  "cancelurl": {
                    "description": "<p>Url that cardholder is redirected to after cancelation</p>\n",
                    "type": "string"
                  },
                  "callbackurl": {
                    "description": "<p>Endpoint for async callback</p>\n",
                    "type": "string"
                  },
                  "payment_methods": {
                    "description": "<p>Limit payment methods</p>\n",
                    "type": "string",
                    "default": "creditcard"
                  },
                  "branding_id": {
                    "description": "<p>Override branding. Default is merchant default branding</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "google_analytics_tracking_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "google_analytics_client_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>Force usage of the given acquirer</p>\n",
                    "type": "string"
                  },
                  "framed": {
                    "description": "<p>Allow opening in iframe</p>\n",
                    "type": "boolean"
                  },
                  "branding_config": {
                    "description": "<p>Config for branding. Will be merged with the default config in the branding</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cards"
        ],
        "operationId": "DELETE-cards--id-link---format-",
        "summary": "Delete card link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/cards/{id}/fraud-report": {
      "post": {
        "tags": [
          "cards"
        ],
        "operationId": "POST-cards--id-fraud-report---format-",
        "summary": "Create fraud confirmation report",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cards/{id}/operations/{operation_id}": {
      "get": {
        "tags": [
          "cards"
        ],
        "operationId": "GET-cards--id-operations--operation_id---format-",
        "summary": "Get Operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CardOperation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CardOperation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CardOperation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CardOperation"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/agreements": {
      "get": {
        "tags": [
          "agreements"
        ],
        "operationId": "GET-agreements---format-",
        "summary": "Get agreements",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Return only or filter out support agreements</p>\n",
            "name": "support",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by system agreement service name</p>\n",
            "name": "service",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>If set, only show the agreement of the caller</p>\n",
            "name": "me",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>If set, shows agreements for another account if current account has access.</p>\n",
            "name": "account_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "agreements"
        ],
        "operationId": "POST-agreements---format-",
        "summary": "Create agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_email": {
                    "description": "<p>Email of the user to invite to this account. Only one of user_email and system_user can be specified.</p>\n",
                    "type": "string"
                  },
                  "system_user": {
                    "description": "<p>Create a new system user with this name. Only one of user_email and system_user can be specified.</p>\n",
                    "type": "string"
                  },
                  "owner": {
                    "description": "<p>Is account owner. Default is false</p>\n",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "<p>Description of the account</p>\n",
                    "type": "string"
                  },
                  "acl_permissions[][resource]": {
                    "description": "<p>Resource uri</p>\n",
                    "type": "string"
                  },
                  "acl_permissions[][get]": {
                    "description": "<p>Allow GET</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][post]": {
                    "description": "<p>Allow POST</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][put]": {
                    "description": "<p>Allow PUT</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][delete]": {
                    "description": "<p>Allow DELETE</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][patch]": {
                    "description": "<p>Allow PATCH</p>\n",
                    "type": "boolean"
                  },
                  "ip_restriction[][address]": {
                    "description": "<p>IP address</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/agreements/{id}": {
      "get": {
        "tags": [
          "agreements"
        ],
        "operationId": "GET-agreements--id---format-",
        "summary": "Get agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "agreements"
        ],
        "operationId": "PATCH-agreements--id---format-",
        "summary": "Update agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner": {
                    "description": "<p>Is account owner</p>\n",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "<p>Description of the account</p>\n",
                    "type": "string"
                  },
                  "ip_restriction[][address]": {
                    "description": "<p>IP address</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "agreements"
        ],
        "operationId": "PUT-agreements--id---format-",
        "summary": "Replace agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner": {
                    "description": "<p>Is account owner</p>\n",
                    "type": "boolean"
                  },
                  "description": {
                    "description": "<p>Description of the account</p>\n",
                    "type": "string"
                  },
                  "acl_permissions[][resource]": {
                    "description": "<p>Resource uri</p>\n",
                    "type": "string"
                  },
                  "acl_permissions[][get]": {
                    "description": "<p>Allow GET</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][post]": {
                    "description": "<p>Allow POST</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][put]": {
                    "description": "<p>Allow PUT</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][delete]": {
                    "description": "<p>Allow DELETE</p>\n",
                    "type": "boolean"
                  },
                  "acl_permissions[][patch]": {
                    "description": "<p>Allow PATCH</p>\n",
                    "type": "boolean"
                  },
                  "ip_restriction[][address]": {
                    "description": "<p>IP address</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "agreements"
        ],
        "operationId": "DELETE-agreements--id---format-",
        "summary": "Delete agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/agreements/{id}/activity": {
      "get": {
        "tags": [
          "agreements"
        ],
        "operationId": "GET-agreements--id-activity---format-",
        "summary": "Get agreement activity",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/agreements/{id}/api-key": {
      "patch": {
        "tags": [
          "agreements"
        ],
        "operationId": "PATCH-agreements--id-api-key---format-",
        "summary": "Regenerate the API key for this agreement",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Agreement id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Agreement"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/acl-resources": {
      "get": {
        "tags": [
          "acl-resources"
        ],
        "operationId": "GET-acl-resources---format-",
        "summary": "Get acl resources",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AclResource"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AclResource"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AclResource"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AclResource"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/activity": {
      "get": {
        "tags": [
          "activity"
        ],
        "operationId": "GET-activity---format-",
        "summary": "Get activity",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Limit to activity by user_id</p>\n",
            "name": "user_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by target type, e.g. ‘Payment’</p>\n",
            "name": "target_type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by target id, e.g. id of payment</p>\n",
            "name": "target_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by whether a support user made the activity</p>\n",
            "name": "support",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/activity/{id}": {
      "get": {
        "tags": [
          "activity"
        ],
        "operationId": "GET-activity--id---format-",
        "summary": "Get a single activity entry",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Activity entry id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/brandings": {
      "get": {
        "tags": [
          "brandings"
        ],
        "operationId": "GET-brandings---format-",
        "summary": "Get brandings",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Specifies which attributes to skip. Default is ‘resources.data’</p>\n",
            "name": "except",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Specifies which attributes to include. (Overrides except default)</p>\n",
            "name": "only",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "id"
              ],
              "default": "name"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "brandings"
        ],
        "operationId": "POST-brandings---format-",
        "summary": "Create a branding",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Descriptive name of the branding</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/brandings/{id}": {
      "get": {
        "tags": [
          "brandings"
        ],
        "operationId": "GET-brandings--id---format-",
        "summary": "Get a branding",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Specifies which attributes to skip. Default is ‘resources.data’</p>\n",
            "name": "except",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Specifies which attributes to include. (Overrides except default)</p>\n",
            "name": "only",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "brandings"
        ],
        "operationId": "PATCH-brandings--id---format-",
        "summary": "Update a branding",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Descriptive name of the branding</p>\n",
                    "type": "string"
                  },
                  "except": {
                    "description": "<p>Specifies which attributes to skip. Default is ‘resources.data’</p>\n",
                    "type": "string"
                  },
                  "only": {
                    "description": "<p>Specifies which attributes to include. (Overrides except default)</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "brandings"
        ],
        "operationId": "DELETE-brandings--id---format-",
        "summary": "Delete a branding",
        "description": "\n",
        "parameters": [
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/brandings/{id}/copy": {
      "post": {
        "tags": [
          "brandings"
        ],
        "operationId": "POST-brandings--id-copy---format-",
        "summary": "Copies branding and returns the new branding",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Branding"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "except": {
                    "description": "<p>Specifies which attributes to skip. Default is ‘resources.data’</p>\n",
                    "type": "string"
                  },
                  "only": {
                    "description": "<p>Specifies which attributes to include. (Overrides except default)</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/brandings/{id}/*resource_name": {
      "get": {
        "tags": [
          "brandings"
        ],
        "operationId": "GET-brandings--id-*resource_name---format-",
        "summary": "Gets a branding resource as a file",
        "description": "\n",
        "parameters": [
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "resource_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "brandings"
        ],
        "operationId": "PUT-brandings--id-*resource_name---format-",
        "summary": "Uploads a file and creates or replaces a resource",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "415": {
            "description": "Unsupported Media Type"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "<p>The file send as multipart</p>\n",
                    "type": "string"
                  },
                  "resource_name": {
                    "description": "\n",
                    "type": "string"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "brandings"
        ],
        "operationId": "DELETE-brandings--id-*resource_name---format-",
        "summary": "Deletes a branding resource",
        "description": "\n",
        "parameters": [
          {
            "in": "path",
            "description": "<p>Branding id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "resource_name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/changelog": {
      "get": {
        "tags": [
          "changelog"
        ],
        "operationId": "GET-changelog---format-",
        "summary": "Get the QuickPay API Changelog",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/operational-status/acquirers": {
      "get": {
        "tags": [
          "operational-status"
        ],
        "operationId": "GET-operational-status-acquirers---format-",
        "summary": "Gets operational status of all acquirers",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "acquirer",
                "status"
              ],
              "default": "acquirer"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerStatus"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerStatus"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerStatus"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AcquirerStatus"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "operationId": "GET-ping---format-",
        "summary": "Use this to test connectivity to the API",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "ping"
        ],
        "operationId": "POST-ping---format-",
        "summary": "Use this to test connectivity to the API",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Pong"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/cryptography/keys": {
      "get": {
        "tags": [
          "cryptography"
        ],
        "operationId": "GET-cryptography-keys---format-",
        "summary": "Get keys",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ec",
                "rsa"
              ]
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "cryptography"
        ],
        "operationId": "POST-cryptography-keys---format-",
        "summary": "Create key",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "description": "\n",
                    "type": "string",
                    "enum": [
                      "ec",
                      "rsa"
                    ]
                  },
                  "short_description": {
                    "description": "\n",
                    "type": "string"
                  },
                  "key_size": {
                    "description": "\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "curve": {
                    "description": "\n",
                    "type": "string",
                    "enum": [
                      "secp112r1",
                      "secp112r2",
                      "secp128r1",
                      "secp128r2",
                      "secp160k1",
                      "secp160r1",
                      "secp160r2",
                      "secp192k1",
                      "secp224k1",
                      "secp224r1",
                      "secp256k1",
                      "secp384r1",
                      "secp521r1",
                      "prime192v1",
                      "prime192v2",
                      "prime192v3",
                      "prime239v1",
                      "prime239v2",
                      "prime239v3",
                      "prime256v1",
                      "sect113r1",
                      "sect113r2",
                      "sect131r1",
                      "sect131r2",
                      "sect163k1",
                      "sect163r1",
                      "sect163r2",
                      "sect193r1",
                      "sect193r2",
                      "sect233k1",
                      "sect233r1",
                      "sect239k1",
                      "sect283k1",
                      "sect283r1",
                      "sect409k1",
                      "sect409r1",
                      "sect571k1",
                      "sect571r1",
                      "c2pnb163v1",
                      "c2pnb163v2",
                      "c2pnb163v3",
                      "c2pnb176v1",
                      "c2tnb191v1",
                      "c2tnb191v2",
                      "c2tnb191v3",
                      "c2pnb208w1",
                      "c2tnb239v1",
                      "c2tnb239v2",
                      "c2tnb239v3",
                      "c2pnb272w1",
                      "c2pnb304w1",
                      "c2tnb359v1",
                      "c2pnb368w1",
                      "c2tnb431r1",
                      "wap-wsg-idm-ecid-wtls1",
                      "wap-wsg-idm-ecid-wtls3",
                      "wap-wsg-idm-ecid-wtls4",
                      "wap-wsg-idm-ecid-wtls5",
                      "wap-wsg-idm-ecid-wtls6",
                      "wap-wsg-idm-ecid-wtls7",
                      "wap-wsg-idm-ecid-wtls8",
                      "wap-wsg-idm-ecid-wtls9",
                      "wap-wsg-idm-ecid-wtls10",
                      "wap-wsg-idm-ecid-wtls11",
                      "wap-wsg-idm-ecid-wtls12",
                      "Oakley-EC2N-3",
                      "Oakley-EC2N-4",
                      "brainpoolP160r1",
                      "brainpoolP160t1",
                      "brainpoolP192r1",
                      "brainpoolP192t1",
                      "brainpoolP224r1",
                      "brainpoolP224t1",
                      "brainpoolP256r1",
                      "brainpoolP256t1",
                      "brainpoolP320r1",
                      "brainpoolP320t1",
                      "brainpoolP384r1",
                      "brainpoolP384t1",
                      "brainpoolP512r1",
                      "brainpoolP512t1",
                      "SM2"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        }
      }
    },
    "/cryptography/keys/{id}": {
      "get": {
        "tags": [
          "cryptography"
        ],
        "operationId": "GET-cryptography-keys--id---format-",
        "summary": "Get key",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "cryptography"
        ],
        "operationId": "PATCH-cryptography-keys--id---format-",
        "summary": "update key",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantCryptographyKey"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "short_description": {
                    "description": "\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "cryptography"
        ],
        "operationId": "DELETE-cryptography-keys--id---format-",
        "summary": "Delete key",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/cryptography/keys/{id}/csr": {
      "post": {
        "tags": [
          "cryptography"
        ],
        "operationId": "POST-cryptography-keys--id-csr---format-",
        "summary": "Create certificate request (CSR)",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "subject[][key]": {
                    "description": "\n",
                    "type": "string",
                    "enum": [
                      "C",
                      "CN",
                      "emailAddress",
                      "L",
                      "OU",
                      "postalCode",
                      "ST",
                      "street"
                    ]
                  },
                  "subject[][value]": {
                    "description": "\n",
                    "type": "string"
                  },
                  "subject[][encoding]": {
                    "description": "\n",
                    "type": "string",
                    "enum": [
                      "printable",
                      "utf8"
                    ]
                  }
                },
                "required": [
                  "subject[][key]"
                ]
              }
            }
          }
        }
      }
    },
    "/cryptography/keys/{id}/certificate": {
      "get": {
        "tags": [
          "cryptography"
        ],
        "operationId": "GET-cryptography-keys--id-certificate---format-",
        "summary": "Get certificate",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "put": {
        "tags": [
          "cryptography"
        ],
        "operationId": "PUT-cryptography-keys--id-certificate---format-",
        "summary": "Replace certificate",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "415": {
            "description": "Unsupported Media Type"
          }
        },
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "tags": [
          "cryptography"
        ],
        "operationId": "DELETE-cryptography-keys--id-certificate---format-",
        "summary": "Delete certificate",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/fees": {
      "post": {
        "tags": [
          "fees"
        ],
        "operationId": "POST-fees---format-",
        "summary": "Calculate fee for auth params. Requires one of card[number] or card[token]",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount specified in smallest unit</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "currency": {
                    "description": "<p>Currency</p>\n",
                    "type": "string"
                  },
                  "card[apple_pay_token]": {
                    "description": "<p>Apple Pay payment-token</p>\n",
                    "type": "string"
                  },
                  "card[mobilepay_online_token]": {
                    "description": "<p>MobilePay Online payment-token</p>\n",
                    "type": "string"
                  },
                  "card[token]": {
                    "description": "<p>Card token</p>\n",
                    "type": "string"
                  },
                  "card[number]": {
                    "description": "<p>Card number</p>\n",
                    "type": "string"
                  },
                  "card[brand]": {
                    "description": "<p>Brand to use on multi-brand card</p>\n",
                    "type": "string",
                    "enum": [
                      "american-express",
                      "dankort",
                      "diners",
                      "fbg1886",
                      "jcb",
                      "maestro",
                      "mastercard",
                      "mastercard-debet",
                      "visa",
                      "visa-electron"
                    ]
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/fees/{acquirer}/{payment_method}": {
      "post": {
        "tags": [
          "fees"
        ],
        "operationId": "POST-fees--acquirer--payment_method---format-",
        "summary": "Calculate fee",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Name of acquirer</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "handelsbanken",
                "elavon",
                "klarna",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps",
                "resurs",
                "klarnapayments"
              ]
            }
          },
          {
            "in": "path",
            "description": "<p>Payment method</p>\n",
            "name": "payment_method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatedFee"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount specified in smallest unit</p>\n",
                    "type": "integer",
                    "format": "int32"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/fees/formulas": {
      "get": {
        "tags": [
          "fees"
        ],
        "operationId": "GET-fees-formulas---format-",
        "summary": "Get all fee formulas",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              }
            }
          }
        }
      }
    },
    "/fees/formulas/{acquirer}": {
      "get": {
        "tags": [
          "fees"
        ],
        "operationId": "GET-fees-formulas--acquirer---format-",
        "summary": "Get fee formulas",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Name of acquirer</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "handelsbanken",
                "elavon",
                "klarna",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps",
                "resurs",
                "klarnapayments"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/fees/formulas/{acquirer}/{payment_method}": {
      "get": {
        "tags": [
          "fees"
        ],
        "operationId": "GET-fees-formulas--acquirer--payment_method---format-",
        "summary": "Get fee formula",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Name of acquirer</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "handelsbanken",
                "elavon",
                "klarna",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps",
                "resurs",
                "klarnapayments"
              ]
            }
          },
          {
            "in": "path",
            "description": "<p>Payment method</p>\n",
            "name": "payment_method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "patch": {
        "tags": [
          "fees"
        ],
        "operationId": "PATCH-fees-formulas--acquirer--payment_method---format-",
        "summary": "Update a fee formula",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Name of acquirer</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "handelsbanken",
                "elavon",
                "klarna",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps",
                "resurs",
                "klarnapayments"
              ]
            }
          },
          {
            "in": "path",
            "description": "<p>Payment method</p>\n",
            "name": "payment_method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FeeFormula"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "formula": {
                    "description": "<p>The formula</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "fees"
        ],
        "operationId": "DELETE-fees-formulas--acquirer--payment_method---format-",
        "summary": "Reset a formula to default",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Name of acquirer</p>\n",
            "name": "acquirer",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "handelsbanken",
                "elavon",
                "klarna",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps",
                "resurs",
                "klarnapayments"
              ]
            }
          },
          {
            "in": "path",
            "description": "<p>Payment method</p>\n",
            "name": "payment_method",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/fraud-rulesets": {
      "get": {
        "tags": [
          "fraud-rulesets"
        ],
        "operationId": "GET-fraud-rulesets---format-",
        "summary": "Get custom defined fraud rulesets",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "fraud-rulesets"
        ],
        "operationId": "POST-fraud-rulesets---format-",
        "summary": "Create a custom fraud ruleset",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Descriptive name</p>\n",
                    "type": "string"
                  },
                  "filter_rules[][metric_name]": {
                    "description": "<p>Name af variable metric</p>\n",
                    "type": "string"
                  },
                  "filter_rules[][operator]": {
                    "description": "<p>Operator</p>\n",
                    "type": "string",
                    "enum": [
                      "==",
                      "!=",
                      "<",
                      "<=",
                      ">",
                      ">=",
                      "in",
                      "not_in"
                    ]
                  },
                  "filter_rules[][value]": {
                    "description": "<p>String representation of the value to compare to the metric, e.g. ‘DNK’, ‘42’ or ‘DNK, DEU’</p>\n",
                    "type": "string"
                  },
                  "action": {
                    "description": "<p>Action to take when ruleset triggers</p>\n",
                    "type": "string",
                    "enum": [
                      "nothing",
                      "flag",
                      "force_3d",
                      "block"
                    ]
                  },
                  "combinator": {
                    "description": "<p>Method to combine filter rules</p>\n",
                    "type": "string",
                    "enum": [
                      "and",
                      "or"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/fraud-rulesets/{id}": {
      "get": {
        "tags": [
          "fraud-rulesets"
        ],
        "operationId": "GET-fraud-rulesets--id---format-",
        "summary": "Get ruleset by id",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Ruleset id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "fraud-rulesets"
        ],
        "operationId": "PATCH-fraud-rulesets--id---format-",
        "summary": "Update a ruleset",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Ruleset id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Descriptive name</p>\n",
                    "type": "string"
                  },
                  "filter_rules[][metric_name]": {
                    "description": "<p>Name af variable metric</p>\n",
                    "type": "string"
                  },
                  "filter_rules[][operator]": {
                    "description": "<p>Operator</p>\n",
                    "type": "string",
                    "enum": [
                      "==",
                      "!=",
                      "<",
                      "<=",
                      ">",
                      ">=",
                      "in",
                      "not_in"
                    ]
                  },
                  "filter_rules[][value]": {
                    "description": "<p>String representation of the value to compare to the metric</p>\n",
                    "type": "string"
                  },
                  "action": {
                    "description": "<p>Action to take when ruleset triggers</p>\n",
                    "type": "string",
                    "enum": [
                      "nothing",
                      "flag",
                      "force_3d",
                      "block"
                    ]
                  },
                  "combinator": {
                    "description": "<p>Method to combine filter rules</p>\n",
                    "type": "string",
                    "enum": [
                      "and",
                      "or"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "fraud-rulesets"
        ],
        "operationId": "DELETE-fraud-rulesets--id---format-",
        "summary": "Delete ruleset",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Ruleset id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudRuleset"
                }
              }
            }
          },
          "204": {
            "description": "No content"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/payment-method-priority": {
      "get": {
        "tags": [
          "payment-method-priority"
        ],
        "operationId": "GET-payment-method-priority---format-",
        "summary": "Get merchant payment method priority",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodPriority"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodPriority"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodPriority"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodPriority"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "payment-method-priority"
        ],
        "operationId": "POST-payment-method-priority---format-",
        "summary": "Replaces the payment method priority of the merchant",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "payment_method_priority": {
                    "description": "<p>A map of payment method to acquirers, e.g. { “visa”: [“clearhaus”, “nets”], … }</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "payment_method_priority"
                ]
              }
            }
          }
        }
      }
    },
    "/payments": {
      "get": {
        "tags": [
          "payments"
        ],
        "operationId": "GET-payments---format-",
        "summary": "Get all payments",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Year</p>\n",
            "name": "date[year]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Month</p>\n",
            "name": "date[month]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 12
            }
          },
          {
            "in": "query",
            "description": "<p>Day of the month</p>\n",
            "name": "date[day]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 31
            }
          },
          {
            "in": "query",
            "description": "<p>Hour of the day</p>\n",
            "name": "date[hour]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 23
            }
          },
          {
            "in": "query",
            "description": "<p>Minute of the hour</p>\n",
            "name": "date[minute]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 59
            }
          },
          {
            "in": "query",
            "description": "<p>Timestamp field</p>\n",
            "name": "timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "min_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "max_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Return accepted payments</p>\n",
            "name": "accepted",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Find by order_id</p>\n",
            "name": "order_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Find by state</p>\n",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "initial",
                "pending",
                "new",
                "rejected",
                "processed"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Find by transaction id</p>\n",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by acquirer</p>\n",
            "name": "acquirer",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "elavon",
                "handelsbanken",
                "klarna",
                "klarnapayments",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "resurs",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by suspected fraud</p>\n",
            "name": "fraud_suspected",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "order_id",
                "created_at"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              },
              "application/octet-stream": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              },
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Payment"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments---format-",
        "summary": "Create payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "description": "Payment",
          "required": true
        }
      }
    },
    "/payments/{id}/link": {
      "put": {
        "tags": [
          "payments"
        ],
        "operationId": "PUT-payments--id-link---format-",
        "summary": "Create or update a payment link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Transaction id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount to authorize</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "agreement_id": {
                    "description": "<p>Agreement to use. Defaults to the Payment Window agreement</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "language": {
                    "description": "<p>Language</p>\n",
                    "type": "string",
                    "default": "en"
                  },
                  "continue_url": {
                    "description": "<p>Url that cardholder is redirected to after authorize</p>\n",
                    "type": "string"
                  },
                  "cancel_url": {
                    "description": "<p>Url that cardholder is redirected to after cancelation</p>\n",
                    "type": "string"
                  },
                  "callback_url": {
                    "description": "<p>Endpoint for async callback</p>\n",
                    "type": "string"
                  },
                  "payment_methods": {
                    "description": "<p>Limit payment methods</p>\n",
                    "type": "string"
                  },
                  "auto_fee": {
                    "description": "<p>Add acquirer fee to amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "branding_id": {
                    "description": "<p>Override branding. Default is merchant default branding</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "google_analytics_tracking_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "google_analytics_client_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>Force usage of the given acquirer</p>\n",
                    "type": "string"
                  },
                  "deadline": {
                    "description": "<p>Set a deadline in seconds for the cardholder to complete</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "framed": {
                    "description": "<p>Allow opening in iframe</p>\n",
                    "type": "boolean"
                  },
                  "branding_config": {
                    "description": "<p>Config for branding. Will be merged with the default config in the branding</p>\n",
                    "type": "string"
                  },
                  "customer_email": {
                    "description": "<p>Required for PayPal. Email of customer.</p>\n",
                    "type": "string"
                  },
                  "invoice_address_selection": {
                    "description": "<p>Get customer invoice address via acquirer (Currently MobilePay and PayPal only)</p>\n",
                    "type": "boolean"
                  },
                  "shipping_address_selection": {
                    "description": "<p>Get customer shipping address via acquirer (Currently MobilePay and PayPal only)</p>\n",
                    "type": "boolean"
                  },
                  "auto_capture": {
                    "description": "<p>When true, payment is captured after authorization. Default is false</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "payments"
        ],
        "operationId": "DELETE-payments--id-link---format-",
        "summary": "Delete payment link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Transaction id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/payments/{id}": {
      "get": {
        "tags": [
          "payments"
        ],
        "operationId": "GET-payments--id---format-",
        "summary": "Get payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "payments"
        ],
        "operationId": "PATCH-payments--id---format-",
        "summary": "Update payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "deadline_at": {
                    "description": "<p>Payment must be authorized before this time</p>\n",
                    "type": "string",
                    "format": "date-time"
                  },
                  "invoice_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "invoice_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "invoice_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "invoice_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "invoice_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "invoice_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "invoice_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "shipping_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "shipping_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "shipping_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "shipping_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "shipping_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "shipping_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "shipping_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "basket[][qty]": {
                    "description": "<p>Quantity</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "basket[][item_no]": {
                    "description": "<p>Item reference number</p>\n",
                    "type": "string"
                  },
                  "basket[][item_name]": {
                    "description": "<p>Item name</p>\n",
                    "type": "string"
                  },
                  "basket[][item_price]": {
                    "description": "<p>Per item price (incl. VAT)</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "basket[][vat_rate]": {
                    "description": "<p>VAT rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "shipping[method]": {
                    "description": "<p>Shipping method</p>\n",
                    "type": "string",
                    "enum": [
                      "store_pick_up",
                      "home_delivery",
                      "registered_box",
                      "unregistered_box",
                      "pick_up_point",
                      "own_delivery"
                    ]
                  },
                  "shipping[company]": {
                    "description": "<p>Shipping company</p>\n",
                    "type": "string"
                  },
                  "shipping[amount]": {
                    "description": "<p>Shipping price (incl. VAT)</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "shipping[vat_rate]": {
                    "description": "<p>VAT rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "shipping[tracking_number]": {
                    "description": "<p>Shipping tracking number</p>\n",
                    "type": "string"
                  },
                  "shipping[tracking_url]": {
                    "description": "<p>Shipping tracking url</p>\n",
                    "type": "string"
                  },
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/session": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-session---format-",
        "summary": "Create payment session",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "auto_capture": {
                    "description": "<p>When true, payment is captured after authorization. Default is false</p>\n",
                    "type": "boolean"
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "autofee": {
                    "description": "<p>When true, fee is calculated and added to the given amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "person[first_name]": {
                    "description": "<p>Person first name</p>\n",
                    "type": "string"
                  },
                  "person[last_name]": {
                    "description": "<p>Person last name</p>\n",
                    "type": "string"
                  },
                  "person[email]": {
                    "description": "<p>Person email</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/payments/{id}/authorize": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-authorize---format-",
        "summary": "Authorize payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "vat_rate": {
                    "description": "<p>Vate rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "card[number]": {
                    "description": "<p>Card number</p>\n",
                    "type": "string"
                  },
                  "card[expiration]": {
                    "description": "<p>Expiration date (YYMM)</p>\n",
                    "type": "string"
                  },
                  "card[cvd]": {
                    "description": "<p>CVD/CVV</p>\n",
                    "type": "string"
                  },
                  "card[token]": {
                    "description": "<p>Card token</p>\n",
                    "type": "string"
                  },
                  "card[apple_pay_token]": {
                    "description": "<p>Apple Pay payment-token</p>\n",
                    "type": "string"
                  },
                  "card[mobilepay_online_token]": {
                    "description": "<p>MobilePay Online payment-token</p>\n",
                    "type": "string"
                  },
                  "card[issued_to]": {
                    "description": "<p>Card holder name</p>\n",
                    "type": "string"
                  },
                  "card[brand]": {
                    "description": "<p>Brand to use on multi-brand card</p>\n",
                    "type": "string",
                    "enum": [
                      "american-express",
                      "dankort",
                      "diners",
                      "fbg1886",
                      "jcb",
                      "maestro",
                      "mastercard",
                      "mastercard-debet",
                      "visa",
                      "visa-electron"
                    ]
                  },
                  "card[status]": {
                    "description": "<p>3D-Secure status</p>\n",
                    "type": "string"
                  },
                  "card[eci]": {
                    "description": "<p>3D-Secure eci</p>\n",
                    "type": "string"
                  },
                  "card[xav]": {
                    "description": "<p>3D-Secure xav</p>\n",
                    "type": "string"
                  },
                  "card[cavv]": {
                    "description": "<p>3D-Secure cavv</p>\n",
                    "type": "string"
                  },
                  "mobile_number": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "nin[number]": {
                    "description": "<p>Customer NIN Number</p>\n",
                    "type": "string"
                  },
                  "nin[country_code]": {
                    "description": "<p>Customer country (ISO 3166-1 Alpha-3)</p>\n",
                    "type": "string"
                  },
                  "nin[gender]": {
                    "description": "<p>Customer gender</p>\n",
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "person[first_name]": {
                    "description": "<p>Person first name</p>\n",
                    "type": "string"
                  },
                  "person[last_name]": {
                    "description": "<p>Person last name</p>\n",
                    "type": "string"
                  },
                  "person[email]": {
                    "description": "<p>Person email</p>\n",
                    "type": "string"
                  },
                  "auto_capture": {
                    "description": "<p>When true, payment is captured after authorization. Default is false</p>\n",
                    "type": "boolean"
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "autofee": {
                    "description": "<p>When true, fee is calculated and added to the given amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  },
                  "zero_auth": {
                    "description": "<p>(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/payments/{id}/capture": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-capture---format-",
        "summary": "Capture payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/payments/{id}/refund": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-refund---format-",
        "summary": "Refund payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "vat_rate": {
                    "description": "<p>Vate rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/payments/{id}/cancel": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-cancel---format-",
        "summary": "Cancel payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/payments/{id}/renew": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-renew---format-",
        "summary": "Renew authorization",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/payments/{id}/fraud-report": {
      "post": {
        "tags": [
          "payments"
        ],
        "operationId": "POST-payments--id-fraud-report---format-",
        "summary": "Create fraud confirmation report",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payments/{id}/operations/{operation_id}": {
      "get": {
        "tags": [
          "payments"
        ],
        "operationId": "GET-payments--id-operations--operation_id---format-",
        "summary": "Get Operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "payments"
        ],
        "operationId": "PATCH-payments--id-operations--operation_id---format-",
        "summary": "Update operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payment id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "428": {
            "description": "Precondition required"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "pending": {
                    "description": "<p>Aborts the operation. Only possible on capture, refund, recurring and cancel operations (false is the only allowed value)</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "pending"
                ]
              }
            }
          }
        }
      }
    },
    "/payouts": {
      "get": {
        "tags": [
          "payouts"
        ],
        "operationId": "GET-payouts---format-",
        "summary": "Get payouts",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Year</p>\n",
            "name": "date[year]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Month</p>\n",
            "name": "date[month]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 12
            }
          },
          {
            "in": "query",
            "description": "<p>Day of the month</p>\n",
            "name": "date[day]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 31
            }
          },
          {
            "in": "query",
            "description": "<p>Hour of the day</p>\n",
            "name": "date[hour]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 23
            }
          },
          {
            "in": "query",
            "description": "<p>Minute of the hour</p>\n",
            "name": "date[minute]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 59
            }
          },
          {
            "in": "query",
            "description": "<p>Timestamp field</p>\n",
            "name": "timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "min_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "max_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Return accepted payouts</p>\n",
            "name": "accepted",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Find by order_id</p>\n",
            "name": "order_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Find by state</p>\n",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "initial",
                "pending",
                "rejected",
                "processed"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Find by payout id</p>\n",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by acquirer</p>\n",
            "name": "acquirer",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "elavon",
                "handelsbanken",
                "klarna",
                "klarnapayments",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "resurs",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "order_id",
                "created_at"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "payouts"
        ],
        "operationId": "POST-payouts---format-",
        "summary": "Create payout",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "description": "<p>Currency</p>\n",
                    "type": "string"
                  },
                  "order_id": {
                    "description": "<p>Unique order id(must be between 4-20 characters)</p>\n",
                    "type": "string"
                  },
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string",
                    "default": {}
                  },
                  "text_on_statement": {
                    "description": "<p>Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "currency"
                ]
              }
            }
          }
        }
      }
    },
    "/payouts/{id}/link": {
      "put": {
        "tags": [
          "payouts"
        ],
        "operationId": "PUT-payouts--id-link---format-",
        "summary": "Create or update a payout link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount to credit</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "agreement_id": {
                    "description": "<p>Agreement to use. Defaults to the Payment Window agreement</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "language": {
                    "description": "<p>Language</p>\n",
                    "type": "string",
                    "default": "en"
                  },
                  "continue_url": {
                    "description": "<p>Url that cardholder is redirected to after credit</p>\n",
                    "type": "string"
                  },
                  "cancel_url": {
                    "description": "<p>Url that cardholder is redirected to after cancelation</p>\n",
                    "type": "string"
                  },
                  "callback_url": {
                    "description": "<p>Endpoint for async callback</p>\n",
                    "type": "string"
                  },
                  "payment_methods": {
                    "description": "<p>Limit payment methods</p>\n",
                    "type": "string"
                  },
                  "branding_id": {
                    "description": "<p>Override branding. Default is merchant default branding</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "google_analytics_tracking_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "google_analytics_client_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>Force usage of the given acquirer</p>\n",
                    "type": "string"
                  },
                  "framed": {
                    "description": "<p>Allow opening in iframe</p>\n",
                    "type": "boolean"
                  },
                  "branding_config": {
                    "description": "<p>Config for branding. Will be merged with the default config in the branding</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "payouts"
        ],
        "operationId": "DELETE-payouts--id-link---format-",
        "summary": "Delete payout link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/payouts/{id}": {
      "get": {
        "tags": [
          "payouts"
        ],
        "operationId": "GET-payouts--id---format-",
        "summary": "Get payout",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "payouts"
        ],
        "operationId": "PATCH-payouts--id---format-",
        "summary": "Update payout",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/payouts/{id}/credit": {
      "post": {
        "tags": [
          "payouts"
        ],
        "operationId": "POST-payouts--id-credit---format-",
        "summary": "Authorize a payout",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payout"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "vat_rate": {
                    "description": "<p>Vate rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "card[number]": {
                    "description": "<p>Card number</p>\n",
                    "type": "string"
                  },
                  "card[expiration]": {
                    "description": "<p>Expiration date (YYMM)</p>\n",
                    "type": "string"
                  },
                  "card[cvd]": {
                    "description": "<p>CVD/CVV</p>\n",
                    "type": "string"
                  },
                  "card[token]": {
                    "description": "<p>Card token</p>\n",
                    "type": "string"
                  },
                  "card[apple_pay_token]": {
                    "description": "<p>Apple Pay payment-token</p>\n",
                    "type": "string"
                  },
                  "card[mobilepay_online_token]": {
                    "description": "<p>MobilePay Online payment-token</p>\n",
                    "type": "string"
                  },
                  "card[issued_to]": {
                    "description": "<p>Card holder name</p>\n",
                    "type": "string"
                  },
                  "card[brand]": {
                    "description": "<p>Brand to use on multi-brand card</p>\n",
                    "type": "string",
                    "enum": [
                      "american-express",
                      "dankort",
                      "diners",
                      "fbg1886",
                      "jcb",
                      "maestro",
                      "mastercard",
                      "mastercard-debet",
                      "visa",
                      "visa-electron"
                    ]
                  },
                  "card[status]": {
                    "description": "<p>3D-Secure status</p>\n",
                    "type": "string"
                  },
                  "card[eci]": {
                    "description": "<p>3D-Secure eci</p>\n",
                    "type": "string"
                  },
                  "card[xav]": {
                    "description": "<p>3D-Secure xav</p>\n",
                    "type": "string"
                  },
                  "card[cavv]": {
                    "description": "<p>3D-Secure cavv</p>\n",
                    "type": "string"
                  },
                  "mobile_number": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "nin[number]": {
                    "description": "<p>Customer NIN Number</p>\n",
                    "type": "string"
                  },
                  "nin[country_code]": {
                    "description": "<p>Customer country (ISO 3166-1 Alpha-3)</p>\n",
                    "type": "string"
                  },
                  "nin[gender]": {
                    "description": "<p>Customer gender</p>\n",
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "person[first_name]": {
                    "description": "<p>Person first name</p>\n",
                    "type": "string"
                  },
                  "person[last_name]": {
                    "description": "<p>Person last name</p>\n",
                    "type": "string"
                  },
                  "person[email]": {
                    "description": "<p>Person email</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/payouts/{id}/operations/{operation_id}": {
      "get": {
        "tags": [
          "payouts"
        ],
        "operationId": "GET-payouts--id-operations--operation_id---format-",
        "summary": "Get Operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Payout id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/subscription-groups": {
      "get": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "GET-subscription-groups---format-",
        "summary": "Get all subscription groups",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "POST-subscription-groups---format-",
        "summary": "Create subscription group",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Name of the group</p>\n",
                    "type": "string"
                  },
                  "amount": {
                    "description": "<p>Amount to capture on each recurring capture</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "currency": {
                    "description": "<p>Currency for the amount</p>\n",
                    "type": "string"
                  },
                  "description": {
                    "description": "<p>Descriptive text</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        }
      }
    },
    "/subscription-groups/{id}": {
      "get": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "GET-subscription-groups--id---format-",
        "summary": "Find subscription group by id",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription-group id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "PATCH-subscription-groups--id---format-",
        "summary": "Update subscription group",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription-group id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "<p>Name of the group</p>\n",
                    "type": "string"
                  },
                  "amount": {
                    "description": "<p>Amount to capture on each recurring capture</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "description": {
                    "description": "<p>Descriptive text</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "DELETE-subscription-groups--id---format-",
        "summary": "Delete subscription group",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription-group id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroup"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/subscription-groups/{id}/capture": {
      "post": {
        "tags": [
          "subscription-groups"
        ],
        "operationId": "POST-subscription-groups--id-capture---format-",
        "summary": "Create recurring payments on subscription group",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription-group id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroupResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroupResult"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroupResult"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionGroupResult"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id_prefix": {
                    "description": "<p>Unique prefix for the order id of the recurring payments</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "order_id_prefix"
                ]
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "GET-subscriptions---format-",
        "summary": "Get subscriptions",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Year</p>\n",
            "name": "date[year]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Month</p>\n",
            "name": "date[month]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 12
            }
          },
          {
            "in": "query",
            "description": "<p>Day of the month</p>\n",
            "name": "date[day]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 31
            }
          },
          {
            "in": "query",
            "description": "<p>Hour of the day</p>\n",
            "name": "date[hour]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 23
            }
          },
          {
            "in": "query",
            "description": "<p>Minute of the hour</p>\n",
            "name": "date[minute]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 59
            }
          },
          {
            "in": "query",
            "description": "<p>Timestamp field</p>\n",
            "name": "timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "updated_at"
              ],
              "default": "created_at"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "min_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter payments after the given time. Supported format: “%Y-%m-%d %H:%M:%S %z”</p>\n",
            "name": "max_time",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Return accepted subscriptions</p>\n",
            "name": "accepted",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Find by order_id</p>\n",
            "name": "order_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by state</p>\n",
            "name": "state",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "initial",
                "pending",
                "active",
                "cancelled",
                "rejected"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Find by subscription id</p>\n",
            "name": "id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by acquirer</p>\n",
            "name": "acquirer",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "bambora",
                "clearhaus",
                "coinify",
                "elavon",
                "handelsbanken",
                "klarna",
                "klarnapayments",
                "mobilepay",
                "mobilepayonline",
                "mobilepaysubscriptions",
                "nets",
                "paypal",
                "paysafecard",
                "resurs",
                "sofort",
                "swedbank",
                "swish",
                "teller",
                "trustly",
                "valitor",
                "viabill",
                "vipps"
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by subscription group</p>\n",
            "name": "group_id",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by suspected fraud</p>\n",
            "name": "fraud_suspected",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Filter by expiration</p>\n",
            "name": "expired",
            "required": false,
            "schema": {
              "type": "boolean",
              "enum": [
                true
              ]
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "id",
                "order_id",
                "created_at"
              ],
              "default": "id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          },
          {
            "in": "query",
            "description": "\n",
            "name": "page_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          }
        }
      },
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions---format-",
        "summary": "Create subscription",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "order_id": {
                    "description": "<p>Unique order id(must be between 4-20 characters)</p>\n",
                    "type": "string"
                  },
                  "invoice_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "invoice_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "invoice_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "invoice_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "invoice_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "invoice_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "invoice_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "shipping_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "shipping_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "shipping_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "shipping_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "shipping_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "shipping_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "shipping_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string",
                    "default": {}
                  },
                  "currency": {
                    "description": "<p>Currency</p>\n",
                    "type": "string"
                  },
                  "description": {
                    "description": "<p>Subscription description</p>\n",
                    "type": "string"
                  },
                  "branding_id": {
                    "description": "<p>Used branding id</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "group_ids": {
                    "description": "<p>Ids of subscription groups</p>\n",
                    "type": "string"
                  },
                  "text_on_statement": {
                    "description": "<p>Text to be displayed on cardholder’s statement. Max 22 ASCII chars. Currently supported by Clearhaus only.</p>\n",
                    "type": "string"
                  },
                  "shopsystem[name]": {
                    "description": "<p>Shop system module name</p>\n",
                    "type": "string"
                  },
                  "shopsystem[version]": {
                    "description": "<p>Shop system module version</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "order_id"
                ]
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/link": {
      "put": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "PUT-subscriptions--id-link---format-",
        "summary": "Create or update a payment link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Transaction id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLinkUrl"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount to authorize</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "agreement_id": {
                    "description": "<p>Agreement to use. Defaults to the Payment Window agreement</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "language": {
                    "description": "<p>Language</p>\n",
                    "type": "string",
                    "default": "en"
                  },
                  "continue_url": {
                    "description": "<p>Url that cardholder is redirected to after authorize</p>\n",
                    "type": "string"
                  },
                  "cancel_url": {
                    "description": "<p>Url that cardholder is redirected to after cancelation</p>\n",
                    "type": "string"
                  },
                  "callback_url": {
                    "description": "<p>Endpoint for async callback</p>\n",
                    "type": "string"
                  },
                  "payment_methods": {
                    "description": "<p>Limit payment methods</p>\n",
                    "type": "string"
                  },
                  "auto_fee": {
                    "description": "<p>Add acquirer fee to amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "branding_id": {
                    "description": "<p>Override branding. Default is merchant default branding</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "google_analytics_tracking_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "google_analytics_client_id": {
                    "description": "<p>Send events to Google Analytics</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>Force usage of the given acquirer</p>\n",
                    "type": "string"
                  },
                  "deadline": {
                    "description": "<p>Set a deadline in seconds for the cardholder to complete</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "framed": {
                    "description": "<p>Allow opening in iframe</p>\n",
                    "type": "boolean"
                  },
                  "branding_config": {
                    "description": "<p>Config for branding. Will be merged with the default config in the branding</p>\n",
                    "type": "string"
                  },
                  "customer_email": {
                    "description": "<p>Required for PayPal. Email of customer.</p>\n",
                    "type": "string"
                  },
                  "invoice_address_selection": {
                    "description": "<p>Get customer invoice address via acquirer (Currently MobilePay and PayPal only)</p>\n",
                    "type": "boolean"
                  },
                  "shipping_address_selection": {
                    "description": "<p>Get customer shipping address via acquirer (Currently MobilePay and PayPal only)</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "DELETE-subscriptions--id-link---format-",
        "summary": "Delete payment link",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Transaction id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Invalid parameters"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "GET-subscriptions--id---format-",
        "summary": "Get subscription",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Maximum number of operations to retrieve</p>\n",
            "name": "operations_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "PATCH-subscriptions--id---format-",
        "summary": "Update subscription",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "deadline_at": {
                    "description": "<p>Subscription must be authorized before this time</p>\n",
                    "type": "string",
                    "format": "date-time"
                  },
                  "group_ids": {
                    "description": "<p>Ids of subscription groups</p>\n",
                    "type": "string"
                  },
                  "description": {
                    "description": "<p>Subscription description</p>\n",
                    "type": "string"
                  },
                  "invoice_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "invoice_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "invoice_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "invoice_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "invoice_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "invoice_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "invoice_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "invoice_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "invoice_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "shipping_address[name]": {
                    "description": "<p>Name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[att]": {
                    "description": "<p>Att</p>\n",
                    "type": "string"
                  },
                  "shipping_address[company_name]": {
                    "description": "<p>Company name</p>\n",
                    "type": "string"
                  },
                  "shipping_address[street]": {
                    "description": "<p>Street</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_number]": {
                    "description": "<p>House number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[house_extension]": {
                    "description": "<p>House extension</p>\n",
                    "type": "string"
                  },
                  "shipping_address[city]": {
                    "description": "<p>City</p>\n",
                    "type": "string"
                  },
                  "shipping_address[zip_code]": {
                    "description": "<p>Zip code</p>\n",
                    "type": "string"
                  },
                  "shipping_address[region]": {
                    "description": "<p>Region</p>\n",
                    "type": "string"
                  },
                  "shipping_address[country_code]": {
                    "description": "<p>Three letter country code according to ISO 3166-1 Alpha-3</p>\n",
                    "type": "string"
                  },
                  "shipping_address[vat_no]": {
                    "description": "<p>VAT registration number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[phone_number]": {
                    "description": "<p>Phone number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[mobile_number]": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "shipping_address[email]": {
                    "description": "<p>Email address</p>\n",
                    "type": "string"
                  },
                  "variables": {
                    "description": "<p>Custom variables</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/session": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions--id-session---format-",
        "summary": "Create subscription session",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "autofee": {
                    "description": "<p>When true, fee is calculated and added to the given amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/authorize": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions--id-authorize---format-",
        "summary": "Authorize a subscription",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "vat_rate": {
                    "description": "<p>Vate rate</p>\n",
                    "type": "number",
                    "format": "float"
                  },
                  "card[number]": {
                    "description": "<p>Card number</p>\n",
                    "type": "string"
                  },
                  "card[expiration]": {
                    "description": "<p>Expiration date (YYMM)</p>\n",
                    "type": "string"
                  },
                  "card[cvd]": {
                    "description": "<p>CVD/CVV</p>\n",
                    "type": "string"
                  },
                  "card[token]": {
                    "description": "<p>Card token</p>\n",
                    "type": "string"
                  },
                  "card[apple_pay_token]": {
                    "description": "<p>Apple Pay payment-token</p>\n",
                    "type": "string"
                  },
                  "card[mobilepay_online_token]": {
                    "description": "<p>MobilePay Online payment-token</p>\n",
                    "type": "string"
                  },
                  "card[issued_to]": {
                    "description": "<p>Card holder name</p>\n",
                    "type": "string"
                  },
                  "card[brand]": {
                    "description": "<p>Brand to use on multi-brand card</p>\n",
                    "type": "string",
                    "enum": [
                      "american-express",
                      "dankort",
                      "diners",
                      "fbg1886",
                      "jcb",
                      "maestro",
                      "mastercard",
                      "mastercard-debet",
                      "visa",
                      "visa-electron"
                    ]
                  },
                  "card[status]": {
                    "description": "<p>3D-Secure status</p>\n",
                    "type": "string"
                  },
                  "card[eci]": {
                    "description": "<p>3D-Secure eci</p>\n",
                    "type": "string"
                  },
                  "card[xav]": {
                    "description": "<p>3D-Secure xav</p>\n",
                    "type": "string"
                  },
                  "card[cavv]": {
                    "description": "<p>3D-Secure cavv</p>\n",
                    "type": "string"
                  },
                  "mobile_number": {
                    "description": "<p>Mobile number</p>\n",
                    "type": "string"
                  },
                  "nin[number]": {
                    "description": "<p>Customer NIN Number</p>\n",
                    "type": "string"
                  },
                  "nin[country_code]": {
                    "description": "<p>Customer country (ISO 3166-1 Alpha-3)</p>\n",
                    "type": "string"
                  },
                  "nin[gender]": {
                    "description": "<p>Customer gender</p>\n",
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ]
                  },
                  "person[first_name]": {
                    "description": "<p>Person first name</p>\n",
                    "type": "string"
                  },
                  "person[last_name]": {
                    "description": "<p>Person last name</p>\n",
                    "type": "string"
                  },
                  "person[email]": {
                    "description": "<p>Person email</p>\n",
                    "type": "string"
                  },
                  "acquirer": {
                    "description": "<p>If set, will force the use of this acquirer</p>\n",
                    "type": "string",
                    "enum": [
                      "bambora",
                      "clearhaus",
                      "coinify",
                      "elavon",
                      "handelsbanken",
                      "klarna",
                      "klarnapayments",
                      "mobilepay",
                      "mobilepayonline",
                      "mobilepaysubscriptions",
                      "nets",
                      "paypal",
                      "paysafecard",
                      "resurs",
                      "sofort",
                      "swedbank",
                      "swish",
                      "teller",
                      "trustly",
                      "valitor",
                      "viabill",
                      "vipps"
                    ]
                  },
                  "customer_ip": {
                    "description": "<p>Customer IP</p>\n",
                    "type": "string"
                  },
                  "extras": {
                    "description": "<p>Additional acquirer specific params</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/cancel": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions--id-cancel---format-",
        "summary": "Cancel subscription",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/subscriptions/{id}/recurring": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions--id-recurring---format-",
        "summary": "Create subscription recurring payment",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>DEPRECATED: it will be removed in v11. Disables asynchronious behaviour and returns the transaction with completed operation (ex. see GET /payments/{id}). MUST be used as a query parameter “?synchronized” (value not required)</p>\n",
            "name": "synchronized",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "description": "<p>Amount</p>\n",
                    "type": "integer",
                    "format": "int32"
                  },
                  "order_id": {
                    "description": "<p>Unique order id(must be between 4-20 characters)</p>\n",
                    "type": "string"
                  },
                  "auto_capture": {
                    "description": "<p>When true, payment is captured after authorization. Default is false</p>\n",
                    "type": "boolean"
                  },
                  "autofee": {
                    "description": "<p>When true, fee is calculated and added to the given amount. Default is merchant autofee</p>\n",
                    "type": "boolean"
                  },
                  "zero_auth": {
                    "description": "<p>(Nets only) When true, will perform an initial authorize of zero, then authorize the full amount on capture. Default is false</p>\n",
                    "type": "boolean"
                  },
                  "text_on_statement": {
                    "description": "<p>Text to be displayed on cardholder’s statement. This overrides text_on_statement on authorize. Max 22 ASCII chars. Currently supported by Clearhaus only.</p>\n",
                    "type": "string"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/fraud-report": {
      "post": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "POST-subscriptions--id-fraud-report---format-",
        "summary": "Create fraud confirmation report",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Specify the callback url (overrides merchant default callback-url)</p>\n",
            "name": "QuickPay-Callback-Url",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/FraudReport"
                }
              }
            }
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "description": "\n",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/operations/{operation_id}": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "GET-subscriptions--id-operations--operation_id---format-",
        "summary": "Get Operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      },
      "patch": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "PATCH-subscriptions--id-operations--operation_id---format-",
        "summary": "Update operation",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "description": "<p>Operations id</p>\n",
            "name": "operation_id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          },
          "428": {
            "description": "Precondition required"
          }
        },
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "pending": {
                    "description": "<p>Aborts the operation. Only possible on cancel operations (false is the only allowed value)</p>\n",
                    "type": "boolean"
                  }
                },
                "required": [
                  "pending"
                ]
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}/payments": {
      "get": {
        "tags": [
          "subscriptions"
        ],
        "operationId": "GET-subscriptions--id-payments---format-",
        "summary": "Get all subscription payments",
        "description": "\n",
        "parameters": [
          {
            "in": "header",
            "description": "<p>Specify the version of the API</p>\n",
            "name": "Accept-Version",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "description": "<p>Use Basic Auth to authorize to the API</p>\n",
            "name": "Authorization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "description": "<p>Subscription id</p>\n",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Return accepted payments</p>\n",
            "name": "accepted",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "description": "<p>Year</p>\n",
            "name": "date[year]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "description": "<p>Month</p>\n",
            "name": "date[month]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 12
            }
          },
          {
            "in": "query",
            "description": "<p>Day of the month</p>\n",
            "name": "date[day]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 31
            }
          },
          {
            "in": "query",
            "description": "<p>Hour of the day</p>\n",
            "name": "date[hour]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 23
            }
          },
          {
            "in": "query",
            "description": "<p>Minute of the hour</p>\n",
            "name": "date[minute]",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 59
            }
          },
          {
            "in": "query",
            "description": "<p>Pagination page. Default is 1</p>\n",
            "name": "page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "in": "query",
            "description": "<p>Items per page. Default is 20</p>\n",
            "name": "page_size",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "in": "query",
            "description": "<p>Property to sort by</p>\n",
            "name": "sort_by",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "payment_id",
                "order_id"
              ],
              "default": "payment_id"
            }
          },
          {
            "in": "query",
            "description": "<p>Sort direction</p>\n",
            "name": "sort_dir",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "403": {
            "description": "Not authorized"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AcquirerSettings": {
        "properties": {
          "bambora": {
            "$ref": "#/components/schemas/AcquirerSettingsBambora",
            "description": "Bambora settings"
          },
          "clearhaus": {
            "$ref": "#/components/schemas/AcquirerSettingsClearhaus",
            "description": "Clearhaus settings"
          },
          "coinify": {
            "$ref": "#/components/schemas/AcquirerSettingsCoinify",
            "description": "Coinify settings"
          },
          "elavon": {
            "$ref": "#/components/schemas/AcquirerSettingsElavon",
            "description": "Elavon settings"
          },
          "handelsbanken": {
            "$ref": "#/components/schemas/AcquirerSettingsHandelsbanken",
            "description": "Handelsbanken settings"
          },
          "klarna": {
            "$ref": "#/components/schemas/AcquirerSettingsKlarna",
            "description": "Klarna settings"
          },
          "klarnapayments": {
            "$ref": "#/components/schemas/AcquirerSettingsKlarnaPayments",
            "description": "KlarnaPayments settings"
          },
          "mobilepay": {
            "$ref": "#/components/schemas/AcquirerSettingsMobilePay",
            "description": "MobilePay settings"
          },
          "mobilepayonline": {
            "$ref": "#/components/schemas/AcquirerSettingsMobilePayOnline",
            "description": "MobilePayOnline settings"
          },
          "mobilepaysubscriptions": {
            "$ref": "#/components/schemas/AcquirerSettingsMobilePaySubscriptions",
            "description": "MobilePay Subscription settings"
          },
          "nets": {
            "$ref": "#/components/schemas/AcquirerSettingsNets",
            "description": "Nets settings"
          },
          "paypal": {
            "$ref": "#/components/schemas/AcquirerSettingsPayPal",
            "description": "PayPal settings"
          },
          "paysafecard": {
            "$ref": "#/components/schemas/AcquirerSettingsPaysafecard",
            "description": "Paysafecard settings"
          },
          "resurs": {
            "$ref": "#/components/schemas/AcquirerSettingsResurs",
            "description": "Resurs settings"
          },
          "sofort": {
            "$ref": "#/components/schemas/AcquirerSettingsSofort",
            "description": "Sofort settings"
          },
          "swedbank": {
            "$ref": "#/components/schemas/AcquirerSettingsSwedbank",
            "description": "Swedbank settings"
          },
          "swish": {
            "$ref": "#/components/schemas/AcquirerSettingsSwish",
            "description": "Swish settings"
          },
          "teller": {
            "$ref": "#/components/schemas/AcquirerSettingsTeller",
            "description": "Teller settings"
          },
          "trustly": {
            "$ref": "#/components/schemas/AcquirerSettingsTrustly",
            "description": "Trustly settings"
          },
          "valitor": {
            "$ref": "#/components/schemas/AcquirerSettingsValitor",
            "description": "Valitor settings"
          },
          "viabill": {
            "$ref": "#/components/schemas/AcquirerSettingsViaBill",
            "description": "ViaBill settings"
          },
          "vipps": {
            "$ref": "#/components/schemas/AcquirerSettingsVipps",
            "description": "Vipps settings"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsBambora": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Bambora business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Bambora identification number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Bambora international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Bambora Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Bambora VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsClearhaus": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "api_key": {
            "type": "string",
            "description": "Clearhaus api key"
          },
          "apple_pay": {
            "type": "boolean",
            "description": "True if Apple Pay is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Clearhaus business code(mcc)"
          },
          "mpi_merchant_id": {
            "type": "string",
            "description": "MPI Merchant id used for 3D Secure. This field is maintained by QuickPay."
          },
          "payout": {
            "type": "boolean",
            "description": "True if payout is enabled"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsCoinify": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "api_key": {
            "type": "string",
            "description": "Coinify API key"
          },
          "api_secret": {
            "type": "string",
            "description": "Coinify API secret"
          },
          "ipn_secret": {
            "type": "string",
            "description": "Coinify IPN secret"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsElavon": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Elavon business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Elavon identification number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Elavon international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Elavon Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Elavon VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsHandelsbanken": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Handelsbanken business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Handelsbanken identification number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Handelsbanken international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Handelsbanken Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Handelsbanken VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsKlarna": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "eid": {
            "type": "integer",
            "format": "int32",
            "description": "Klarna merchant id"
          },
          "shared_secret": {
            "type": "string",
            "description": "Klarna shared secret"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsKlarnaPayments": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "password": {
            "type": "string",
            "description": "Klarna password"
          },
          "uid": {
            "type": "string",
            "description": "Klarna username"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsMobilePay": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "delivery_limited_to": {
            "type": "string",
            "description": "MobilePay delivery address selection countries limited to"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsMobilePayOnline": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "delivery_limited_to": {
            "type": "string",
            "description": "MobilePayOnline delivery address selection countries limited to"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the merchant"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsMobilePaySubscriptions": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "auth_state": {
            "type": "string",
            "description": "Identifier MobilePay Subscriptions uses to link requests to callbacks"
          },
          "code_verifier": {
            "type": "string",
            "description": "Verifies received code challenge"
          },
          "last_token_refresh": {
            "type": "integer",
            "format": "int32",
            "description": "Unix-timestamp of last time token was refreshed"
          },
          "nonce": {
            "type": "string",
            "description": "Associate client sessions with ID Tokens to mitigate replay attacks"
          },
          "pending_status": {
            "type": "integer",
            "format": "int32",
            "description": "0: agreement inactive, 1: flow initialised, 2: tokens received, 3: flow completed"
          },
          "provider": {
            "type": "object",
            "description": "The MobilePay Subscriptions provider / sales-place chosen by the merchant"
          },
          "refresh_token": {
            "type": "string",
            "description": "Token to refresh access token for up to 1 year"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsNets": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "(Depricated use Teller acquirer)"
          },
          "business_code": {
            "type": "string",
            "description": "Nets business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "(Depricated use Teller acquirer)"
          },
          "fbg1886": {
            "type": "boolean",
            "description": "True if Forbrugsforeningen is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Nets identification code"
          },
          "identification_code_int": {
            "type": "string",
            "description": "(Depricated use Teller acquirer)"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "(Depricated use Teller acquirer)"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "(Depricated use Teller acquirer)"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "secured_by_nets": {
            "type": "boolean",
            "description": "True if SecuredByNets is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "(Depricated use Teller acquirer)"
          },
          "visa_bin": {
            "type": "string",
            "description": "(Depricated use Teller acquirer)"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "(Depricated use Teller acquirer)"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsPayPal": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "credit_card": {
            "type": "boolean",
            "description": "True if credit-card payments is enabled"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "scope": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Scopes token grants access to"
          },
          "token": {
            "type": "string",
            "description": "Authentication token"
          },
          "token_secret": {
            "type": "string",
            "description": "Authentication token secret"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsPaysafecard": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "currencies": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Paysafecard currencies"
          },
          "password": {
            "type": "string",
            "description": "Paysafecard password"
          },
          "username": {
            "type": "string",
            "description": "Paysafecard username"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsResurs": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "customer_id": {
            "type": "string",
            "description": "Resurs user_name"
          },
          "customer_password": {
            "type": "string",
            "description": "Resurs password"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsSofort": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "api_key": {
            "type": "string",
            "description": "Sofort api-key"
          },
          "customer_number": {
            "type": "integer",
            "format": "int32",
            "description": "Sofort customer number"
          },
          "gateway": {
            "type": "boolean",
            "description": "Sofort gateway feature enabled"
          },
          "ideal": {
            "type": "boolean",
            "description": "Sofort iDeal feature enabled"
          },
          "ideal_notification_password": {
            "type": "string",
            "description": "Sofort iDeal notification password"
          },
          "ideal_project_id": {
            "type": "integer",
            "format": "int32",
            "description": "Sofort iDeal project id"
          },
          "ideal_project_password": {
            "type": "string",
            "description": "Sofort iDeal project password"
          },
          "project_id": {
            "type": "integer",
            "format": "int32",
            "description": "Sofort gateway project id"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsSwedbank": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Swedbank business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Swedbank identification number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Swedbank international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Swedbank Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Swedbank VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsSwish": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "cryptography_key_id": {
            "type": "integer",
            "format": "int32",
            "description": "Swish certificate and private-key cryptography key id"
          },
          "merchant_id": {
            "type": "string",
            "description": "Swish merchant id"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsTeller": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Teller business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Teller TOF number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Teller international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Teller Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Teller VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsTrustly": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "ideal": {
            "type": "boolean",
            "description": "iDeal through Trustly"
          },
          "password": {
            "type": "string",
            "description": "Trustly API password"
          },
          "username": {
            "type": "string",
            "description": "Trustly API username"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsValitor": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "americanexpress": {
            "type": "boolean",
            "description": "True if american express is enabled"
          },
          "business_code": {
            "type": "string",
            "description": "Valitor business code"
          },
          "dinersclub": {
            "type": "boolean",
            "description": "True if Diners Club is enabled"
          },
          "identification_code": {
            "type": "string",
            "description": "Valitor identification number"
          },
          "identification_code_int": {
            "type": "string",
            "description": "Valitor international identification number"
          },
          "mastercard_bin": {
            "type": "string",
            "description": "Valitor Mastercard acquirer bin used for 3D Secure"
          },
          "mastercard_mpi_merchant_id": {
            "type": "string",
            "description": "Mastercard MPI Merchant id used for 3D Secure"
          },
          "recurring": {
            "type": "boolean",
            "description": "True if recurring is enabled"
          },
          "securepay": {
            "type": "boolean",
            "description": "True if Teller SecurePay fraud detection is enabled"
          },
          "visa_bin": {
            "type": "string",
            "description": "Valitor VISA acquirer bin used for 3D Secure"
          },
          "visa_mpi_merchant_id": {
            "type": "string",
            "description": "VISA MPI Merchant id used for 3D Secure"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsViaBill": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "api_key": {
            "type": "string",
            "description": "ViaBill api key"
          }
        },
        "type": "object"
      },
      "AcquirerSettingsVipps": {
        "properties": {
          "access_token_subscription_key": {
            "type": "string",
            "description": "Vipps Access-Token Subscription Key"
          },
          "active": {
            "type": "boolean",
            "description": "True if the acquirer is active"
          },
          "client_id": {
            "type": "string",
            "description": "Vipps OAuth Client ID"
          },
          "client_secret": {
            "type": "string",
            "description": "Vipps OAuth Client Secret"
          },
          "ecommerce_subscription_key": {
            "type": "string",
            "description": "Vipps eCommerce Subscription Key"
          },
          "orgno": {
            "type": "string",
            "description": "Vipps company organization number"
          },
          "serial_number": {
            "type": "string",
            "description": "Vipps agreement serial number"
          }
        },
        "type": "object"
      },
      "Address": {
        "properties": {
          "att": {
            "type": "string",
            "description": "Att."
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "country_code": {
            "type": "string",
            "description": "Country code"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "street": {
            "type": "string",
            "description": "Street"
          },
          "vat_no": {
            "type": "string",
            "description": "VAT reg. no."
          },
          "zip_code": {
            "type": "string",
            "description": "Zip code"
          }
        },
        "type": "object"
      },
      "IntegrationSettings": {
        "properties": {
          "economic": {
            "$ref": "#/components/schemas/IntegrationSettingsEconomic",
            "description": "e-conomic settings"
          }
        },
        "type": "object"
      },
      "IntegrationSettingsEconomic": {
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if the settings are active"
          },
          "agreement": {
            "type": "string",
            "description": "e-conomic agreement id"
          },
          "agreement_token": {
            "type": "string",
            "description": "e-conomic agreement grant token"
          }
        },
        "type": "object"
      },
      "Merchant": {
        "properties": {
          "acquirer_settings": {
            "$ref": "#/components/schemas/AcquirerSettings",
            "description": "Acquirer settings"
          },
          "allow_test_transactions": {
            "type": "boolean",
            "description": "Allow test transactions"
          },
          "autofee": {
            "type": "boolean",
            "description": "Include acquirer fee on payments"
          },
          "billing_address": {
            "$ref": "#/components/schemas/Address",
            "description": "Billing address"
          },
          "callback_url": {
            "type": "string",
            "description": "Callback url"
          },
          "contact_email": {
            "type": "string",
            "description": "Contact email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "customer_address": {
            "$ref": "#/components/schemas/Address",
            "description": "Customer address"
          },
          "default_branding_config": {
            "type": "object",
            "description": "Default branding config"
          },
          "default_branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of default branding, or null"
          },
          "default_payment_language": {
            "type": "string",
            "description": "Default payment language (Two letter language code, ISO-639-1)"
          },
          "default_payment_methods": {
            "type": "string",
            "description": "Comma separated list of default payment methods"
          },
          "default_text_on_statement": {
            "type": "string",
            "description": "Text to be displayed on cardholder's statement. Currently supported by Clearhaus only"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "integration_settings": {
            "$ref": "#/components/schemas/IntegrationSettings",
            "description": "Integration settings"
          },
          "locale": {
            "type": "string",
            "description": "Locale"
          },
          "logging_stops_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when logging is active "
          },
          "pci": {
            "$ref": "#/components/schemas/PciSettings",
            "description": "PCI settings"
          },
          "reseller": {
            "$ref": "#/components/schemas/MerchantReseller",
            "description": "Reseller of Merchant"
          },
          "shop_name": {
            "type": "string",
            "description": "Shop name"
          },
          "shop_url": {
            "type": "string",
            "description": "Shop url (deprecated, use shop_urls instead)"
          },
          "shop_urls": {
            "type": "array",
            "items": {},
            "description": "Shop urls"
          },
          "shopsystem": {
            "type": "string",
            "description": "Shop system"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when merchant was suspended or null if it is not suspended"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone"
          },
          "type": {
            "type": "string",
            "description": "Type of account"
          }
        },
        "type": "object"
      },
      "MerchantReseller": {
        "properties": {
          "default_branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of default branding, or null"
          },
          "default_payment_methods": {
            "type": "string",
            "description": "Comma separated list of default payment methods"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "support_email": {
            "type": "string",
            "description": "Email address to reseller for support"
          }
        },
        "type": "object"
      },
      "PciSettings": {
        "properties": {
          "saq_a": {
            "type": "boolean",
            "description": "true if SAQ A is set"
          },
          "saq_a_ep": {
            "type": "boolean",
            "description": "true if SAQ A-EP is set"
          },
          "saq_b": {
            "type": "boolean",
            "description": "true if SAQ B is set"
          },
          "saq_b_ip": {
            "type": "boolean",
            "description": "true if SAQ B-IP is set"
          },
          "saq_c": {
            "type": "boolean",
            "description": "true if SAQ C is set"
          },
          "saq_c_vt": {
            "type": "boolean",
            "description": "true if SAQ C-VT is set"
          },
          "saq_d_merchant": {
            "type": "boolean",
            "description": "true if SAQ D Merchant is set"
          },
          "saq_d_service_provider": {
            "type": "boolean",
            "description": "true if SAQ D Service Provider is set"
          },
          "saq_p2pe_hw": {
            "type": "boolean",
            "description": "true if SAQ P2PE-HW is set"
          }
        },
        "type": "object"
      },
      "PrivateKey": {
        "properties": {
          "private_key": {
            "type": "string",
            "description": "The private key"
          }
        },
        "type": "object"
      },
      "Zero4PlatformSettings": {
        "properties": {
          "phone": {
            "type": "string",
            "description": "04 merchant phone"
          },
          "secret": {
            "type": "string",
            "description": "04 merchant secret"
          }
        },
        "type": "object"
      },
      "AcquirerTest": {
        "properties": {
          "details": {
            "$ref": "#/components/schemas/AcquirerTestDetails",
            "description": "Test result details"
          },
          "success": {
            "type": "boolean",
            "description": "All tests successful?"
          }
        },
        "type": "object"
      },
      "AcquirerTestDetails": {
        "properties": {
          "3d_secure": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "3d_secure test status"
          },
          "dankort": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "dankort test status"
          },
          "diners": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "diners test status"
          },
          "fbg1886": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "fbg1886 test status"
          },
          "mastercard": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "mastercard test status"
          },
          "recurring": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "recurring test status"
          },
          "visa": {
            "$ref": "#/components/schemas/AcquirerTestResult",
            "description": "visa test status"
          }
        },
        "type": "object"
      },
      "AcquirerTestResult": {
        "properties": {
          "currency": {
            "type": "string",
            "description": "Tested currency"
          },
          "message": {
            "type": "string",
            "description": "Test message"
          },
          "success": {
            "type": "boolean",
            "description": "Test successful?"
          }
        },
        "type": "object"
      },
      "Card": {
        "required": [
          "variables"
        ],
        "properties": {
          "accepted": {
            "type": "boolean",
            "description": "Accepted by acquirer"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed the card"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Card id"
          },
          "link": {
            "$ref": "#/components/schemas/CardLink",
            "description": "Sharable link to payment window"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Merchant id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "Card metadata"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardOperation"
            },
            "description": "Operations"
          },
          "test_mode": {
            "type": "boolean",
            "description": "Test mode"
          },
          "type": {
            "type": "string",
            "enum": [
              "Card"
            ],
            "description": "Type of transaction"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom variables"
          }
        },
        "type": "object"
      },
      "CardLink": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Force usage of this acquirer"
          },
          "agreement_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of agreement that will be used in the payment window"
          },
          "branding_config": {
            "type": "object",
            "description": "Branding config"
          },
          "branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "The branding to use in the payment window"
          },
          "callbackurl": {
            "type": "string",
            "description": "Endpoint for a POST callback"
          },
          "cancelurl": {
            "type": "string",
            "description": "Where cardholder is redirected after cancel"
          },
          "continueurl": {
            "type": "string",
            "description": "Where cardholder is redirected after success"
          },
          "framed": {
            "type": "boolean",
            "description": "Allowed in iframe"
          },
          "google_analytics_client_id": {
            "type": "string",
            "description": "Set this to enable Google Analytics events from the payment window"
          },
          "google_analytics_tracking_id": {
            "type": "string",
            "description": "Set this to enable Google Analytics events from the payment window"
          },
          "language": {
            "type": "string",
            "description": "Two letter language code that determines the language of the payment window"
          },
          "payment_methods": {
            "type": "string",
            "description": "Lock to these payment methods"
          },
          "url": {
            "type": "string",
            "description": "Url to payment window for this payment link"
          },
          "version": {
            "type": "string",
            "description": "Version of payment window and API"
          }
        },
        "type": "object"
      },
      "CardLinkUrl": {
        "properties": {
          "url": {
            "type": "string",
            "description": "Url to payment window for this card link"
          }
        },
        "type": "object"
      },
      "CardOperation": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed this operation"
          },
          "aq_status_code": {
            "type": "string",
            "description": "Acquirer status code"
          },
          "aq_status_msg": {
            "type": "string",
            "description": "Acquirer status message"
          },
          "callback_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of callback"
          },
          "callback_duration": {
            "type": "integer",
            "format": "int32",
            "description": "Callback duration (ms)"
          },
          "callback_response_code": {
            "type": "boolean",
            "description": "The http response code from the callback operation"
          },
          "callback_success": {
            "type": "boolean",
            "description": "Did the callback succeed"
          },
          "callback_url": {
            "type": "string",
            "description": "Operation callback url"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Operation ID"
          },
          "pending": {
            "type": "boolean",
            "description": "If the operation is pending"
          },
          "qp_status_code": {
            "type": "string",
            "description": "QuickPay status code"
          },
          "qp_status_msg": {
            "type": "string",
            "description": "QuickPay status message"
          },
          "type": {
            "type": "string",
            "description": "Type of operation"
          }
        },
        "type": "object"
      },
      "CardToken": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "is_used": {
            "type": "boolean",
            "description": "Token used"
          },
          "token": {
            "type": "string",
            "description": "Card token"
          }
        },
        "type": "object"
      },
      "FraudReport": {
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Report creation date"
          },
          "description": {
            "type": "string",
            "description": "Report description"
          }
        },
        "type": "object"
      },
      "Metadata": {
        "properties": {
          "bin": {
            "type": "string",
            "description": "Card type only: Card BIN"
          },
          "brand": {
            "type": "string",
            "description": "Card type only: The card brand"
          },
          "corporate": {
            "type": "boolean",
            "description": "Card type only: Corporate status"
          },
          "country": {
            "type": "string",
            "description": "Card type only: The card country in ISO 3166-1 alpha-3"
          },
          "customer_country": {
            "type": "string",
            "description": "Customer country based on IP geo-data, ISO 3166-1 alpha-2"
          },
          "customer_ip": {
            "type": "string",
            "description": "Customer IP"
          },
          "exp_month": {
            "type": "integer",
            "format": "int32",
            "description": "Card type only: The expiration month"
          },
          "exp_year": {
            "type": "integer",
            "format": "int32",
            "description": "Card type only: The expiration year (YYYY)"
          },
          "fraud_remarks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Fraud remarks"
          },
          "fraud_report_description": {
            "type": "string",
            "description": "Fraud report description"
          },
          "fraud_reported": {
            "type": "boolean",
            "description": "Reported as fraudulent"
          },
          "fraud_reported_at": {
            "type": "string",
            "description": "Fraud report description"
          },
          "fraud_suspected": {
            "type": "boolean",
            "description": "Suspected fraud"
          },
          "hash": {
            "type": "string",
            "description": "Card type only: PCI safe hash of card number"
          },
          "is_3d_secure": {
            "type": "string",
            "description": "Card type only: Verified via 3D-Secure"
          },
          "issued_to": {
            "type": "string",
            "description": "Name of cardholder"
          },
          "last4": {
            "type": "string",
            "description": "Card type only: The last 4 digits of the card number"
          },
          "nin_country_code": {
            "type": "string",
            "description": "NIN type only. NIN country code, ISO 3166-1 alpha-3"
          },
          "nin_gender": {
            "type": "string",
            "description": "NIN type only. NIN gender"
          },
          "nin_number": {
            "type": "string",
            "description": "NIN type only. NIN number"
          },
          "number": {
            "type": "string",
            "description": "Mobile type only: The mobile number"
          },
          "origin": {
            "type": "string",
            "description": "Origin of this transaction or card. If set, describes where it came from."
          },
          "shopsystem_name": {
            "type": "string",
            "description": "Shop system module name"
          },
          "shopsystem_version": {
            "type": "string",
            "description": "Shop system module version"
          },
          "type": {
            "type": "string",
            "enum": [
              "card",
              "mobile",
              "nin"
            ],
            "description": "Type"
          }
        },
        "type": "object"
      },
      "AclPermission": {
        "properties": {
          "delete": {
            "type": "boolean",
            "description": "Allow DELETE"
          },
          "get": {
            "type": "boolean",
            "description": "Allow GET"
          },
          "patch": {
            "type": "boolean",
            "description": "Allow PATCH"
          },
          "post": {
            "type": "boolean",
            "description": "Allow POST"
          },
          "put": {
            "type": "boolean",
            "description": "Allow PUT"
          },
          "resource": {
            "type": "string",
            "description": "Resource URI"
          }
        },
        "type": "object"
      },
      "Activity": {
        "properties": {
          "account_id": {
            "type": "integer",
            "format": "int32",
            "description": "Activity performed on"
          },
          "action": {
            "type": "string",
            "description": "Activity action"
          },
          "changes": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Activity changes"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of activity"
          },
          "extra": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Extra data"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "support": {
            "type": "boolean",
            "description": "Whether activity was created by a supporter"
          },
          "target_id": {
            "type": "integer",
            "format": "int32",
            "description": "Activity target id"
          },
          "target_type": {
            "type": "string",
            "description": "Activity target"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "description": "Activity performed by"
          }
        },
        "type": "object"
      },
      "Agreement": {
        "properties": {
          "accepted": {
            "type": "boolean",
            "description": "Is agreement accepted by user"
          },
          "account": {
            "$ref": "#/components/schemas/AgreementAccount",
            "description": "Account details"
          },
          "acl_permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AclPermission"
            },
            "description": "ACL permissions"
          },
          "api_key": {
            "type": "string",
            "description": "API key. This will show as null unless it is owned by your user or by a system user"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "ip_restriction": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IPRestriction"
            },
            "description": "IP restriction"
          },
          "locked": {
            "type": "boolean",
            "description": "If true, the agreement can not be changed"
          },
          "owner": {
            "type": "boolean",
            "description": "Is account owner"
          },
          "service": {
            "type": "string",
            "description": "Service name (only for system/service agreements)"
          },
          "support": {
            "type": "boolean",
            "description": "Support agreement"
          },
          "user": {
            "$ref": "#/components/schemas/AgreementUser",
            "description": "User details"
          }
        },
        "type": "object"
      },
      "AgreementAccount": {
        "properties": {
          "callback_url": {
            "type": "string",
            "description": "Callback URL (Merchant only)"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "shop_name": {
            "type": "string",
            "description": "Shop name (Merchant only)"
          },
          "type": {
            "type": "string",
            "description": "Type of account, e.g. \"Merchant\""
          }
        },
        "type": "object"
      },
      "AgreementUser": {
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of user"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of user"
          },
          "name": {
            "type": "string",
            "description": "Name of user. Will be hidden until user has accepted agreement."
          },
          "system_user": {
            "type": "boolean",
            "description": "If true, this user should only be used for api-access and services. Not to log into manager"
          }
        },
        "type": "object"
      },
      "IPRestriction": {
        "properties": {
          "address": {
            "type": "string",
            "description": "IP address"
          }
        },
        "type": "object"
      },
      "AclResource": {
        "properties": {
          "account_type": {
            "type": "string",
            "description": "Account type that this resource applies to"
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "enum": [
              "GET",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ],
            "description": "The valid http verbs for this resource"
          },
          "description": {
            "type": "string",
            "description": "Description of the resource"
          },
          "resource": {
            "type": "string",
            "description": "Path to the resource"
          }
        },
        "type": "object"
      },
      "Branding": {
        "properties": {
          "account_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the account that owns the branding"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BrandingResource"
            },
            "description": "Resources"
          }
        },
        "type": "object"
      },
      "BrandingResource": {
        "properties": {
          "data": {
            "type": "string",
            "description": "Binary data encoded in Base64"
          },
          "mime": {
            "type": "string",
            "description": "Mime type"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "size": {
            "type": "string",
            "description": "Size in bytes"
          }
        },
        "type": "object"
      },
      "AcquirerStatus": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Acquirer"
          },
          "health": {
            "type": "integer",
            "format": "int32",
            "description": "Health of the acquirer in %"
          },
          "status": {
            "type": "string",
            "description": "Status of the acquirer. Can be 'ok', 'irregular' or 'down'"
          }
        },
        "type": "object"
      },
      "Pong": {
        "properties": {
          "msg": {
            "type": "string",
            "description": "Friendly message"
          },
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Echo params send in the request"
          },
          "scope": {
            "type": "string",
            "enum": [
              "anonymous",
              "user",
              "merchant",
              "reseller"
            ],
            "description": "API scope"
          },
          "version": {
            "type": "string",
            "description": "The version ('v10')"
          }
        },
        "type": "object"
      },
      "MerchantCryptographyKey": {
        "properties": {
          "certificate_expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "Certificate expiration timestamp"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "KMS id"
          },
          "public_key_hash": {
            "type": "string",
            "description": "Public Key identification hash"
          },
          "short_description": {
            "type": "string",
            "description": "Short description"
          },
          "type": {
            "type": "string",
            "description": "Key type (ec/rsa)"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of update"
          }
        },
        "type": "object"
      },
      "CalculatedFee": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Acquirer"
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount that the fee is calculated from"
          },
          "fee": {
            "type": "integer",
            "format": "int32",
            "description": "The calculated fee in smallest unit"
          },
          "formula": {
            "type": "string",
            "description": "The formula"
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "Amount + Fee"
          }
        },
        "type": "object"
      },
      "FeeFormula": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Acquirer"
          },
          "formula": {
            "type": "string",
            "description": "The formula"
          },
          "payment_method": {
            "type": "string",
            "description": "Payment method"
          },
          "standard": {
            "type": "boolean",
            "description": "True if this is the standard fee formula"
          }
        },
        "type": "object"
      },
      "FraudFilterRule": {
        "properties": {
          "metric_name": {
            "type": "string",
            "description": "The variable metric this rule applies to"
          },
          "operator": {
            "type": "string",
            "description": "The operator (==, !=, <, <=, >, >=, in, not_in)"
          },
          "value": {
            "type": "string",
            "description": "The string representation of the value used for comparison with the metric. E.g. '42' or 'DNK'"
          }
        },
        "type": "object"
      },
      "FraudRuleset": {
        "properties": {
          "action": {
            "type": "string",
            "description": "The action that happens if this ruleset is triggered (nothing, flag, force_3d or block)"
          },
          "combinator": {
            "type": "string",
            "description": "The method used to combine filter rules (and, or)"
          },
          "filter_rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FraudFilterRule"
            },
            "description": "The rules of the ruleset"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique id"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Owner of the ruleset"
          },
          "name": {
            "type": "string",
            "description": "Descriptive name"
          }
        },
        "type": "object"
      },
      "PaymentMethodPriority": {
        "properties": {
          "payment_method_priority": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Payment method priority"
          }
        },
        "type": "object"
      },
      "Basket": {
        "properties": {
          "item_name": {
            "type": "string",
            "description": "Item name"
          },
          "item_no": {
            "type": "string",
            "description": "Item number (SKU)"
          },
          "item_price": {
            "type": "integer",
            "format": "int32",
            "description": "Item price"
          },
          "qty": {
            "type": "integer",
            "format": "int32",
            "description": "Quantity"
          },
          "vat_rate": {
            "type": "number",
            "format": "float",
            "description": "VAT rate"
          }
        },
        "type": "object"
      },
      "Operation": {
        "properties": {
          "3d_secure_status": {
            "type": "string",
            "description": "3D Secure status"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed this operation"
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount"
          },
          "aq_status_code": {
            "type": "string",
            "description": "Acquirer status code"
          },
          "aq_status_msg": {
            "type": "string",
            "description": "Acquirer status message"
          },
          "callback_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of callback"
          },
          "callback_duration": {
            "type": "integer",
            "format": "int32",
            "description": "Callback duration (ms)"
          },
          "callback_response_code": {
            "type": "boolean",
            "description": "The http response code from the callback operation"
          },
          "callback_success": {
            "type": "boolean",
            "description": "Did the callback succeed"
          },
          "callback_url": {
            "type": "string",
            "description": "Operation callback url"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Acquirer specific data"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Operation ID"
          },
          "pending": {
            "type": "boolean",
            "description": "If the operation is pending"
          },
          "qp_status_code": {
            "type": "string",
            "description": "QuickPay status code"
          },
          "qp_status_msg": {
            "type": "string",
            "description": "QuickPay status message"
          },
          "type": {
            "type": "string",
            "description": "Type of operation"
          }
        },
        "type": "object"
      },
      "OptionalAddress": {
        "properties": {
          "att": {
            "type": "string",
            "description": "Att."
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "company_name": {
            "type": "string",
            "description": "Company name"
          },
          "country_code": {
            "type": "string",
            "description": "Country code"
          },
          "email": {
            "type": "string",
            "description": "E-mail address"
          },
          "house_extension": {
            "type": "string",
            "description": "House extension"
          },
          "house_number": {
            "type": "string",
            "description": "House number"
          },
          "mobile_number": {
            "type": "string",
            "description": "Mobile number"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "street": {
            "type": "string",
            "description": "Street"
          },
          "vat_no": {
            "type": "string",
            "description": "VAT reg. no."
          },
          "zip_code": {
            "type": "string",
            "description": "Zip code"
          }
        },
        "type": "object"
      },
      "Payment": {
        "required": [
          "branding_id",
          "variables"
        ],
        "properties": {
          "accepted": {
            "type": "boolean",
            "description": "Accepted by acquirer"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed the transaction"
          },
          "balance": {
            "type": "integer",
            "format": "int32",
            "description": "Balance"
          },
          "basket": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Basket",
              "description": "Order items"
            }
          },
          "branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "Branding id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "deadline_at": {
            "type": "string",
            "format": "date-time",
            "description": "Authorize deadline"
          },
          "facilitator": {
            "type": "string",
            "description": "Facilitator that facilitated the transaction"
          },
          "fee": {
            "type": "integer",
            "format": "int32",
            "description": "Fee added to authorization amount (only relevant on auto-fee)"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id"
          },
          "invoice_address": {
            "$ref": "#/components/schemas/OptionalAddress",
            "description": "Invoice address set on payment creation"
          },
          "link": {
            "$ref": "#/components/schemas/PaymentLink",
            "description": "PaymentLink"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Merchant id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "Metadata"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "description": "Operations"
          },
          "order_id": {
            "type": "string",
            "description": "Order number"
          },
          "retented_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of retention"
          },
          "shipping": {
            "$ref": "#/components/schemas/Shipping",
            "description": "Shipping"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/OptionalAddress",
            "description": "Shipping address set on payment creation"
          },
          "state": {
            "type": "string",
            "enum": [
              "initial",
              "pending",
              "new",
              "rejected",
              "processed"
            ],
            "description": "State of transaction"
          },
          "subscription_id": {
            "type": "integer",
            "format": "int32",
            "description": "Parent subscription id (only recurring)"
          },
          "test_mode": {
            "type": "boolean",
            "description": "Test mode"
          },
          "text_on_statement": {
            "type": "string",
            "description": "Text on statement"
          },
          "type": {
            "type": "string",
            "description": "transaction type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last updated"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom variables"
          }
        },
        "type": "object"
      },
      "PaymentLink": {
        "properties": {
          "acquirer": {
            "type": "string",
            "description": "Force usage of this acquirer"
          },
          "agreement_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of agreement that will be used in the payment window"
          },
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount to authorize."
          },
          "auto_capture": {
            "type": "boolean",
            "description": "If true, will capture the transaction after authorize succeeds"
          },
          "auto_fee": {
            "type": "boolean",
            "description": "If true, will add acquirer fee to the amount"
          },
          "branding_config": {
            "type": "object",
            "description": "Branding config"
          },
          "branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "The branding to use in the payment window"
          },
          "callback_url": {
            "type": "string",
            "description": "Endpoint for a POST callback"
          },
          "cancel_url": {
            "type": "string",
            "description": "Where cardholder is redirected after cancel"
          },
          "continue_url": {
            "type": "string",
            "description": "Where cardholder is redirected after success"
          },
          "customer_email": {
            "type": "string",
            "description": "PayPal specific: Customer email"
          },
          "deadline": {
            "type": "string",
            "description": "Deadline in seconds for the cardholder to complete"
          },
          "framed": {
            "type": "boolean",
            "description": "Allow in iframe"
          },
          "google_analytics_client_id": {
            "type": "string",
            "description": "Set this to enable Google Analytics events from the payment window"
          },
          "google_analytics_tracking_id": {
            "type": "string",
            "description": "Set this to enable Google Analytics events from the payment window"
          },
          "invoice_address_selection": {
            "type": "boolean",
            "description": "Get customer invoice address via acquirer (Currently MobilePay and PayPal only)"
          },
          "language": {
            "type": "string",
            "description": "Two letter language code that determines the language of the payment window"
          },
          "payment_methods": {
            "type": "string",
            "description": "Lock to these payment methods"
          },
          "shipping_address_selection": {
            "type": "boolean",
            "description": "Get customer shipping address via acquirer (Currently MobilePay and PayPal only)"
          },
          "url": {
            "type": "string",
            "description": "Url to payment window for this payment link"
          },
          "version": {
            "type": "string",
            "description": "Version of payment window and API"
          }
        },
        "type": "object"
      },
      "PaymentLinkUrl": {
        "properties": {
          "url": {
            "type": "string",
            "description": "Url to payment window for this payment link"
          }
        },
        "type": "object"
      },
      "Shipping": {
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Delivery price"
          },
          "company": {
            "type": "string",
            "description": "Delivery company"
          },
          "method": {
            "type": "string",
            "description": "Delivery method"
          },
          "tracking_number": {
            "type": "string",
            "description": "Tracking number"
          },
          "tracking_url": {
            "type": "string",
            "description": "Link to delivery status page"
          },
          "vat_rate": {
            "type": "number",
            "format": "float",
            "description": "Delivery VAT rate"
          }
        },
        "type": "object"
      },
      "Payout": {
        "required": [
          "branding_id",
          "variables"
        ],
        "properties": {
          "accepted": {
            "type": "boolean",
            "description": "Accepted by acquirer"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed the transaction"
          },
          "balance": {
            "type": "integer",
            "format": "int32",
            "description": "Balance"
          },
          "branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "Branding id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "facilitator": {
            "type": "string",
            "description": "Facilitator that facilitated the transaction"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id"
          },
          "link": {
            "$ref": "#/components/schemas/PaymentLink",
            "description": "PaymentLink"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Merchant id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "Metadata"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "description": "Operations"
          },
          "order_id": {
            "type": "string",
            "description": "Order number"
          },
          "retented_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of retention"
          },
          "state": {
            "type": "string",
            "enum": [
              "initial",
              "pending",
              "new",
              "rejected",
              "processed"
            ],
            "description": "State of transaction"
          },
          "test_mode": {
            "type": "boolean",
            "description": "Test mode"
          },
          "text_on_statement": {
            "type": "string",
            "description": "Text on statement"
          },
          "type": {
            "type": "string",
            "description": "transaction type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last updated"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom variables"
          }
        },
        "type": "object"
      },
      "SubscriptionGroup": {
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int32",
            "description": "Amount that is captured on each capture"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the amount"
          },
          "description": {
            "type": "string",
            "description": "Description of the group"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "ID"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of the merchant that owns the group"
          },
          "name": {
            "type": "string",
            "description": "Name of the group"
          }
        },
        "type": "object"
      },
      "SubscriptionGroupResult": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message if anything went wrong, else null"
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "description": "HTTP status code of recurring enqueue request"
          },
          "subscription_id": {
            "type": "integer",
            "format": "int32",
            "description": "Id of subscription"
          }
        },
        "type": "object"
      },
      "Subscription": {
        "required": [
          "branding_id",
          "variables"
        ],
        "properties": {
          "accepted": {
            "type": "boolean",
            "description": "Accepted by acquirer"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer that processed the transaction"
          },
          "basket": {
            "$ref": "#/components/schemas/Basket",
            "description": "Order items"
          },
          "branding_id": {
            "type": "integer",
            "format": "int32",
            "description": "Branding id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of creation"
          },
          "currency": {
            "type": "string",
            "description": "Currency"
          },
          "deadline_at": {
            "type": "string",
            "format": "date-time",
            "description": "Authorize deadline"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "facilitator": {
            "type": "string",
            "description": "Facilitator that facilitated the transaction"
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Ids of subscription groups"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Id"
          },
          "invoice_address": {
            "$ref": "#/components/schemas/OptionalAddress",
            "description": "Invoice address set on payment creation"
          },
          "link": {
            "$ref": "#/components/schemas/PaymentLink",
            "description": "PaymentLink"
          },
          "merchant_id": {
            "type": "integer",
            "format": "int32",
            "description": "Merchant id"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "Metadata"
          },
          "operations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Operation"
            },
            "description": "Operations"
          },
          "order_id": {
            "type": "string",
            "description": "Order number"
          },
          "retented_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of retention"
          },
          "shipping": {
            "$ref": "#/components/schemas/Shipping",
            "description": "Shipping"
          },
          "shipping_address": {
            "$ref": "#/components/schemas/OptionalAddress",
            "description": "Shipping address set on payment creation"
          },
          "state": {
            "type": "string",
            "enum": [
              "initial",
              "pending",
              "new",
              "rejected",
              "processed"
            ],
            "description": "State of transaction"
          },
          "test_mode": {
            "type": "boolean",
            "description": "Test mode"
          },
          "text_on_statement": {
            "type": "string",
            "description": "Text on statement"
          },
          "type": {
            "type": "string",
            "description": "transaction type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of last updated"
          },
          "variables": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom variables"
          }
        },
        "type": "object"
      }
    },
    "requestBodies": {
      "PATCH-cards--id---format-": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "variables": {
                  "description": "<p>Custom variables</p>\n",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "POST-cards--id-fraud-report---format-": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "description": {
                  "description": "\n",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "POST-payouts--id-credit---format-": {
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "type": "object",
              "properties": {
                "amount": {
                  "description": "<p>Amount</p>\n",
                  "type": "integer",
                  "format": "int32"
                },
                "vat_rate": {
                  "description": "<p>Vate rate</p>\n",
                  "type": "number",
                  "format": "float"
                },
                "card[number]": {
                  "description": "<p>Card number</p>\n",
                  "type": "string"
                },
                "card[expiration]": {
                  "description": "<p>Expiration date (YYMM)</p>\n",
                  "type": "string"
                },
                "card[cvd]": {
                  "description": "<p>CVD/CVV</p>\n",
                  "type": "string"
                },
                "card[token]": {
                  "description": "<p>Card token</p>\n",
                  "type": "string"
                },
                "card[apple_pay_token]": {
                  "description": "<p>Apple Pay payment-token</p>\n",
                  "type": "string"
                },
                "card[mobilepay_online_token]": {
                  "description": "<p>MobilePay Online payment-token</p>\n",
                  "type": "string"
                },
                "card[issued_to]": {
                  "description": "<p>Card holder name</p>\n",
                  "type": "string"
                },
                "card[brand]": {
                  "description": "<p>Brand to use on multi-brand card</p>\n",
                  "type": "string",
                  "enum": [
                    "american-express",
                    "dankort",
                    "diners",
                    "fbg1886",
                    "jcb",
                    "maestro",
                    "mastercard",
                    "mastercard-debet",
                    "visa",
                    "visa-electron"
                  ]
                },
                "card[status]": {
                  "description": "<p>3D-Secure status</p>\n",
                  "type": "string"
                },
                "card[eci]": {
                  "description": "<p>3D-Secure eci</p>\n",
                  "type": "string"
                },
                "card[xav]": {
                  "description": "<p>3D-Secure xav</p>\n",
                  "type": "string"
                },
                "card[cavv]": {
                  "description": "<p>3D-Secure cavv</p>\n",
                  "type": "string"
                },
                "mobile_number": {
                  "description": "<p>Mobile number</p>\n",
                  "type": "string"
                },
                "nin[number]": {
                  "description": "<p>Customer NIN Number</p>\n",
                  "type": "string"
                },
                "nin[country_code]": {
                  "description": "<p>Customer country (ISO 3166-1 Alpha-3)</p>\n",
                  "type": "string"
                },
                "nin[gender]": {
                  "description": "<p>Customer gender</p>\n",
                  "type": "string",
                  "enum": [
                    "male",
                    "female"
                  ]
                },
                "person[first_name]": {
                  "description": "<p>Person first name</p>\n",
                  "type": "string"
                },
                "person[last_name]": {
                  "description": "<p>Person last name</p>\n",
                  "type": "string"
                },
                "person[email]": {
                  "description": "<p>Person email</p>\n",
                  "type": "string"
                },
                "acquirer": {
                  "description": "<p>If set, will force the use of this acquirer</p>\n",
                  "type": "string",
                  "enum": [
                    "bambora",
                    "clearhaus",
                    "coinify",
                    "elavon",
                    "handelsbanken",
                    "klarna",
                    "klarnapayments",
                    "mobilepay",
                    "mobilepayonline",
                    "mobilepaysubscriptions",
                    "nets",
                    "paypal",
                    "paysafecard",
                    "resurs",
                    "sofort",
                    "swedbank",
                    "swish",
                    "teller",
                    "trustly",
                    "valitor",
                    "viabill",
                    "vipps"
                  ]
                },
                "customer_ip": {
                  "description": "<p>Customer IP</p>\n",
                  "type": "string"
                },
                "extras": {
                  "description": "<p>Additional acquirer specific params</p>\n",
                  "type": "string"
                }
              },
              "required": [
                "amount"
              ]
            }
          }
        }
      }
    }
  }
}